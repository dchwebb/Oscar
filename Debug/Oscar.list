
Oscar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000014  08002ee0  08002ee0  00012ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000007c  20000000  08002ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
  7 .bss          00000b18  2000007c  2000007c  0002007c  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000b94  20000b94  0002007c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000813a  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014df  00000000  00000000  000281e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000518  00000000  00000000  000296c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000004a0  00000000  00000000  00029be0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00002780  00000000  00000000  0002a080  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004b35  00000000  00000000  0002c800  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00031335  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000083cc  00000000  00000000  000313b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stab         00000030  00000000  00000000  00039970  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .stabstr      000001ed  00000000  00000000  00039780  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002d40 	.word	0x08002d40

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000080 	.word	0x20000080
 80001e8:	08002d40 	.word	0x08002d40

080001ec <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	460b      	mov	r3, r1
 80001f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	887a      	ldrh	r2, [r7, #2]
 80001fc:	831a      	strh	r2, [r3, #24]
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800020a:	b480      	push	{r7}
 800020c:	b083      	sub	sp, #12
 800020e:	af00      	add	r7, sp, #0
 8000210:	6078      	str	r0, [r7, #4]
 8000212:	460b      	mov	r3, r1
 8000214:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	887a      	ldrh	r2, [r7, #2]
 800021a:	835a      	strh	r2, [r3, #26]
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <TM_DMA_ClearFlag>:
void TM_DMA_ClearFlags(DMA_Stream_TypeDef* DMA_Stream) {
	/* Clear all flags */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
}

void TM_DMA_ClearFlag(DMA_Stream_TypeDef* DMA_Stream, uint32_t flag) {
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	uint32_t location;
	uint32_t stream_number;

	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a18      	ldr	r2, [pc, #96]	; (8000298 <TM_DMA_ClearFlag+0x70>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d80a      	bhi.n	8000250 <TM_DMA_ClearFlag+0x28>
		location = (uint32_t)&DMA1->LIFCR;
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <TM_DMA_ClearFlag+0x74>)
 800023c:	60fb      	str	r3, [r7, #12]
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <TM_DMA_ClearFlag+0x78>)
 8000242:	4413      	add	r3, r2
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <TM_DMA_ClearFlag+0x7c>)
 8000246:	fba2 2303 	umull	r2, r3, r2, r3
 800024a:	091b      	lsrs	r3, r3, #4
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	e009      	b.n	8000264 <TM_DMA_ClearFlag+0x3c>
	} else {
		location = (uint32_t)&DMA2->LIFCR;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <TM_DMA_ClearFlag+0x80>)
 8000252:	60fb      	str	r3, [r7, #12]
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <TM_DMA_ClearFlag+0x84>)
 8000258:	4413      	add	r3, r2
 800025a:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <TM_DMA_ClearFlag+0x7c>)
 800025c:	fba2 2303 	umull	r2, r3, r2, r3
 8000260:	091b      	lsrs	r3, r3, #4
 8000262:	60bb      	str	r3, [r7, #8]
	}
	
	/* Get register offset */
	if (stream_number >= 4) {
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d905      	bls.n	8000276 <TM_DMA_ClearFlag+0x4e>
		/* High registers for DMA clear */
		location += 4;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3304      	adds	r3, #4
 800026e:	60fb      	str	r3, [r7, #12]
		
		/* Do offset for high DMA registers */
		stream_number -= 4;
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	3b04      	subs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
	}
	
	/* Clear flags */
	*(__IO uint32_t *)location = (flag & DMA_FLAG_ALL) << DMA_Flags_Bit_Pos[stream_number];
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	683a      	ldr	r2, [r7, #0]
 800027a:	f002 023d 	and.w	r2, r2, #61	; 0x3d
 800027e:	480c      	ldr	r0, [pc, #48]	; (80002b0 <TM_DMA_ClearFlag+0x88>)
 8000280:	68b9      	ldr	r1, [r7, #8]
 8000282:	4401      	add	r1, r0
 8000284:	7809      	ldrb	r1, [r1, #0]
 8000286:	408a      	lsls	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	4002640f 	.word	0x4002640f
 800029c:	40026008 	.word	0x40026008
 80002a0:	bffd9ff0 	.word	0xbffd9ff0
 80002a4:	aaaaaaab 	.word	0xaaaaaaab
 80002a8:	40026408 	.word	0x40026408
 80002ac:	bffd9bf0 	.word	0xbffd9bf0
 80002b0:	08002e00 	.word	0x08002e00

080002b4 <TM_DMA_GetFlags>:

uint32_t TM_DMA_GetFlags(DMA_Stream_TypeDef* DMA_Stream, uint32_t flag) {
 80002b4:	b480      	push	{r7}
 80002b6:	b087      	sub	sp, #28
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
	uint32_t stream_number = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
	uint32_t location = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
	uint32_t flags = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
	
	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <TM_DMA_GetFlags+0x88>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d80a      	bhi.n	80002e8 <TM_DMA_GetFlags+0x34>
		location = (uint32_t)&DMA1->LISR;
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <TM_DMA_GetFlags+0x8c>)
 80002d4:	613b      	str	r3, [r7, #16]
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <TM_DMA_GetFlags+0x90>)
 80002da:	4413      	add	r3, r2
 80002dc:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <TM_DMA_GetFlags+0x94>)
 80002de:	fba2 2303 	umull	r2, r3, r2, r3
 80002e2:	091b      	lsrs	r3, r3, #4
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	e009      	b.n	80002fc <TM_DMA_GetFlags+0x48>
	} else {
		location = (uint32_t)&DMA2->LISR;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <TM_DMA_GetFlags+0x98>)
 80002ea:	613b      	str	r3, [r7, #16]
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <TM_DMA_GetFlags+0x9c>)
 80002f0:	4413      	add	r3, r2
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <TM_DMA_GetFlags+0x94>)
 80002f4:	fba2 2303 	umull	r2, r3, r2, r3
 80002f8:	091b      	lsrs	r3, r3, #4
 80002fa:	617b      	str	r3, [r7, #20]
	}
	
	/* Get register offset */
	if (stream_number >= 4) {
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	2b03      	cmp	r3, #3
 8000300:	d905      	bls.n	800030e <TM_DMA_GetFlags+0x5a>
		/* High registers for DMA clear */
		location += 4;
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	3304      	adds	r3, #4
 8000306:	613b      	str	r3, [r7, #16]
		
		/* Do offset for high DMA registers */
		stream_number -= 4;
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	3b04      	subs	r3, #4
 800030c:	617b      	str	r3, [r7, #20]
	}
	
	/* Get register value */
	flags =   *(__IO uint32_t *)location;
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	60fb      	str	r3, [r7, #12]
	flags >>= DMA_Flags_Bit_Pos[stream_number];
 8000314:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <TM_DMA_GetFlags+0xa0>)
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	4413      	add	r3, r2
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	40d3      	lsrs	r3, r2
 8000322:	60fb      	str	r3, [r7, #12]
	flags &=  DMA_FLAG_ALL;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800032a:	60fb      	str	r3, [r7, #12]
	
	/* Return value */
	return flags;
 800032c:	68fb      	ldr	r3, [r7, #12]
}
 800032e:	4618      	mov	r0, r3
 8000330:	371c      	adds	r7, #28
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	4002640f 	.word	0x4002640f
 8000340:	40026000 	.word	0x40026000
 8000344:	bffd9ff0 	.word	0xbffd9ff0
 8000348:	aaaaaaab 	.word	0xaaaaaaab
 800034c:	40026400 	.word	0x40026400
 8000350:	bffd9bf0 	.word	0xbffd9bf0
 8000354:	08002e00 	.word	0x08002e00

08000358 <TM_DMA_TransferCompleteHandler>:

/*****************************************************************/
/*                 DMA INTERRUPT USER CALLBACKS                  */
/*****************************************************************/
//** DW FIXME - removed __weak from following definitions (declared in attributes.h, but causing issues)
void TM_DMA_TransferCompleteHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_TransferCompleteHandler could be implemented in the user file
	*/
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <TM_DMA_HalfTransferCompleteHandler>:

void TM_DMA_HalfTransferCompleteHandler(DMA_Stream_TypeDef* DMA_Stream) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_HalfTransferCompleteHandler could be implemented in the user file
	*/
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <TM_DMA_TransferErrorHandler>:

void TM_DMA_TransferErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_TransferErrorHandler could be implemented in the user file
	*/
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <TM_DMA_DirectModeErrorHandler>:

void TM_DMA_DirectModeErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_DirectModeErrorHandler could be implemented in the user file
	*/
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <TM_DMA_FIFOErrorHandler>:

void TM_DMA_FIFOErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_FIFOErrorHandler could be implemented in the user file
	*/
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <TM_DMA_INT_ProcessInterrupt>:
}*/

/*****************************************************************/
/*                    DMA INTERNAL FUNCTIONS                     */
/*****************************************************************/
static void TM_DMA_INT_ProcessInterrupt(DMA_Stream_TypeDef* DMA_Stream) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	/* Get DMA interrupt status flags */
	uint16_t flags = TM_DMA_GetFlags(DMA_Stream, DMA_FLAG_ALL);
 80003c4:	213d      	movs	r1, #61	; 0x3d
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ff74 	bl	80002b4 <TM_DMA_GetFlags>
 80003cc:	4603      	mov	r3, r0
 80003ce:	81fb      	strh	r3, [r7, #14]
	
	/* Clear flags */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
 80003d0:	213d      	movs	r1, #61	; 0x3d
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f7ff ff28 	bl	8000228 <TM_DMA_ClearFlag>
	
	/* Call user callback function */
	
	/* Check transfer complete flag */
	if ((flags & DMA_FLAG_TCIF) && (DMA_Stream->CR & DMA_SxCR_TCIE)) {
 80003d8:	89fb      	ldrh	r3, [r7, #14]
 80003da:	f003 0320 	and.w	r3, r3, #32
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <TM_DMA_INT_ProcessInterrupt+0x38>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f003 0310 	and.w	r3, r3, #16
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d002      	beq.n	80003f4 <TM_DMA_INT_ProcessInterrupt+0x38>
		TM_DMA_TransferCompleteHandler(DMA_Stream);
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ffb2 	bl	8000358 <TM_DMA_TransferCompleteHandler>
	}
	/* Check half-transfer complete flag */
	if ((flags & DMA_FLAG_HTIF) && (DMA_Stream->CR & DMA_SxCR_HTIE)) {
 80003f4:	89fb      	ldrh	r3, [r7, #14]
 80003f6:	f003 0310 	and.w	r3, r3, #16
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d008      	beq.n	8000410 <TM_DMA_INT_ProcessInterrupt+0x54>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f003 0308 	and.w	r3, r3, #8
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <TM_DMA_INT_ProcessInterrupt+0x54>
		TM_DMA_HalfTransferCompleteHandler(DMA_Stream);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffae 	bl	800036c <TM_DMA_HalfTransferCompleteHandler>
	}
	/* Check transfer error flag */
	if ((flags & DMA_FLAG_TEIF) && (DMA_Stream->CR & DMA_SxCR_TEIE)) {
 8000410:	89fb      	ldrh	r3, [r7, #14]
 8000412:	f003 0308 	and.w	r3, r3, #8
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <TM_DMA_INT_ProcessInterrupt+0x70>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f003 0304 	and.w	r3, r3, #4
 8000422:	2b00      	cmp	r3, #0
 8000424:	d002      	beq.n	800042c <TM_DMA_INT_ProcessInterrupt+0x70>
		TM_DMA_TransferErrorHandler(DMA_Stream);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f7ff ffaa 	bl	8000380 <TM_DMA_TransferErrorHandler>
	}
	/* Check direct error flag */
	if ((flags & DMA_FLAG_DMEIF) && (DMA_Stream->CR & DMA_SxCR_DMEIE)) {
 800042c:	89fb      	ldrh	r3, [r7, #14]
 800042e:	f003 0304 	and.w	r3, r3, #4
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <TM_DMA_INT_ProcessInterrupt+0x8c>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	2b00      	cmp	r3, #0
 8000440:	d002      	beq.n	8000448 <TM_DMA_INT_ProcessInterrupt+0x8c>
		TM_DMA_DirectModeErrorHandler(DMA_Stream);
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f7ff ffa6 	bl	8000394 <TM_DMA_DirectModeErrorHandler>
	}
	/* Check FIFO error flag */
	if ((flags & DMA_FLAG_FEIF) && (DMA_Stream->FCR & DMA_SxFCR_FEIE)) {
 8000448:	89fb      	ldrh	r3, [r7, #14]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d008      	beq.n	8000464 <TM_DMA_INT_ProcessInterrupt+0xa8>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <TM_DMA_INT_ProcessInterrupt+0xa8>
		TM_DMA_FIFOErrorHandler(DMA_Stream);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <TM_DMA_FIFOErrorHandler>
	}
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <DMA1_Stream0_IRQHandler>:

/* Handle all DMA interrupt handlers possible */
#ifndef DMA1_STREAM0_DISABLE_IRQHANDLER
void DMA1_Stream0_IRQHandler(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream0);
 8000470:	4802      	ldr	r0, [pc, #8]	; (800047c <DMA1_Stream0_IRQHandler+0x10>)
 8000472:	f7ff ffa3 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40026010 	.word	0x40026010

08000480 <DMA1_Stream1_IRQHandler>:
#endif
#ifndef DMA1_STREAM1_DISABLE_IRQHANDLER
void DMA1_Stream1_IRQHandler(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream1);
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <DMA1_Stream1_IRQHandler+0x10>)
 8000486:	f7ff ff99 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40026028 	.word	0x40026028

08000494 <DMA1_Stream2_IRQHandler>:
#endif
#ifndef DMA1_STREAM2_DISABLE_IRQHANDLER
void DMA1_Stream2_IRQHandler(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream2);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <DMA1_Stream2_IRQHandler+0x10>)
 800049a:	f7ff ff8f 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40026040 	.word	0x40026040

080004a8 <DMA1_Stream3_IRQHandler>:
#endif
#ifndef DMA1_STREAM3_DISABLE_IRQHANDLER
void DMA1_Stream3_IRQHandler(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream3);
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <DMA1_Stream3_IRQHandler+0x10>)
 80004ae:	f7ff ff85 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40026058 	.word	0x40026058

080004bc <DMA1_Stream4_IRQHandler>:
#endif
#ifndef DMA1_STREAM4_DISABLE_IRQHANDLER
void DMA1_Stream4_IRQHandler(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream4);
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <DMA1_Stream4_IRQHandler+0x10>)
 80004c2:	f7ff ff7b 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40026070 	.word	0x40026070

080004d0 <DMA1_Stream5_IRQHandler>:
#endif
#ifndef DMA1_STREAM5_DISABLE_IRQHANDLER
void DMA1_Stream5_IRQHandler(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream5);
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <DMA1_Stream5_IRQHandler+0x10>)
 80004d6:	f7ff ff71 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40026088 	.word	0x40026088

080004e4 <DMA1_Stream6_IRQHandler>:
#endif
#ifndef DMA1_STREAM6_DISABLE_IRQHANDLER
void DMA1_Stream6_IRQHandler(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream6);
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <DMA1_Stream6_IRQHandler+0x10>)
 80004ea:	f7ff ff67 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	400260a0 	.word	0x400260a0

080004f8 <DMA1_Stream7_IRQHandler>:
#endif
#ifndef DMA1_STREAM7_DISABLE_IRQHANDLER
void DMA1_Stream7_IRQHandler(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream7);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <DMA1_Stream7_IRQHandler+0x10>)
 80004fe:	f7ff ff5d 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	400260b8 	.word	0x400260b8

0800050c <DMA2_Stream0_IRQHandler>:
#endif
#ifndef DMA2_STREAM0_DISABLE_IRQHANDLER
void DMA2_Stream0_IRQHandler(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream0);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <DMA2_Stream0_IRQHandler+0x10>)
 8000512:	f7ff ff53 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40026410 	.word	0x40026410

08000520 <DMA2_Stream1_IRQHandler>:
#endif
#ifndef DMA2_STREAM1_DISABLE_IRQHANDLER
void DMA2_Stream1_IRQHandler(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream1);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <DMA2_Stream1_IRQHandler+0x10>)
 8000526:	f7ff ff49 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40026428 	.word	0x40026428

08000534 <DMA2_Stream2_IRQHandler>:
#endif
#ifndef DMA2_STREAM2_DISABLE_IRQHANDLER
void DMA2_Stream2_IRQHandler(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream2);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <DMA2_Stream2_IRQHandler+0x10>)
 800053a:	f7ff ff3f 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40026440 	.word	0x40026440

08000548 <DMA2_Stream3_IRQHandler>:
#endif
#ifndef DMA2_STREAM3_DISABLE_IRQHANDLER
void DMA2_Stream3_IRQHandler(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream3);
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <DMA2_Stream3_IRQHandler+0x10>)
 800054e:	f7ff ff35 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40026458 	.word	0x40026458

0800055c <DMA2_Stream4_IRQHandler>:
#endif
#ifndef DMA2_STREAM4_DISABLE_IRQHANDLER
void DMA2_Stream4_IRQHandler(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream4);
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <DMA2_Stream4_IRQHandler+0x10>)
 8000562:	f7ff ff2b 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40026470 	.word	0x40026470

08000570 <DMA2_Stream5_IRQHandler>:
#endif
#ifndef DMA2_STREAM5_DISABLE_IRQHANDLER
void DMA2_Stream5_IRQHandler(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream5);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <DMA2_Stream5_IRQHandler+0x10>)
 8000576:	f7ff ff21 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40026488 	.word	0x40026488

08000584 <DMA2_Stream6_IRQHandler>:
#endif
#ifndef DMA2_STREAM6_DISABLE_IRQHANDLER
void DMA2_Stream6_IRQHandler(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream6);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <DMA2_Stream6_IRQHandler+0x10>)
 800058a:	f7ff ff17 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	400264a0 	.word	0x400264a0

08000598 <DMA2_Stream7_IRQHandler>:
#endif
#ifndef DMA2_STREAM7_DISABLE_IRQHANDLER
void DMA2_Stream7_IRQHandler(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream7);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <DMA2_Stream7_IRQHandler+0x10>)
 800059e:	f7ff ff0d 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	400264b8 	.word	0x400264b8

080005ac <_ZN3Lcd4InitEv>:
#include "lcd.h"



void Lcd::Init(void) {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	1d3b      	adds	r3, r7, #4
 80005b6:	6018      	str	r0, [r3, #0]

	// Force reset
	LCD_RST_RESET;
 80005b8:	4ae4      	ldr	r2, [pc, #912]	; (800094c <_ZN3Lcd4InitEv+0x3a0>)
 80005ba:	4be4      	ldr	r3, [pc, #912]	; (800094c <_ZN3Lcd4InitEv+0x3a0>)
 80005bc:	8b5b      	ldrh	r3, [r3, #26]
 80005be:	b29b      	uxth	r3, r3
 80005c0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005c4:	b29b      	uxth	r3, r3
 80005c6:	8353      	strh	r3, [r2, #26]
	Delay(20000);
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	f644 6120 	movw	r1, #20000	; 0x4e20
 80005ce:	6818      	ldr	r0, [r3, #0]
 80005d0:	f000 fbb0 	bl	8000d34 <_ZN3Lcd5DelayEm>
	LCD_RST_SET;
 80005d4:	4add      	ldr	r2, [pc, #884]	; (800094c <_ZN3Lcd4InitEv+0x3a0>)
 80005d6:	4bdd      	ldr	r3, [pc, #884]	; (800094c <_ZN3Lcd4InitEv+0x3a0>)
 80005d8:	8b1b      	ldrh	r3, [r3, #24]
 80005da:	b29b      	uxth	r3, r3
 80005dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80005e0:	b29b      	uxth	r3, r3
 80005e2:	8313      	strh	r3, [r2, #24]
	Delay(20000);
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	f644 6120 	movw	r1, #20000	; 0x4e20
 80005ea:	6818      	ldr	r0, [r3, #0]
 80005ec:	f000 fba2 	bl	8000d34 <_ZN3Lcd5DelayEm>

	// Software reset
	Command(ILI9341_RESET);
 80005f0:	1d3b      	adds	r3, r7, #4
 80005f2:	2101      	movs	r1, #1
 80005f4:	6818      	ldr	r0, [r3, #0]
 80005f6:	f000 fbb5 	bl	8000d64 <_ZN3Lcd7CommandEh>
	Delay(50000);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8000600:	6818      	ldr	r0, [r3, #0]
 8000602:	f000 fb97 	bl	8000d34 <_ZN3Lcd5DelayEm>

	CommandData(CDARGS {ILI9341_POWERA, 0x39, 0x2C, 0x00, 0x34, 0x02});
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4ad1      	ldr	r2, [pc, #836]	; (8000950 <_ZN3Lcd4InitEv+0x3a4>)
 800060c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000610:	e883 0003 	stmia.w	r3, {r0, r1}
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4618      	mov	r0, r3
 800061a:	f000 fc35 	bl	8000e88 <_ZNSaIhEC1Ev>
 800061e:	f107 031c 	add.w	r3, r7, #28
 8000622:	f107 0214 	add.w	r2, r7, #20
 8000626:	f107 0008 	add.w	r0, r7, #8
 800062a:	ca06      	ldmia	r2, {r1, r2}
 800062c:	f000 fc6d 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000630:	f107 0208 	add.w	r2, r7, #8
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	4611      	mov	r1, r2
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	f000 fb4b 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 800063e:	f107 0308 	add.w	r3, r7, #8
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fc82 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fc27 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_POWERB, 0x00, 0xC1, 0x30});
 8000652:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000656:	4abf      	ldr	r2, [pc, #764]	; (8000954 <_ZN3Lcd4InitEv+0x3a8>)
 8000658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800065c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fc0f 	bl	8000e88 <_ZNSaIhEC1Ev>
 800066a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800066e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8000672:	f107 0020 	add.w	r0, r7, #32
 8000676:	ca06      	ldmia	r2, {r1, r2}
 8000678:	f000 fc47 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 800067c:	f107 0220 	add.w	r2, r7, #32
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4611      	mov	r1, r2
 8000684:	6818      	ldr	r0, [r3, #0]
 8000686:	f000 fb25 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 800068a:	f107 0320 	add.w	r3, r7, #32
 800068e:	4618      	mov	r0, r3
 8000690:	f000 fc5c 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000694:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000698:	4618      	mov	r0, r3
 800069a:	f000 fc01 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_DTCA, 0x85, 0x00, 0x78});
 800069e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006a2:	4aad      	ldr	r2, [pc, #692]	; (8000958 <_ZN3Lcd4InitEv+0x3ac>)
 80006a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a8:	e883 0003 	stmia.w	r3, {r0, r1}
 80006ac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 fbe9 	bl	8000e88 <_ZNSaIhEC1Ev>
 80006b6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006ba:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80006be:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80006c2:	ca06      	ldmia	r2, {r1, r2}
 80006c4:	f000 fc21 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80006c8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4611      	mov	r1, r2
 80006d0:	6818      	ldr	r0, [r3, #0]
 80006d2:	f000 faff 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 80006d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006da:	4618      	mov	r0, r3
 80006dc:	f000 fc36 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 80006e0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80006e4:	4618      	mov	r0, r3
 80006e6:	f000 fbdb 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_DTCB, 0x00,	0x00});
 80006ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80006ee:	4a9b      	ldr	r2, [pc, #620]	; (800095c <_ZN3Lcd4InitEv+0x3b0>)
 80006f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006f4:	e883 0003 	stmia.w	r3, {r0, r1}
 80006f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006fc:	4618      	mov	r0, r3
 80006fe:	f000 fbc3 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000702:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000706:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 800070a:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800070e:	ca06      	ldmia	r2, {r1, r2}
 8000710:	f000 fbfb 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000714:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000718:	1d3b      	adds	r3, r7, #4
 800071a:	4611      	mov	r1, r2
 800071c:	6818      	ldr	r0, [r3, #0]
 800071e:	f000 fad9 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000722:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000726:	4618      	mov	r0, r3
 8000728:	f000 fc10 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 800072c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000730:	4618      	mov	r0, r3
 8000732:	f000 fbb5 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_POWER_SEQ, 0x64, 0x03, 0x12, 0x81});
 8000736:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800073a:	4a89      	ldr	r2, [pc, #548]	; (8000960 <_ZN3Lcd4InitEv+0x3b4>)
 800073c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000740:	e883 0003 	stmia.w	r3, {r0, r1}
 8000744:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000748:	4618      	mov	r0, r3
 800074a:	f000 fb9d 	bl	8000e88 <_ZNSaIhEC1Ev>
 800074e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000752:	f107 0274 	add.w	r2, r7, #116	; 0x74
 8000756:	f107 0068 	add.w	r0, r7, #104	; 0x68
 800075a:	ca06      	ldmia	r2, {r1, r2}
 800075c:	f000 fbd5 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000760:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4611      	mov	r1, r2
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	f000 fab3 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 800076e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000772:	4618      	mov	r0, r3
 8000774:	f000 fbea 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000778:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800077c:	4618      	mov	r0, r3
 800077e:	f000 fb8f 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_PRC, 0x20});
 8000782:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000786:	4a77      	ldr	r2, [pc, #476]	; (8000964 <_ZN3Lcd4InitEv+0x3b8>)
 8000788:	e892 0003 	ldmia.w	r2, {r0, r1}
 800078c:	e883 0003 	stmia.w	r3, {r0, r1}
 8000790:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000794:	4618      	mov	r0, r3
 8000796:	f000 fb77 	bl	8000e88 <_ZNSaIhEC1Ev>
 800079a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800079e:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80007a2:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80007a6:	ca06      	ldmia	r2, {r1, r2}
 80007a8:	f000 fbaf 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80007ac:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80007b0:	1d3b      	adds	r3, r7, #4
 80007b2:	4611      	mov	r1, r2
 80007b4:	6818      	ldr	r0, [r3, #0]
 80007b6:	f000 fa8d 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 80007ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fbc4 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 80007c4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80007c8:	4618      	mov	r0, r3
 80007ca:	f000 fb69 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_POWER1,	0x23});
 80007ce:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007d2:	4a65      	ldr	r2, [pc, #404]	; (8000968 <_ZN3Lcd4InitEv+0x3bc>)
 80007d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80007d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80007dc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007e0:	4618      	mov	r0, r3
 80007e2:	f000 fb51 	bl	8000e88 <_ZNSaIhEC1Ev>
 80007e6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80007ea:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 80007ee:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80007f2:	ca06      	ldmia	r2, {r1, r2}
 80007f4:	f000 fb89 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80007f8:	f107 0298 	add.w	r2, r7, #152	; 0x98
 80007fc:	1d3b      	adds	r3, r7, #4
 80007fe:	4611      	mov	r1, r2
 8000800:	6818      	ldr	r0, [r3, #0]
 8000802:	f000 fa67 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000806:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fb9e 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000810:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000814:	4618      	mov	r0, r3
 8000816:	f000 fb43 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_POWER2,	0x10});
 800081a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800081e:	4a53      	ldr	r2, [pc, #332]	; (800096c <_ZN3Lcd4InitEv+0x3c0>)
 8000820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000824:	e883 0003 	stmia.w	r3, {r0, r1}
 8000828:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800082c:	4618      	mov	r0, r3
 800082e:	f000 fb2b 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000832:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000836:	f107 02bc 	add.w	r2, r7, #188	; 0xbc
 800083a:	f107 00b0 	add.w	r0, r7, #176	; 0xb0
 800083e:	ca06      	ldmia	r2, {r1, r2}
 8000840:	f000 fb63 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000844:	f107 02b0 	add.w	r2, r7, #176	; 0xb0
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	4611      	mov	r1, r2
 800084c:	6818      	ldr	r0, [r3, #0]
 800084e:	f000 fa41 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000852:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8000856:	4618      	mov	r0, r3
 8000858:	f000 fb78 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 800085c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fb1d 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_VCOM1, 0x3E, 0x28});
 8000866:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800086a:	4a41      	ldr	r2, [pc, #260]	; (8000970 <_ZN3Lcd4InitEv+0x3c4>)
 800086c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000870:	e883 0003 	stmia.w	r3, {r0, r1}
 8000874:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fb05 	bl	8000e88 <_ZNSaIhEC1Ev>
 800087e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000882:	f107 02d4 	add.w	r2, r7, #212	; 0xd4
 8000886:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 800088a:	ca06      	ldmia	r2, {r1, r2}
 800088c:	f000 fb3d 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000890:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 8000894:	1d3b      	adds	r3, r7, #4
 8000896:	4611      	mov	r1, r2
 8000898:	6818      	ldr	r0, [r3, #0]
 800089a:	f000 fa1b 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 800089e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fb52 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 80008a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80008ac:	4618      	mov	r0, r3
 80008ae:	f000 faf7 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_VCOM2, 0x86});
 80008b2:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80008b6:	4a2f      	ldr	r2, [pc, #188]	; (8000974 <_ZN3Lcd4InitEv+0x3c8>)
 80008b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80008bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80008c0:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80008c4:	4618      	mov	r0, r3
 80008c6:	f000 fadf 	bl	8000e88 <_ZNSaIhEC1Ev>
 80008ca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80008ce:	f107 02ec 	add.w	r2, r7, #236	; 0xec
 80008d2:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80008d6:	ca06      	ldmia	r2, {r1, r2}
 80008d8:	f000 fb17 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80008dc:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 80008e0:	1d3b      	adds	r3, r7, #4
 80008e2:	4611      	mov	r1, r2
 80008e4:	6818      	ldr	r0, [r3, #0]
 80008e6:	f000 f9f5 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 80008ea:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80008ee:	4618      	mov	r0, r3
 80008f0:	f000 fb2c 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 80008f4:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80008f8:	4618      	mov	r0, r3
 80008fa:	f000 fad1 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_MAC, 0x48});
 80008fe:	4a1e      	ldr	r2, [pc, #120]	; (8000978 <_ZN3Lcd4InitEv+0x3cc>)
 8000900:	f507 7382 	add.w	r3, r7, #260	; 0x104
 8000904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000908:	e883 0003 	stmia.w	r3, {r0, r1}
 800090c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000910:	4618      	mov	r0, r3
 8000912:	f000 fab9 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000916:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800091a:	f107 00f8 	add.w	r0, r7, #248	; 0xf8
 800091e:	f507 7282 	add.w	r2, r7, #260	; 0x104
 8000922:	ca06      	ldmia	r2, {r1, r2}
 8000924:	f000 faf1 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000928:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4611      	mov	r1, r2
 8000930:	6818      	ldr	r0, [r3, #0]
 8000932:	f000 f9cf 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000936:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800093a:	4618      	mov	r0, r3
 800093c:	f000 fb06 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000940:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000944:	4618      	mov	r0, r3
 8000946:	f000 faab 	bl	8000ea0 <_ZNSaIhED1Ev>
 800094a:	e017      	b.n	800097c <_ZN3Lcd4InitEv+0x3d0>
 800094c:	40020c00 	.word	0x40020c00
 8000950:	08002d58 	.word	0x08002d58
 8000954:	08002d60 	.word	0x08002d60
 8000958:	08002d68 	.word	0x08002d68
 800095c:	08002d70 	.word	0x08002d70
 8000960:	08002d78 	.word	0x08002d78
 8000964:	08002d80 	.word	0x08002d80
 8000968:	08002d88 	.word	0x08002d88
 800096c:	08002d90 	.word	0x08002d90
 8000970:	08002d98 	.word	0x08002d98
 8000974:	08002da0 	.word	0x08002da0
 8000978:	08002da8 	.word	0x08002da8
	CommandData(CDARGS {ILI9341_PIXEL_FORMAT, 0x55});
 800097c:	4aca      	ldr	r2, [pc, #808]	; (8000ca8 <_ZN3Lcd4InitEv+0x6fc>)
 800097e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8000982:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000986:	e883 0003 	stmia.w	r3, {r0, r1}
 800098a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fa7a 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000994:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8000998:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800099c:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 80009a0:	ca06      	ldmia	r2, {r1, r2}
 80009a2:	f000 fab2 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80009a6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	4611      	mov	r1, r2
 80009ae:	6818      	ldr	r0, [r3, #0]
 80009b0:	f000 f990 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 80009b4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80009b8:	4618      	mov	r0, r3
 80009ba:	f000 fac7 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 80009be:	f507 7392 	add.w	r3, r7, #292	; 0x124
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 fa6c 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_PIXEL_FORMAT, 0x55});
 80009c8:	4ab8      	ldr	r2, [pc, #736]	; (8000cac <_ZN3Lcd4InitEv+0x700>)
 80009ca:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80009ce:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009d2:	e883 0003 	stmia.w	r3, {r0, r1}
 80009d6:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80009da:	4618      	mov	r0, r3
 80009dc:	f000 fa54 	bl	8000e88 <_ZNSaIhEC1Ev>
 80009e0:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 80009e4:	f507 7094 	add.w	r0, r7, #296	; 0x128
 80009e8:	f507 729a 	add.w	r2, r7, #308	; 0x134
 80009ec:	ca06      	ldmia	r2, {r1, r2}
 80009ee:	f000 fa8c 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 80009f2:	f507 7294 	add.w	r2, r7, #296	; 0x128
 80009f6:	1d3b      	adds	r3, r7, #4
 80009f8:	4611      	mov	r1, r2
 80009fa:	6818      	ldr	r0, [r3, #0]
 80009fc:	f000 f96a 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000a00:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 faa1 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000a0a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f000 fa46 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_FRC, 0x00, 0x18});
 8000a14:	4aa6      	ldr	r2, [pc, #664]	; (8000cb0 <_ZN3Lcd4InitEv+0x704>)
 8000a16:	f507 73a6 	add.w	r3, r7, #332	; 0x14c
 8000a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a22:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000a26:	4618      	mov	r0, r3
 8000a28:	f000 fa2e 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000a2c:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000a30:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8000a34:	f507 72a6 	add.w	r2, r7, #332	; 0x14c
 8000a38:	ca06      	ldmia	r2, {r1, r2}
 8000a3a:	f000 fa66 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000a3e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8000a42:	1d3b      	adds	r3, r7, #4
 8000a44:	4611      	mov	r1, r2
 8000a46:	6818      	ldr	r0, [r3, #0]
 8000a48:	f000 f944 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000a4c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 fa7b 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000a56:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fa20 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_DFC, 0x08, 0x82, 0x27});
 8000a60:	4a94      	ldr	r2, [pc, #592]	; (8000cb4 <_ZN3Lcd4InitEv+0x708>)
 8000a62:	f507 73b2 	add.w	r3, r7, #356	; 0x164
 8000a66:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a6a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000a6e:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000a72:	4618      	mov	r0, r3
 8000a74:	f000 fa08 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000a78:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000a7c:	f507 70ac 	add.w	r0, r7, #344	; 0x158
 8000a80:	f507 72b2 	add.w	r2, r7, #356	; 0x164
 8000a84:	ca06      	ldmia	r2, {r1, r2}
 8000a86:	f000 fa40 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000a8a:	f507 72ac 	add.w	r2, r7, #344	; 0x158
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4611      	mov	r1, r2
 8000a92:	6818      	ldr	r0, [r3, #0]
 8000a94:	f000 f91e 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000a98:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f000 fa55 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000aa2:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f9fa 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_3GAMMA_EN, 0x00});
 8000aac:	4a82      	ldr	r2, [pc, #520]	; (8000cb8 <_ZN3Lcd4InitEv+0x70c>)
 8000aae:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000ab2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ab6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000aba:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f000 f9e2 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000ac4:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000ac8:	f507 70b8 	add.w	r0, r7, #368	; 0x170
 8000acc:	f507 72be 	add.w	r2, r7, #380	; 0x17c
 8000ad0:	ca06      	ldmia	r2, {r1, r2}
 8000ad2:	f000 fa1a 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000ad6:	f507 72b8 	add.w	r2, r7, #368	; 0x170
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	4611      	mov	r1, r2
 8000ade:	6818      	ldr	r0, [r3, #0]
 8000ae0:	f000 f8f8 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000ae4:	f507 73b8 	add.w	r3, r7, #368	; 0x170
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fa2f 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000aee:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8000af2:	4618      	mov	r0, r3
 8000af4:	f000 f9d4 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_COLUMN_ADDR, 0x00, 0x00, 0x00, 0xEF});
 8000af8:	4a70      	ldr	r2, [pc, #448]	; (8000cbc <_ZN3Lcd4InitEv+0x710>)
 8000afa:	f507 73ca 	add.w	r3, r7, #404	; 0x194
 8000afe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b02:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b06:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f000 f9bc 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000b10:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000b14:	f507 70c4 	add.w	r0, r7, #392	; 0x188
 8000b18:	f507 72ca 	add.w	r2, r7, #404	; 0x194
 8000b1c:	ca06      	ldmia	r2, {r1, r2}
 8000b1e:	f000 f9f4 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000b22:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000b26:	1d3b      	adds	r3, r7, #4
 8000b28:	4611      	mov	r1, r2
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	f000 f8d2 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000b30:	f507 73c4 	add.w	r3, r7, #392	; 0x188
 8000b34:	4618      	mov	r0, r3
 8000b36:	f000 fa09 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000b3a:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 f9ae 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_PAGE_ADDR, 0x00, 0x00, 0x01, 0x3F});
 8000b44:	4a5e      	ldr	r2, [pc, #376]	; (8000cc0 <_ZN3Lcd4InitEv+0x714>)
 8000b46:	f507 73d6 	add.w	r3, r7, #428	; 0x1ac
 8000b4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b4e:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b52:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000b56:	4618      	mov	r0, r3
 8000b58:	f000 f996 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000b5c:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000b60:	f507 70d0 	add.w	r0, r7, #416	; 0x1a0
 8000b64:	f507 72d6 	add.w	r2, r7, #428	; 0x1ac
 8000b68:	ca06      	ldmia	r2, {r1, r2}
 8000b6a:	f000 f9ce 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000b6e:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	4611      	mov	r1, r2
 8000b76:	6818      	ldr	r0, [r3, #0]
 8000b78:	f000 f8ac 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000b7c:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f000 f9e3 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000b86:	f507 73da 	add.w	r3, r7, #436	; 0x1b4
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 f988 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_GAMMA, 0x01});
 8000b90:	4a4c      	ldr	r2, [pc, #304]	; (8000cc4 <_ZN3Lcd4InitEv+0x718>)
 8000b92:	f507 73e2 	add.w	r3, r7, #452	; 0x1c4
 8000b96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8000b9e:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f000 f970 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000ba8:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8000bac:	f507 70dc 	add.w	r0, r7, #440	; 0x1b8
 8000bb0:	f507 72e2 	add.w	r2, r7, #452	; 0x1c4
 8000bb4:	ca06      	ldmia	r2, {r1, r2}
 8000bb6:	f000 f9a8 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000bba:	f507 72dc 	add.w	r2, r7, #440	; 0x1b8
 8000bbe:	1d3b      	adds	r3, r7, #4
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	6818      	ldr	r0, [r3, #0]
 8000bc4:	f000 f886 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000bc8:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f000 f9bd 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000bd2:	f507 73e6 	add.w	r3, r7, #460	; 0x1cc
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f000 f962 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_PGAMMA,	0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1, 0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00});
 8000bdc:	4a3a      	ldr	r2, [pc, #232]	; (8000cc8 <_ZN3Lcd4InitEv+0x71c>)
 8000bde:	f507 73ee 	add.w	r3, r7, #476	; 0x1dc
 8000be2:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000be6:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bea:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f000 f94a 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000bf4:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8000bf8:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8000bfc:	f507 72ee 	add.w	r2, r7, #476	; 0x1dc
 8000c00:	ca06      	ldmia	r2, {r1, r2}
 8000c02:	f000 f982 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000c06:	f507 72e8 	add.w	r2, r7, #464	; 0x1d0
 8000c0a:	1d3b      	adds	r3, r7, #4
 8000c0c:	4611      	mov	r1, r2
 8000c0e:	6818      	ldr	r0, [r3, #0]
 8000c10:	f000 f860 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000c14:	f507 73e8 	add.w	r3, r7, #464	; 0x1d0
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f000 f997 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000c1e:	f507 73f2 	add.w	r3, r7, #484	; 0x1e4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f93c 	bl	8000ea0 <_ZNSaIhED1Ev>
	CommandData(CDARGS {ILI9341_NGAMMA, 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1, 0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F});
 8000c28:	4a28      	ldr	r2, [pc, #160]	; (8000ccc <_ZN3Lcd4InitEv+0x720>)
 8000c2a:	f507 73fa 	add.w	r3, r7, #500	; 0x1f4
 8000c2e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c32:	e883 0003 	stmia.w	r3, {r0, r1}
 8000c36:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f000 f924 	bl	8000e88 <_ZNSaIhEC1Ev>
 8000c40:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000c44:	f507 70f4 	add.w	r0, r7, #488	; 0x1e8
 8000c48:	f507 72fa 	add.w	r2, r7, #500	; 0x1f4
 8000c4c:	ca06      	ldmia	r2, {r1, r2}
 8000c4e:	f000 f95c 	bl	8000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>
 8000c52:	f507 72f4 	add.w	r2, r7, #488	; 0x1e8
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4611      	mov	r1, r2
 8000c5a:	6818      	ldr	r0, [r3, #0]
 8000c5c:	f000 f83a 	bl	8000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>
 8000c60:	f507 73f4 	add.w	r3, r7, #488	; 0x1e8
 8000c64:	4618      	mov	r0, r3
 8000c66:	f000 f971 	bl	8000f4c <_ZNSt6vectorIhSaIhEED1Ev>
 8000c6a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f916 	bl	8000ea0 <_ZNSaIhED1Ev>
	Command(ILI9341_SLEEP_OUT);
 8000c74:	1d3b      	adds	r3, r7, #4
 8000c76:	2111      	movs	r1, #17
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f000 f873 	bl	8000d64 <_ZN3Lcd7CommandEh>

	Delay(1000000);
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	4913      	ldr	r1, [pc, #76]	; (8000cd0 <_ZN3Lcd4InitEv+0x724>)
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	f000 f856 	bl	8000d34 <_ZN3Lcd5DelayEm>

	Command(ILI9341_DISPLAY_ON);
 8000c88:	1d3b      	adds	r3, r7, #4
 8000c8a:	2129      	movs	r1, #41	; 0x29
 8000c8c:	6818      	ldr	r0, [r3, #0]
 8000c8e:	f000 f869 	bl	8000d64 <_ZN3Lcd7CommandEh>
	Command(ILI9341_GRAM);
 8000c92:	1d3b      	adds	r3, r7, #4
 8000c94:	212c      	movs	r1, #44	; 0x2c
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	f000 f864 	bl	8000d64 <_ZN3Lcd7CommandEh>
};
 8000c9c:	bf00      	nop
 8000c9e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	08002db0 	.word	0x08002db0
 8000cac:	08002db8 	.word	0x08002db8
 8000cb0:	08002dc0 	.word	0x08002dc0
 8000cb4:	08002dc8 	.word	0x08002dc8
 8000cb8:	08002dd0 	.word	0x08002dd0
 8000cbc:	08002dd8 	.word	0x08002dd8
 8000cc0:	08002de0 	.word	0x08002de0
 8000cc4:	08002de8 	.word	0x08002de8
 8000cc8:	08002df0 	.word	0x08002df0
 8000ccc:	08002df8 	.word	0x08002df8
 8000cd0:	000f4240 	.word	0x000f4240

08000cd4 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE>:

void Lcd::CommandData(CDARGS cmds) {
 8000cd4:	b590      	push	{r4, r7, lr}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
	Command(cmds[0]);
 8000cde:	2100      	movs	r1, #0
 8000ce0:	6838      	ldr	r0, [r7, #0]
 8000ce2:	f000 f94e 	bl	8000f82 <_ZNSt6vectorIhSaIhEEixEj>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4619      	mov	r1, r3
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 f839 	bl	8000d64 <_ZN3Lcd7CommandEh>
	for (uint8_t i = 1; i < cmds.size(); ++i)
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	73fb      	strb	r3, [r7, #15]
 8000cf6:	7bfc      	ldrb	r4, [r7, #15]
 8000cf8:	6838      	ldr	r0, [r7, #0]
 8000cfa:	f000 f951 	bl	8000fa0 <_ZNKSt6vectorIhSaIhEE4sizeEv>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	429c      	cmp	r4, r3
 8000d02:	bf34      	ite	cc
 8000d04:	2301      	movcc	r3, #1
 8000d06:	2300      	movcs	r3, #0
 8000d08:	b2db      	uxtb	r3, r3
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d00e      	beq.n	8000d2c <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE+0x58>
		Data(cmds[i]);
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	4619      	mov	r1, r3
 8000d12:	6838      	ldr	r0, [r7, #0]
 8000d14:	f000 f935 	bl	8000f82 <_ZNSt6vectorIhSaIhEEixEj>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f84c 	bl	8000dbc <_ZN3Lcd4DataEh>
	for (uint8_t i = 1; i < cmds.size(); ++i)
 8000d24:	7bfb      	ldrb	r3, [r7, #15]
 8000d26:	3301      	adds	r3, #1
 8000d28:	73fb      	strb	r3, [r7, #15]
 8000d2a:	e7e4      	b.n	8000cf6 <_ZN3Lcd11CommandDataESt6vectorIhSaIhEE+0x22>
}
 8000d2c:	bf00      	nop
 8000d2e:	3714      	adds	r7, #20
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd90      	pop	{r4, r7, pc}

08000d34 <_ZN3Lcd5DelayEm>:

void Lcd::Delay(volatile uint32_t delay) {
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
	for (; delay != 0; delay--);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	bf14      	ite	ne
 8000d44:	2301      	movne	r3, #1
 8000d46:	2300      	moveq	r3, #0
 8000d48:	b2db      	uxtb	r3, r3
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d003      	beq.n	8000d56 <_ZN3Lcd5DelayEm+0x22>
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	e7f3      	b.n	8000d3e <_ZN3Lcd5DelayEm+0xa>
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
	...

08000d64 <_ZN3Lcd7CommandEh>:

void Lcd::Command(uint8_t data) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	460b      	mov	r3, r1
 8000d6e:	70fb      	strb	r3, [r7, #3]
	LCD_WRX_RESET;
 8000d70:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <_ZN3Lcd7CommandEh+0x50>)
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <_ZN3Lcd7CommandEh+0x50>)
 8000d74:	8b5b      	ldrh	r3, [r3, #26]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	8353      	strh	r3, [r2, #26]
	LCD_CS_RESET;
 8000d80:	4a0d      	ldr	r2, [pc, #52]	; (8000db8 <_ZN3Lcd7CommandEh+0x54>)
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <_ZN3Lcd7CommandEh+0x54>)
 8000d84:	8b5b      	ldrh	r3, [r3, #26]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	f043 0304 	orr.w	r3, r3, #4
 8000d8c:	b29b      	uxth	r3, r3
 8000d8e:	8353      	strh	r3, [r2, #26]
	SPISendByte(data);
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	4619      	mov	r1, r3
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	f000 f83d 	bl	8000e14 <_ZN3Lcd11SPISendByteEh>
	LCD_CS_SET;
 8000d9a:	4a07      	ldr	r2, [pc, #28]	; (8000db8 <_ZN3Lcd7CommandEh+0x54>)
 8000d9c:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <_ZN3Lcd7CommandEh+0x54>)
 8000d9e:	8b1b      	ldrh	r3, [r3, #24]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	f043 0304 	orr.w	r3, r3, #4
 8000da6:	b29b      	uxth	r3, r3
 8000da8:	8313      	strh	r3, [r2, #24]
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40020c00 	.word	0x40020c00
 8000db8:	40020800 	.word	0x40020800

08000dbc <_ZN3Lcd4DataEh>:

void Lcd::Data(uint8_t data) {
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
	LCD_WRX_SET;
 8000dc8:	4a10      	ldr	r2, [pc, #64]	; (8000e0c <_ZN3Lcd4DataEh+0x50>)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_ZN3Lcd4DataEh+0x50>)
 8000dcc:	8b1b      	ldrh	r3, [r3, #24]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd4:	b29b      	uxth	r3, r3
 8000dd6:	8313      	strh	r3, [r2, #24]
	LCD_CS_RESET;
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <_ZN3Lcd4DataEh+0x54>)
 8000dda:	4b0d      	ldr	r3, [pc, #52]	; (8000e10 <_ZN3Lcd4DataEh+0x54>)
 8000ddc:	8b5b      	ldrh	r3, [r3, #26]
 8000dde:	b29b      	uxth	r3, r3
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	8353      	strh	r3, [r2, #26]
	SPISendByte(data);
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	4619      	mov	r1, r3
 8000dec:	6878      	ldr	r0, [r7, #4]
 8000dee:	f000 f811 	bl	8000e14 <_ZN3Lcd11SPISendByteEh>
	LCD_CS_SET;
 8000df2:	4a07      	ldr	r2, [pc, #28]	; (8000e10 <_ZN3Lcd4DataEh+0x54>)
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <_ZN3Lcd4DataEh+0x54>)
 8000df6:	8b1b      	ldrh	r3, [r3, #24]
 8000df8:	b29b      	uxth	r3, r3
 8000dfa:	f043 0304 	orr.w	r3, r3, #4
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	8313      	strh	r3, [r2, #24]
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020c00 	.word	0x40020c00
 8000e10:	40020800 	.word	0x40020800

08000e14 <_ZN3Lcd11SPISendByteEh>:

inline void Lcd::SPISendByte(uint8_t data) {
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	460b      	mov	r3, r1
 8000e1e:	70fb      	strb	r3, [r7, #3]
	while ((SPI5->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || (SPI5->SR & SPI_SR_BSY));	// Wait for previous transmissions to complete if DMA TX enabled for SPI
 8000e20:	4b18      	ldr	r3, [pc, #96]	; (8000e84 <_ZN3Lcd11SPISendByteEh+0x70>)
 8000e22:	891b      	ldrh	r3, [r3, #8]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	f003 0303 	and.w	r3, r3, #3
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <_ZN3Lcd11SPISendByteEh+0x28>
 8000e2e:	4b15      	ldr	r3, [pc, #84]	; (8000e84 <_ZN3Lcd11SPISendByteEh+0x70>)
 8000e30:	891b      	ldrh	r3, [r3, #8]
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <_ZN3Lcd11SPISendByteEh+0x2c>
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e000      	b.n	8000e42 <_ZN3Lcd11SPISendByteEh+0x2e>
 8000e40:	2300      	movs	r3, #0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d000      	beq.n	8000e48 <_ZN3Lcd11SPISendByteEh+0x34>
 8000e46:	e7eb      	b.n	8000e20 <_ZN3Lcd11SPISendByteEh+0xc>

	SPI5->DR = data;					// Fill output buffer with data
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <_ZN3Lcd11SPISendByteEh+0x70>)
 8000e4a:	78fa      	ldrb	r2, [r7, #3]
 8000e4c:	b292      	uxth	r2, r2
 8000e4e:	819a      	strh	r2, [r3, #12]

	while ((SPI5->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || (SPI5->SR & SPI_SR_BSY));	// Wait for transmission to complete
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <_ZN3Lcd11SPISendByteEh+0x70>)
 8000e52:	891b      	ldrh	r3, [r3, #8]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	f003 0303 	and.w	r3, r3, #3
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d006      	beq.n	8000e6c <_ZN3Lcd11SPISendByteEh+0x58>
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <_ZN3Lcd11SPISendByteEh+0x70>)
 8000e60:	891b      	ldrh	r3, [r3, #8]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <_ZN3Lcd11SPISendByteEh+0x5c>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <_ZN3Lcd11SPISendByteEh+0x5e>
 8000e70:	2300      	movs	r3, #0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d000      	beq.n	8000e78 <_ZN3Lcd11SPISendByteEh+0x64>
 8000e76:	e7eb      	b.n	8000e50 <_ZN3Lcd11SPISendByteEh+0x3c>
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr
 8000e84:	40015000 	.word	0x40015000

08000e88 <_ZNSaIhEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
 8000e90:	6878      	ldr	r0, [r7, #4]
 8000e92:	f000 f895 	bl	8000fc0 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <_ZNSaIhED1Ev>:
      : __allocator_base<_Tp>(__a) { }

      template<typename _Tp1>
        allocator(const allocator<_Tp1>&) throw() { }

      ~allocator() throw() { }
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f000 f894 	bl	8000fd6 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_ZNKSt16initializer_listIhE5beginEv>:
      constexpr size_type
      size() const noexcept { return _M_len; }

      // First element.
      constexpr const_iterator
      begin() const noexcept { return _M_array; }
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_ZNKSt16initializer_listIhE4sizeEv>:
      size() const noexcept { return _M_len; }
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_ZNKSt16initializer_listIhE3endEv>:

      // One past the last element.
      constexpr const_iterator
      end() const noexcept { return begin() + size(); }
 8000ee8:	b590      	push	{r4, r7, lr}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ffe1 	bl	8000eb8 <_ZNKSt16initializer_listIhE5beginEv>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f7ff ffe9 	bl	8000ed0 <_ZNKSt16initializer_listIhE4sizeEv>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4423      	add	r3, r4
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}

08000f0a <_ZNSt6vectorIhSaIhEEC1ESt16initializer_listIhERKS0_>:
       *  initializer_list @a __l.
       *
       *  This will call the element type's copy constructor N times
       *  (where N is @a __l.size()) and do no memory reallocation.
       */
      vector(initializer_list<value_type> __l,
 8000f0a:	b5b0      	push	{r4, r5, r7, lr}
 8000f0c:	b086      	sub	sp, #24
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	60f8      	str	r0, [r7, #12]
 8000f12:	1d38      	adds	r0, r7, #4
 8000f14:	e880 0006 	stmia.w	r0, {r1, r2}
 8000f18:	603b      	str	r3, [r7, #0]
	     const allocator_type& __a = allocator_type())
      : _Base(__a)
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6839      	ldr	r1, [r7, #0]
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f000 f870 	bl	8001004 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>
      {
	_M_range_initialize(__l.begin(), __l.end(),
 8000f24:	1d3b      	adds	r3, r7, #4
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff ffc6 	bl	8000eb8 <_ZNKSt16initializer_listIhE5beginEv>
 8000f2c:	4604      	mov	r4, r0
 8000f2e:	1d3b      	adds	r3, r7, #4
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff ffd9 	bl	8000ee8 <_ZNKSt16initializer_listIhE3endEv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	462b      	mov	r3, r5
 8000f3a:	4621      	mov	r1, r4
 8000f3c:	68f8      	ldr	r0, [r7, #12]
 8000f3e:	f000 f889 	bl	8001054 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>
			    random_access_iterator_tag());
      }
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bdb0      	pop	{r4, r5, r7, pc}

08000f4c <_ZNSt6vectorIhSaIhEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 8000f4c:	b5b0      	push	{r4, r5, r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681c      	ldr	r4, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator()); }
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f000 f8a6 	bl	80010b0 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8000f64:	4603      	mov	r3, r0
      { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8000f66:	461a      	mov	r2, r3
 8000f68:	4629      	mov	r1, r5
 8000f6a:	4620      	mov	r0, r4
 8000f6c:	f000 f8ab 	bl	80010c6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>
		      _M_get_Tp_allocator()); }
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f855 	bl	8001022 <_ZNSt12_Vector_baseIhSaIhEED1Ev>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bdb0      	pop	{r4, r5, r7, pc}

08000f82 <_ZNSt6vectorIhSaIhEEixEj>:
       *  Note that data access with this operator is unchecked and
       *  out_of_range lookups are not defined. (For checked lookups
       *  see at().)
       */
      reference
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8000f82:	b480      	push	{r7}
 8000f84:	b083      	sub	sp, #12
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	6078      	str	r0, [r7, #4]
 8000f8a:	6039      	str	r1, [r7, #0]
      { return *(this->_M_impl._M_start + __n); }
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	4413      	add	r3, r2
 8000f94:	4618      	mov	r0, r3
 8000f96:	370c      	adds	r7, #12
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9e:	4770      	bx	lr

08000fa0 <_ZNKSt6vectorIhSaIhEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	461a      	mov	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <_ZN9__gnu_cxx13new_allocatorIhEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4618      	mov	r0, r3
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr

08000fd6 <_ZN9__gnu_cxx13new_allocatorIhED1Ev>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }

      template<typename _Tp1>
        new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>:
      struct _Vector_impl 
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff53 	bl	8000ea0 <_ZNSaIhED1Ev>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_ZNSt12_Vector_baseIhSaIhEEC1ERKS0_>:
      _Vector_base(const allocator_type& __a) _GLIBCXX_NOEXCEPT
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
      : _M_impl(__a) { }
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6839      	ldr	r1, [r7, #0]
 8001012:	4618      	mov	r0, r3
 8001014:	f000 f865 	bl	80010e2 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <_ZNSt12_Vector_baseIhSaIhEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8001022:	b580      	push	{r7, lr}
 8001024:	b082      	sub	sp, #8
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6819      	ldr	r1, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
		      - this->_M_impl._M_start); }
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1ad3      	subs	r3, r2, r3
      { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 800103a:	461a      	mov	r2, r3
 800103c:	6878      	ldr	r0, [r7, #4]
 800103e:	f000 f867 	bl	8001110 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>
		      - this->_M_impl._M_start); }
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff ffd1 	bl	8000fec <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implD1Ev>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}

08001054 <_ZNSt6vectorIhSaIhEE19_M_range_initializeIPKhEEvT_S5_St20forward_iterator_tag>:
	}

      // Called by the second initialize_dispatch above
      template<typename _ForwardIterator>
        void
        _M_range_initialize(_ForwardIterator __first,
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b087      	sub	sp, #28
 8001058:	af00      	add	r7, sp, #0
 800105a:	60f8      	str	r0, [r7, #12]
 800105c:	60b9      	str	r1, [r7, #8]
 800105e:	607a      	str	r2, [r7, #4]
 8001060:	703b      	strb	r3, [r7, #0]
			    _ForwardIterator __last, std::forward_iterator_tag)
        {
	  const size_type __n = std::distance(__first, __last);
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	68b8      	ldr	r0, [r7, #8]
 8001066:	f000 f866 	bl	8001136 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 800106a:	4603      	mov	r3, r0
 800106c:	617b      	str	r3, [r7, #20]
	  this->_M_impl._M_start = this->_M_allocate(__n);
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	6979      	ldr	r1, [r7, #20]
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f873 	bl	800115e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	681a      	ldr	r2, [r3, #0]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	441a      	add	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	609a      	str	r2, [r3, #8]
	  this->_M_impl._M_finish =
	    std::__uninitialized_copy_a(__first, __last,
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	681c      	ldr	r4, [r3, #0]
					this->_M_impl._M_start,
					_M_get_Tp_allocator());
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4618      	mov	r0, r3
 8001092:	f000 f80d 	bl	80010b0 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>
 8001096:	4603      	mov	r3, r0
	    std::__uninitialized_copy_a(__first, __last,
 8001098:	4622      	mov	r2, r4
 800109a:	6879      	ldr	r1, [r7, #4]
 800109c:	68b8      	ldr	r0, [r7, #8]
 800109e:	f000 f872 	bl	8001186 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>
 80010a2:	4602      	mov	r2, r0
	  this->_M_impl._M_finish =
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	605a      	str	r2, [r3, #4]
	}
 80010a8:	bf00      	nop
 80010aa:	371c      	adds	r7, #28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd90      	pop	{r4, r7, pc}

080010b0 <_ZNSt12_Vector_baseIhSaIhEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	4618      	mov	r0, r3
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <_ZSt8_DestroyIPhhEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80010c6:	b580      	push	{r7, lr}
 80010c8:	b084      	sub	sp, #16
 80010ca:	af00      	add	r7, sp, #0
 80010cc:	60f8      	str	r0, [r7, #12]
 80010ce:	60b9      	str	r1, [r7, #8]
 80010d0:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80010d2:	68b9      	ldr	r1, [r7, #8]
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	f000 f867 	bl	80011a8 <_ZSt8_DestroyIPhEvT_S1_>
    }
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <_ZNSt12_Vector_baseIhSaIhEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a), _M_start(), _M_finish(), _M_end_of_storage()
 80010ec:	6839      	ldr	r1, [r7, #0]
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f000 f867 	bl	80011c2 <_ZNSaIhEC1ERKS_>
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2200      	movs	r2, #0
 8001104:	609a      	str	r2, [r3, #8]
	{ }
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj>:
      _M_deallocate(pointer __p, size_t __n)
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
	if (__p)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <_ZNSt12_Vector_baseIhSaIhEE13_M_deallocateEPhj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	687a      	ldr	r2, [r7, #4]
 8001126:	68b9      	ldr	r1, [r7, #8]
 8001128:	4618      	mov	r0, r3
 800112a:	f000 f858 	bl	80011de <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>
      }
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <_ZSt8distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
   *  For random access iterators, this uses their @c + and @c - operations
   *  and are constant time.  For other %iterator classes they are linear time.
  */
  template<typename _InputIterator>
    inline typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001136:	b5b0      	push	{r4, r5, r7, lr}
 8001138:	b084      	sub	sp, #16
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
 800113e:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001140:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4618      	mov	r0, r3
 8001146:	f000 f859 	bl	80011fc <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
 800114a:	462a      	mov	r2, r5
 800114c:	6839      	ldr	r1, [r7, #0]
 800114e:	4620      	mov	r0, r4
 8001150:	f000 f85e 	bl	8001210 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001154:	4603      	mov	r3, r0
    }
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bdb0      	pop	{r4, r5, r7, pc}

0800115e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	6078      	str	r0, [r7, #4]
 8001166:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d006      	beq.n	800117c <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x1e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	6839      	ldr	r1, [r7, #0]
 8001172:	4618      	mov	r0, r3
 8001174:	f000 f85b 	bl	800122e <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>
 8001178:	4603      	mov	r3, r0
 800117a:	e000      	b.n	800117e <_ZNSt12_Vector_baseIhSaIhEE11_M_allocateEj+0x20>
 800117c:	2300      	movs	r3, #0
      }
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <_ZSt22__uninitialized_copy_aIPKhPhhET0_T_S4_S3_RSaIT1_E>:
	}
    }

  template<typename _InputIterator, typename _ForwardIterator, typename _Tp>
    inline _ForwardIterator
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
 8001192:	603b      	str	r3, [r7, #0]
			   _ForwardIterator __result, allocator<_Tp>&)
    { return std::uninitialized_copy(__first, __last, __result); }
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	68b9      	ldr	r1, [r7, #8]
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f000 f857 	bl	800124c <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>
 800119e:	4603      	mov	r3, r0
 80011a0:	4618      	mov	r0, r3
 80011a2:	3710      	adds	r7, #16
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <_ZSt8_DestroyIPhEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	6039      	str	r1, [r7, #0]
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 80011b2:	6839      	ldr	r1, [r7, #0]
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f85b 	bl	8001270 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>
    }
 80011ba:	bf00      	nop
 80011bc:	3708      	adds	r7, #8
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <_ZNSaIhEC1ERKS_>:
      allocator(const allocator& __a) throw()
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	6078      	str	r0, [r7, #4]
 80011ca:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80011cc:	6839      	ldr	r1, [r7, #0]
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f000 f859 	bl	8001286 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4618      	mov	r0, r3
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <_ZNSt16allocator_traitsISaIhEE10deallocateERS0_Phj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	60f8      	str	r0, [r7, #12]
 80011e6:	60b9      	str	r1, [r7, #8]
 80011e8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80011ea:	687a      	ldr	r2, [r7, #4]
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	68f8      	ldr	r0, [r7, #12]
 80011f0:	f000 f855 	bl	800129e <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>
 80011f4:	bf00      	nop
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <_ZSt19__iterator_categoryIPKhENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  This function is not a part of the C++ standard but is syntactic
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_ZSt10__distanceIPKhENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 800121c:	68ba      	ldr	r2, [r7, #8]
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	1ad3      	subs	r3, r2, r3
    }
 8001222:	4618      	mov	r0, r3
 8001224:	3714      	adds	r7, #20
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr

0800122e <_ZNSt16allocator_traitsISaIhEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8001238:	2200      	movs	r2, #0
 800123a:	6839      	ldr	r1, [r7, #0]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 f83b 	bl	80012b8 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>
 8001242:	4603      	mov	r3, r0
 8001244:	4618      	mov	r0, r3
 8001246:	3708      	adds	r7, #8
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}

0800124c <_ZSt18uninitialized_copyIPKhPhET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8001258:	2301      	movs	r3, #1
 800125a:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	68b9      	ldr	r1, [r7, #8]
 8001260:	68f8      	ldr	r0, [r7, #12]
 8001262:	f000 f845 	bl	80012f0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>
 8001266:	4603      	mov	r3, r0
    }
 8001268:	4618      	mov	r0, r3
 800126a:	3718      	adds	r7, #24
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <_ZNSt12_Destroy_auxILb1EE9__destroyIPhEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	6039      	str	r1, [r7, #0]
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <_ZN9__gnu_cxx13new_allocatorIhEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8001286:	b480      	push	{r7}
 8001288:	b083      	sub	sp, #12
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	6039      	str	r1, [r7, #0]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4618      	mov	r0, r3
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <_ZN9__gnu_cxx13new_allocatorIhE10deallocateEPhj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 800129e:	b580      	push	{r7, lr}
 80012a0:	b084      	sub	sp, #16
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	60f8      	str	r0, [r7, #12]
 80012a6:	60b9      	str	r1, [r7, #8]
 80012a8:	607a      	str	r2, [r7, #4]
      { ::operator delete(__p); }
 80012aa:	68b8      	ldr	r0, [r7, #8]
 80012ac:	f001 fa68 	bl	8002780 <_ZdlPv>
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv>:
      allocate(size_type __n, const void* = 0)
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	60f8      	str	r0, [r7, #12]
 80012c0:	60b9      	str	r1, [r7, #8]
 80012c2:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80012c4:	68f8      	ldr	r0, [r7, #12]
 80012c6:	f000 f823 	bl	8001310 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>
 80012ca:	4602      	mov	r2, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	429a      	cmp	r2, r3
 80012d0:	bf34      	ite	cc
 80012d2:	2301      	movcc	r3, #1
 80012d4:	2300      	movcs	r3, #0
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <_ZN9__gnu_cxx13new_allocatorIhE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80012dc:	f001 fa6c 	bl	80027b8 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80012e0:	68b8      	ldr	r0, [r7, #8]
 80012e2:	f001 fa4f 	bl	8002784 <_Znwj>
 80012e6:	4603      	mov	r3, r0
      }
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIPKhPhEET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	60f8      	str	r0, [r7, #12]
 80012f8:	60b9      	str	r1, [r7, #8]
 80012fa:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80012fc:	687a      	ldr	r2, [r7, #4]
 80012fe:	68b9      	ldr	r1, [r7, #8]
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f000 f811 	bl	8001328 <_ZSt4copyIPKhPhET0_T_S4_S3_>
 8001306:	4603      	mov	r3, r0
 8001308:	4618      	mov	r0, r3
 800130a:	3710      	adds	r7, #16
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <_ZNK9__gnu_cxx13new_allocatorIhE8max_sizeEv>:

      size_type
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
      { return size_t(-1) / sizeof(_Tp); }
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	4618      	mov	r0, r3
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr

08001328 <_ZSt4copyIPKhPhET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	60f8      	str	r0, [r7, #12]
 8001330:	60b9      	str	r1, [r7, #8]
 8001332:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_valid_range(__first, __last);

      return (std::__copy_move_a2<__is_move_iterator<_II>::__value>
	      (std::__miter_base(__first), std::__miter_base(__last),
 8001334:	68f8      	ldr	r0, [r7, #12]
 8001336:	f000 f80f 	bl	8001358 <_ZSt12__miter_baseIPKhET_S2_>
 800133a:	4604      	mov	r4, r0
 800133c:	68b8      	ldr	r0, [r7, #8]
 800133e:	f000 f80b 	bl	8001358 <_ZSt12__miter_baseIPKhET_S2_>
 8001342:	4603      	mov	r3, r0
	       __result));
 8001344:	687a      	ldr	r2, [r7, #4]
 8001346:	4619      	mov	r1, r3
 8001348:	4620      	mov	r0, r4
 800134a:	f000 f810 	bl	800136e <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>
 800134e:	4603      	mov	r3, r0
    }
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	bd90      	pop	{r4, r7, pc}

08001358 <_ZSt12__miter_baseIPKhET_S2_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	4618      	mov	r0, r3
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <_ZSt14__copy_move_a2ILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800136e:	b5b0      	push	{r4, r5, r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	60f8      	str	r0, [r7, #12]
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
      return _OI(std::__copy_move_a<_IsMove>(std::__niter_base(__first),
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f000 f813 	bl	80013a6 <_ZSt12__niter_baseIPKhET_S2_>
 8001380:	4604      	mov	r4, r0
 8001382:	68b8      	ldr	r0, [r7, #8]
 8001384:	f000 f80f 	bl	80013a6 <_ZSt12__niter_baseIPKhET_S2_>
 8001388:	4605      	mov	r5, r0
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f000 f816 	bl	80013bc <_ZSt12__niter_baseIPhET_S1_>
 8001390:	4603      	mov	r3, r0
					     std::__niter_base(__result)));
 8001392:	461a      	mov	r2, r3
 8001394:	4629      	mov	r1, r5
 8001396:	4620      	mov	r0, r4
 8001398:	f000 f81b 	bl	80013d2 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>
 800139c:	4603      	mov	r3, r0
    }
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bdb0      	pop	{r4, r5, r7, pc}

080013a6 <_ZSt12__niter_baseIPKhET_S2_>:
    __niter_base(_Iterator __it)
 80013a6:	b480      	push	{r7}
 80013a8:	b083      	sub	sp, #12
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
    { return __it; }
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	4618      	mov	r0, r3
 80013b2:	370c      	adds	r7, #12
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    { return __it; }
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_ZSt13__copy_move_aILb0EPKhPhET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b086      	sub	sp, #24
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
			     && __are_same<_ValueTypeI, _ValueTypeO>::__value);
 80013de:	2301      	movs	r3, #1
 80013e0:	75fb      	strb	r3, [r7, #23]
	                      _Category>::__copy_m(__first, __last, __result);
 80013e2:	687a      	ldr	r2, [r7, #4]
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	68f8      	ldr	r0, [r7, #12]
 80013e8:	f000 f805 	bl	80013f6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 80013ec:	4603      	mov	r3, r0
    }
 80013ee:	4618      	mov	r0, r3
 80013f0:	3718      	adds	r7, #24
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}

080013f6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
        __copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80013f6:	b580      	push	{r7, lr}
 80013f8:	b086      	sub	sp, #24
 80013fa:	af00      	add	r7, sp, #0
 80013fc:	60f8      	str	r0, [r7, #12]
 80013fe:	60b9      	str	r1, [r7, #8]
 8001400:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d005      	beq.n	800141c <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	461a      	mov	r2, r3
 8001414:	68f9      	ldr	r1, [r7, #12]
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f001 fb56 	bl	8002ac8 <memmove>
	  return __result + _Num;
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	4413      	add	r3, r2
	}
 8001422:	4618      	mov	r0, r3
 8001424:	3718      	adds	r7, #24
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 8001436:	4909      	ldr	r1, [pc, #36]	; (800145c <NVIC_EnableIRQ+0x30>)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	095b      	lsrs	r3, r3, #5
 800143e:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8001442:	f002 021f 	and.w	r2, r2, #31
 8001446:	2001      	movs	r0, #1
 8001448:	fa00 f202 	lsl.w	r2, r0, r2
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001450:	bf00      	nop
 8001452:	370c      	adds	r7, #12
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	e000e100 	.word	0xe000e100

08001460 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	da0b      	bge.n	800148c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8001474:	490d      	ldr	r1, [pc, #52]	; (80014ac <NVIC_SetPriority+0x4c>)
 8001476:	79fb      	ldrb	r3, [r7, #7]
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	3b04      	subs	r3, #4
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	b2d2      	uxtb	r2, r2
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800148a:	e009      	b.n	80014a0 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800148c:	4908      	ldr	r1, [pc, #32]	; (80014b0 <NVIC_SetPriority+0x50>)
 800148e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	0112      	lsls	r2, r2, #4
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	440b      	add	r3, r1
 800149c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00
 80014b0:	e000e100 	.word	0xe000e100

080014b4 <_Z15InitLCDHardwarev>:

	// See page 83 of manual for other possible performance boost options: instruction cache enable (ICEN) and data cache enable (DCEN)
}

void InitLCDHardware(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
	//	Enable GPIO and SPI clocks
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 80014b8:	4a52      	ldr	r2, [pc, #328]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80014ba:	4b52      	ldr	r3, [pc, #328]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f043 0304 	orr.w	r3, r3, #4
 80014c2:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;			// reset and clock control - advanced high performance bus - GPIO port D
 80014c4:	4a4f      	ldr	r2, [pc, #316]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80014c6:	4b4f      	ldr	r3, [pc, #316]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f043 0308 	orr.w	r3, r3, #8
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;			// reset and clock control - advanced high performance bus - GPIO port F
 80014d0:	4a4c      	ldr	r2, [pc, #304]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80014d2:	4b4c      	ldr	r3, [pc, #304]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f043 0320 	orr.w	r3, r3, #32
 80014da:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 80014dc:	4a49      	ldr	r2, [pc, #292]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80014de:	4b49      	ldr	r3, [pc, #292]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80014e6:	6453      	str	r3, [r2, #68]	; 0x44

	// Init WRX (Write execution control) pin PD13
	GPIOD->MODER |= GPIO_MODER_MODER13_0;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 80014e8:	4a47      	ldr	r2, [pc, #284]	; (8001608 <_Z15InitLCDHardwarev+0x154>)
 80014ea:	4b47      	ldr	r3, [pc, #284]	; (8001608 <_Z15InitLCDHardwarev+0x154>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014f2:	6013      	str	r3, [r2, #0]
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_0;	// Medium  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 80014f4:	4a44      	ldr	r2, [pc, #272]	; (8001608 <_Z15InitLCDHardwarev+0x154>)
 80014f6:	4b44      	ldr	r3, [pc, #272]	; (8001608 <_Z15InitLCDHardwarev+0x154>)
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014fe:	6093      	str	r3, [r2, #8]

	// Init CS pin PC2
	GPIOC->MODER |= GPIO_MODER_MODER2_0;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8001500:	4a42      	ldr	r2, [pc, #264]	; (800160c <_Z15InitLCDHardwarev+0x158>)
 8001502:	4b42      	ldr	r3, [pc, #264]	; (800160c <_Z15InitLCDHardwarev+0x158>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_0;		// Medium  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 800150c:	4a3f      	ldr	r2, [pc, #252]	; (800160c <_Z15InitLCDHardwarev+0x158>)
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <_Z15InitLCDHardwarev+0x158>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f043 0310 	orr.w	r3, r3, #16
 8001516:	6093      	str	r3, [r2, #8]

	// Init RESET pin PD12
	GPIOD->MODER |= GPIO_MODER_MODER12_0;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8001518:	4a3b      	ldr	r2, [pc, #236]	; (8001608 <_Z15InitLCDHardwarev+0x154>)
 800151a:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <_Z15InitLCDHardwarev+0x154>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001522:	6013      	str	r3, [r2, #0]
	GPIOD->PUPDR |= GPIO_PUPDR_PUPDR12_0;			// Pull up - 00: No pull-up, pull-down; 01 Pull-up; 10 Pull-down; 11 Reserved
 8001524:	4a38      	ldr	r2, [pc, #224]	; (8001608 <_Z15InitLCDHardwarev+0x154>)
 8001526:	4b38      	ldr	r3, [pc, #224]	; (8001608 <_Z15InitLCDHardwarev+0x154>)
 8001528:	68db      	ldr	r3, [r3, #12]
 800152a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800152e:	60d3      	str	r3, [r2, #12]

	// Setup SPI pins -  PF7: SPI5_SCK;  PF8: SPI5_MISO;  PF9: SPI5_MOSI [all alternate function AF5 for SPI5]
	GPIOF->MODER |= GPIO_MODER_MODER7_1;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8001530:	4a37      	ldr	r2, [pc, #220]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800153a:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7;		// V High  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 800153c:	4a34      	ldr	r2, [pc, #208]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001546:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[0] |= 0b0101 << 28;					// 0b0101 = Alternate Function 5 (SPI5); 28 is position of Pin 7
 8001548:	4a31      	ldr	r2, [pc, #196]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 8001552:	6213      	str	r3, [r2, #32]

	GPIOF->MODER |= GPIO_MODER_MODER8_1;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8001554:	4a2e      	ldr	r2, [pc, #184]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800155e:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8;		// V High  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 8001560:	4a2b      	ldr	r2, [pc, #172]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800156a:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] |= 0b0101 << 0;					// 0b0101 = Alternate Function 5 (SPI5); 0 is position of Pin 8
 800156c:	4a28      	ldr	r2, [pc, #160]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 800156e:	4b28      	ldr	r3, [pc, #160]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f043 0305 	orr.w	r3, r3, #5
 8001576:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOF->MODER |= GPIO_MODER_MODER9_1;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8001578:	4a25      	ldr	r2, [pc, #148]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 800157a:	4b25      	ldr	r3, [pc, #148]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001582:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9;		// V High  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 8001584:	4a22      	ldr	r2, [pc, #136]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001586:	4b22      	ldr	r3, [pc, #136]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800158e:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] |= 0b0101 << 4;					// 0b0101 = Alternate Function 5 (SPI5); 4 is position of Pin 9
 8001590:	4a1f      	ldr	r2, [pc, #124]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <_Z15InitLCDHardwarev+0x15c>)
 8001594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001596:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800159a:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure SPI
	SPI5->CR1 |= SPI_CR1_SSM;						// Software slave management: When SSM bit is set, NSS pin input is replaced with the value from the SSI bit
 800159c:	4a1d      	ldr	r2, [pc, #116]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	8013      	strh	r3, [r2, #0]
	SPI5->CR1 |= SPI_CR1_SSI;						// Internal slave select
 80015ac:	4a19      	ldr	r2, [pc, #100]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015ae:	4b19      	ldr	r3, [pc, #100]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	b29b      	uxth	r3, r3
 80015b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	8013      	strh	r3, [r2, #0]
	SPI5->CR1 |= SPI_CR1_BR_0;						// Baud rate control prescaler: 0b001: fPCLK/4; 0b100: fPCLK/32
 80015bc:	4a15      	ldr	r2, [pc, #84]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015c0:	881b      	ldrh	r3, [r3, #0]
 80015c2:	b29b      	uxth	r3, r3
 80015c4:	f043 0308 	orr.w	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	8013      	strh	r3, [r2, #0]
	SPI5->CR1 |= SPI_CR1_MSTR;						// Master selection
 80015cc:	4a11      	ldr	r2, [pc, #68]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015ce:	4b11      	ldr	r3, [pc, #68]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	f043 0304 	orr.w	r3, r3, #4
 80015d8:	b29b      	uxth	r3, r3
 80015da:	8013      	strh	r3, [r2, #0]

	SPI5->CR1 |= SPI_CR1_SPE;						// Enable SPI
 80015dc:	4a0d      	ldr	r2, [pc, #52]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015de:	4b0d      	ldr	r3, [pc, #52]	; (8001614 <_Z15InitLCDHardwarev+0x160>)
 80015e0:	881b      	ldrh	r3, [r3, #0]
 80015e2:	b29b      	uxth	r3, r3
 80015e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	8013      	strh	r3, [r2, #0]

	// Configure DMA
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 80015ec:	4a05      	ldr	r2, [pc, #20]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80015ee:	4b05      	ldr	r3, [pc, #20]	; (8001604 <_Z15InitLCDHardwarev+0x150>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015f6:	6313      	str	r3, [r2, #48]	; 0x30
	#define SPI5_DMA_RX_STREAM    DMA2_Stream5
	#define SPI5_DMA_RX_CHANNEL   DMA_Channel_7
	#endif
*/

}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	40023800 	.word	0x40023800
 8001608:	40020c00 	.word	0x40020c00
 800160c:	40020800 	.word	0x40020800
 8001610:	40021400 	.word	0x40021400
 8001614:	40015000 	.word	0x40015000

08001618 <_Z7InitADCv>:

#define ADC_BUFFER_LENGTH 8
volatile uint16_t ADC_array[ADC_BUFFER_LENGTH];

void InitADC(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
	//	Setup Timer 2 to trigger ADC
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// Enable Timer 2 clock
 800161c:	4a78      	ldr	r2, [pc, #480]	; (8001800 <_Z7InitADCv+0x1e8>)
 800161e:	4b78      	ldr	r3, [pc, #480]	; (8001800 <_Z7InitADCv+0x1e8>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->CR2 |= TIM_CR2_MMS_2;						// 100: Compare - OC1REF signal is used as trigger output (TRGO)
 8001628:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001630:	889b      	ldrh	r3, [r3, #4]
 8001632:	b29b      	uxth	r3, r3
 8001634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001638:	b29b      	uxth	r3, r3
 800163a:	8093      	strh	r3, [r2, #4]
	TIM2->PSC = 20 - 1;								// Prescaler
 800163c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001640:	2213      	movs	r2, #19
 8001642:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100 - 1;							// Auto-reload register (ie reset counter) divided by 100
 8001644:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001648:	2263      	movs	r2, #99	; 0x63
 800164a:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 50 - 1;							// Capture and compare - ie when counter hits this number PWM high
 800164c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001650:	2231      	movs	r2, #49	; 0x31
 8001652:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;					// Capture/Compare 1 output enable
 8001654:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001658:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800165c:	8c1b      	ldrh	r3, [r3, #32]
 800165e:	b29b      	uxth	r3, r3
 8001660:	f043 0301 	orr.w	r3, r3, #1
 8001664:	b29b      	uxth	r3, r3
 8001666:	8413      	strh	r3, [r2, #32]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 |TIM_CCMR1_OC1M_2;		// 110 PWM Mode 1
 8001668:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800166c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001670:	8b1b      	ldrh	r3, [r3, #24]
 8001672:	b29b      	uxth	r3, r3
 8001674:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001678:	b29b      	uxth	r3, r3
 800167a:	8313      	strh	r3, [r2, #24]
	TIM2->CR1 |= TIM_CR1_CEN;
 800167c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001680:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001684:	881b      	ldrh	r3, [r3, #0]
 8001686:	b29b      	uxth	r3, r3
 8001688:	f043 0301 	orr.w	r3, r3, #1
 800168c:	b29b      	uxth	r3, r3
 800168e:	8013      	strh	r3, [r2, #0]

	// Enable ADC1 and GPIO clock sources
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8001690:	4a5b      	ldr	r2, [pc, #364]	; (8001800 <_Z7InitADCv+0x1e8>)
 8001692:	4b5b      	ldr	r3, [pc, #364]	; (8001800 <_Z7InitADCv+0x1e8>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f043 0301 	orr.w	r3, r3, #1
 800169a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800169c:	4a58      	ldr	r2, [pc, #352]	; (8001800 <_Z7InitADCv+0x1e8>)
 800169e:	4b58      	ldr	r3, [pc, #352]	; (8001800 <_Z7InitADCv+0x1e8>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f043 0304 	orr.w	r3, r3, #4
 80016a6:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 80016a8:	4a55      	ldr	r2, [pc, #340]	; (8001800 <_Z7InitADCv+0x1e8>)
 80016aa:	4b55      	ldr	r3, [pc, #340]	; (8001800 <_Z7InitADCv+0x1e8>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016b2:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable ADC - PC3: ADC123_IN13; PA5: ADC12_IN5;
	GPIOC->MODER |= GPIO_MODER_MODER3;				// Set PC3 to Analog mode (0b11)
 80016b4:	4a53      	ldr	r2, [pc, #332]	; (8001804 <_Z7InitADCv+0x1ec>)
 80016b6:	4b53      	ldr	r3, [pc, #332]	; (8001804 <_Z7InitADCv+0x1ec>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016be:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5;				// Set PA5 to Analog mode (0b11)
 80016c0:	4a51      	ldr	r2, [pc, #324]	; (8001808 <_Z7InitADCv+0x1f0>)
 80016c2:	4b51      	ldr	r3, [pc, #324]	; (8001808 <_Z7InitADCv+0x1f0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80016ca:	6013      	str	r3, [r2, #0]

	ADC1->CR1 |= ADC_CR1_SCAN;						// Activate scan mode
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <_Z7InitADCv+0x1f4>)
 80016ce:	4b4f      	ldr	r3, [pc, #316]	; (800180c <_Z7InitADCv+0x1f4>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d6:	6053      	str	r3, [r2, #4]
	//ADC1->SQR1 = (ADC_BUFFER_LENGTH - 1) << 20;	// Number of conversions in sequence
	ADC1->SQR1 = (2 - 1) << 20;						// Number of conversions in sequence (limit to two for now as we are getting multiple samples to average)
 80016d8:	4b4c      	ldr	r3, [pc, #304]	; (800180c <_Z7InitADCv+0x1f4>)
 80016da:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016de:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 |= 13 << 0;							// Set IN13  1st conversion in sequence
 80016e0:	4a4a      	ldr	r2, [pc, #296]	; (800180c <_Z7InitADCv+0x1f4>)
 80016e2:	4b4a      	ldr	r3, [pc, #296]	; (800180c <_Z7InitADCv+0x1f4>)
 80016e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016e6:	f043 030d 	orr.w	r3, r3, #13
 80016ea:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= 5 << 5;							// Set IN5  2nd conversion in sequence
 80016ec:	4a47      	ldr	r2, [pc, #284]	; (800180c <_Z7InitADCv+0x1f4>)
 80016ee:	4b47      	ldr	r3, [pc, #284]	; (800180c <_Z7InitADCv+0x1f4>)
 80016f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016f2:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 80016f6:	6353      	str	r3, [r2, #52]	; 0x34

	// Set to 56 cycles (0b11) sampling speed (SMPR2 Left shift speed 3 x ADC_INx up to input 9; use SMPR1 from 0 for ADC_IN10+)
	// 000: 3 cycles; 001: 15 cycles; 010: 28 cycles; 011: 56 cycles; 100: 84 cycles; 101: 112 cycles; 110: 144 cycles; 111: 480 cycles
	ADC1->SMPR1 |= 0b110 << 9;						// Set speed of IN13
 80016f8:	4a44      	ldr	r2, [pc, #272]	; (800180c <_Z7InitADCv+0x1f4>)
 80016fa:	4b44      	ldr	r3, [pc, #272]	; (800180c <_Z7InitADCv+0x1f4>)
 80016fc:	68db      	ldr	r3, [r3, #12]
 80016fe:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8001702:	60d3      	str	r3, [r2, #12]
	ADC1->SMPR2 |= 0b110 << 15;						// Set speed of IN5
 8001704:	4a41      	ldr	r2, [pc, #260]	; (800180c <_Z7InitADCv+0x1f4>)
 8001706:	4b41      	ldr	r3, [pc, #260]	; (800180c <_Z7InitADCv+0x1f4>)
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800170e:	6113      	str	r3, [r2, #16]

	ADC1->CR2 |= ADC_CR2_EOCS;						// Trigger interrupt on end of each individual conversion
 8001710:	4a3e      	ldr	r2, [pc, #248]	; (800180c <_Z7InitADCv+0x1f4>)
 8001712:	4b3e      	ldr	r3, [pc, #248]	; (800180c <_Z7InitADCv+0x1f4>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTEN_0;					// ADC hardware trigger 00: Trigger detection disabled; 01: Trigger detection on the rising edge; 10: Trigger detection on the falling edge; 11: Trigger detection on both the rising and falling edges
 800171c:	4a3b      	ldr	r2, [pc, #236]	; (800180c <_Z7InitADCv+0x1f4>)
 800171e:	4b3b      	ldr	r3, [pc, #236]	; (800180c <_Z7InitADCv+0x1f4>)
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001726:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;	// ADC External trigger: 0110 = TIM2_TRGO event
 8001728:	4a38      	ldr	r2, [pc, #224]	; (800180c <_Z7InitADCv+0x1f4>)
 800172a:	4b38      	ldr	r3, [pc, #224]	; (800180c <_Z7InitADCv+0x1f4>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 8001732:	6093      	str	r3, [r2, #8]

	// Enable DMA - DMA2, Channel 0, Stream 0  = ADC1 (Manual p207)
	ADC1->CR2 |= ADC_CR2_DMA;						// Enable DMA Mode on ADC1
 8001734:	4a35      	ldr	r2, [pc, #212]	; (800180c <_Z7InitADCv+0x1f4>)
 8001736:	4b35      	ldr	r3, [pc, #212]	; (800180c <_Z7InitADCv+0x1f4>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800173e:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;						// DMA requests are issued as long as data are converted and DMA=1
 8001740:	4a32      	ldr	r2, [pc, #200]	; (800180c <_Z7InitADCv+0x1f4>)
 8001742:	4b32      	ldr	r3, [pc, #200]	; (800180c <_Z7InitADCv+0x1f4>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800174a:	6093      	str	r3, [r2, #8]
	RCC->AHB1ENR|= RCC_AHB1ENR_DMA2EN;
 800174c:	4a2c      	ldr	r2, [pc, #176]	; (8001800 <_Z7InitADCv+0x1e8>)
 800174e:	4b2c      	ldr	r3, [pc, #176]	; (8001800 <_Z7InitADCv+0x1e8>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001756:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;				// 00 = Peripheral-to-memory
 8001758:	4a2d      	ldr	r2, [pc, #180]	; (8001810 <_Z7InitADCv+0x1f8>)
 800175a:	4b2d      	ldr	r3, [pc, #180]	; (8001810 <_Z7InitADCv+0x1f8>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8001762:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_PL_1;				// Priority: 00 = low; 01 = Medium; 10 = High; 11 = Very High
 8001764:	4a2a      	ldr	r2, [pc, #168]	; (8001810 <_Z7InitADCv+0x1f8>)
 8001766:	4b2a      	ldr	r3, [pc, #168]	; (8001810 <_Z7InitADCv+0x1f8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176e:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8001770:	4a27      	ldr	r2, [pc, #156]	; (8001810 <_Z7InitADCv+0x1f8>)
 8001772:	4b27      	ldr	r3, [pc, #156]	; (8001810 <_Z7InitADCv+0x1f8>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800177a:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 800177c:	4a24      	ldr	r2, [pc, #144]	; (8001810 <_Z7InitADCv+0x1f8>)
 800177e:	4b24      	ldr	r3, [pc, #144]	; (8001810 <_Z7InitADCv+0x1f8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001786:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;				// Peripheral not in increment mode
 8001788:	4a21      	ldr	r2, [pc, #132]	; (8001810 <_Z7InitADCv+0x1f8>)
 800178a:	4b21      	ldr	r3, [pc, #132]	; (8001810 <_Z7InitADCv+0x1f8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001792:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_MINC;				// Memory in increment mode
 8001794:	4a1e      	ldr	r2, [pc, #120]	; (8001810 <_Z7InitADCv+0x1f8>)
 8001796:	4b1e      	ldr	r3, [pc, #120]	; (8001810 <_Z7InitADCv+0x1f8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800179e:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;				// circular mode to keep refilling buffer
 80017a0:	4a1b      	ldr	r2, [pc, #108]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017a2:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017aa:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;				// data transfer direction: 00: peripheral-to-memory; 01: memory-to-peripheral; 10: memory-to-memory
 80017ac:	4a18      	ldr	r2, [pc, #96]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017ae:	4b18      	ldr	r3, [pc, #96]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80017b6:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->NDTR |= ADC_BUFFER_LENGTH;		// Number of data items to transfer (ie size of ADC buffer)
 80017b8:	4a15      	ldr	r2, [pc, #84]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017ba:	4b15      	ldr	r3, [pc, #84]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f043 0308 	orr.w	r3, r3, #8
 80017c2:	6053      	str	r3, [r2, #4]
	DMA2_Stream0->PAR = (uint32_t)(&(ADC1->DR));	// Configure the peripheral data register address
 80017c4:	4b12      	ldr	r3, [pc, #72]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <_Z7InitADCv+0x1fc>)
 80017c8:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t)(ADC_array);		// Configure the memory address (note that M1AR is used for double-buffer mode)
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017cc:	4a12      	ldr	r2, [pc, #72]	; (8001818 <_Z7InitADCv+0x200>)
 80017ce:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;			// channel select to 0 for ADC1
 80017d0:	4a0f      	ldr	r2, [pc, #60]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017d2:	4b0f      	ldr	r3, [pc, #60]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 80017da:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->CR |= DMA_SxCR_EN;				// Enable DMA2
 80017dc:	4a0c      	ldr	r2, [pc, #48]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017de:	4b0c      	ldr	r3, [pc, #48]	; (8001810 <_Z7InitADCv+0x1f8>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]
	ADC1->CR2 |= ADC_CR2_ADON;						// Activate ADC
 80017e8:	4a08      	ldr	r2, [pc, #32]	; (800180c <_Z7InitADCv+0x1f4>)
 80017ea:	4b08      	ldr	r3, [pc, #32]	; (800180c <_Z7InitADCv+0x1f4>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6093      	str	r3, [r2, #8]

}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	40023800 	.word	0x40023800
 8001804:	40020800 	.word	0x40020800
 8001808:	40020000 	.word	0x40020000
 800180c:	40012000 	.word	0x40012000
 8001810:	40026410 	.word	0x40026410
 8001814:	4001204c 	.word	0x4001204c
 8001818:	20000098 	.word	0x20000098

0800181c <_Z9InitTimerv>:

void InitTimer()
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	//	Setup Timer 3 on an interrupt to trigger sample acquisition
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;				// Enable Timer 3
 8001820:	4a16      	ldr	r2, [pc, #88]	; (800187c <_Z9InitTimerv+0x60>)
 8001822:	4b16      	ldr	r3, [pc, #88]	; (800187c <_Z9InitTimerv+0x60>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	f043 0302 	orr.w	r3, r3, #2
 800182a:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 1000;								// Set prescaler to fire at sample rate - this is divided by 4 to match the APB2 prescaler
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <_Z9InitTimerv+0x64>)
 800182e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->ARR = 30; 								// Set maximum count value (auto reload register) - set to system clock / sampling rate
 8001834:	4b12      	ldr	r3, [pc, #72]	; (8001880 <_Z9InitTimerv+0x64>)
 8001836:	221e      	movs	r2, #30
 8001838:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= TIM_DIER_UIE;						//  DMA/interrupt enable register
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <_Z9InitTimerv+0x64>)
 800183c:	4b10      	ldr	r3, [pc, #64]	; (8001880 <_Z9InitTimerv+0x64>)
 800183e:	899b      	ldrh	r3, [r3, #12]
 8001840:	b29b      	uxth	r3, r3
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	b29b      	uxth	r3, r3
 8001848:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 800184a:	201d      	movs	r0, #29
 800184c:	f7ff fdee 	bl	800142c <NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 0);
 8001850:	2100      	movs	r1, #0
 8001852:	201d      	movs	r0, #29
 8001854:	f7ff fe04 	bl	8001460 <NVIC_SetPriority>

	TIM3->CR1 |= TIM_CR1_CEN;
 8001858:	4a09      	ldr	r2, [pc, #36]	; (8001880 <_Z9InitTimerv+0x64>)
 800185a:	4b09      	ldr	r3, [pc, #36]	; (8001880 <_Z9InitTimerv+0x64>)
 800185c:	881b      	ldrh	r3, [r3, #0]
 800185e:	b29b      	uxth	r3, r3
 8001860:	f043 0301 	orr.w	r3, r3, #1
 8001864:	b29b      	uxth	r3, r3
 8001866:	8013      	strh	r3, [r2, #0]
	TIM3->EGR |= TIM_EGR_UG;
 8001868:	4a05      	ldr	r2, [pc, #20]	; (8001880 <_Z9InitTimerv+0x64>)
 800186a:	4b05      	ldr	r3, [pc, #20]	; (8001880 <_Z9InitTimerv+0x64>)
 800186c:	8a9b      	ldrh	r3, [r3, #20]
 800186e:	b29b      	uxth	r3, r3
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	b29b      	uxth	r3, r3
 8001876:	8293      	strh	r3, [r2, #20]
}
 8001878:	bf00      	nop
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	40000400 	.word	0x40000400

08001884 <TIM3_IRQHandler>:
} trigger;

//	Use extern C to allow linker to find ISR
extern "C"
{
	void TIM3_IRQHandler(void) {
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
		if (TIM3->SR & TIM_SR_UIF) 						// if UIF flag is set
 800188a:	4b97      	ldr	r3, [pc, #604]	; (8001ae8 <TIM3_IRQHandler+0x264>)
 800188c:	8a1b      	ldrh	r3, [r3, #16]
 800188e:	b29b      	uxth	r3, r3
 8001890:	f003 0301 	and.w	r3, r3, #1
 8001894:	2b00      	cmp	r3, #0
 8001896:	bf14      	ite	ne
 8001898:	2301      	movne	r3, #1
 800189a:	2300      	moveq	r3, #0
 800189c:	b2db      	uxtb	r3, r3
 800189e:	2b00      	cmp	r3, #0
 80018a0:	f000 8166 	beq.w	8001b70 <TIM3_IRQHandler+0x2ec>
		{
			TIM3->SR &= ~TIM_SR_UIF;					// clear UIF flag
 80018a4:	4a90      	ldr	r2, [pc, #576]	; (8001ae8 <TIM3_IRQHandler+0x264>)
 80018a6:	4b90      	ldr	r3, [pc, #576]	; (8001ae8 <TIM3_IRQHandler+0x264>)
 80018a8:	8a1b      	ldrh	r3, [r3, #16]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	f023 0301 	bic.w	r3, r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	8213      	strh	r3, [r2, #16]

			adc0 = (((float)(ADC_array[0] + ADC_array[2] + ADC_array[4] + ADC_array[6]) / 4) / 4096 * 240) - 30;
 80018b4:	4b8d      	ldr	r3, [pc, #564]	; (8001aec <TIM3_IRQHandler+0x268>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	b29b      	uxth	r3, r3
 80018ba:	461a      	mov	r2, r3
 80018bc:	4b8b      	ldr	r3, [pc, #556]	; (8001aec <TIM3_IRQHandler+0x268>)
 80018be:	889b      	ldrh	r3, [r3, #4]
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	4413      	add	r3, r2
 80018c4:	4a89      	ldr	r2, [pc, #548]	; (8001aec <TIM3_IRQHandler+0x268>)
 80018c6:	8912      	ldrh	r2, [r2, #8]
 80018c8:	b292      	uxth	r2, r2
 80018ca:	4413      	add	r3, r2
 80018cc:	4a87      	ldr	r2, [pc, #540]	; (8001aec <TIM3_IRQHandler+0x268>)
 80018ce:	8992      	ldrh	r2, [r2, #12]
 80018d0:	b292      	uxth	r2, r2
 80018d2:	4413      	add	r3, r2
 80018d4:	ee07 3a90 	vmov	s15, r3
 80018d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018dc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80018e0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80018e4:	eddf 6a82 	vldr	s13, [pc, #520]	; 8001af0 <TIM3_IRQHandler+0x26c>
 80018e8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018ec:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8001af4 <TIM3_IRQHandler+0x270>
 80018f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018f4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80018f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80018fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001900:	edc7 7a01 	vstr	s15, [r7, #4]
 8001904:	88bb      	ldrh	r3, [r7, #4]
 8001906:	b29a      	uxth	r2, r3
 8001908:	4b7b      	ldr	r3, [pc, #492]	; (8001af8 <TIM3_IRQHandler+0x274>)
 800190a:	801a      	strh	r2, [r3, #0]
			adc1 = (((float)(ADC_array[1] + ADC_array[3] + ADC_array[5] + ADC_array[7]) / 4) / 4096 * 240) - 30;
 800190c:	4b77      	ldr	r3, [pc, #476]	; (8001aec <TIM3_IRQHandler+0x268>)
 800190e:	885b      	ldrh	r3, [r3, #2]
 8001910:	b29b      	uxth	r3, r3
 8001912:	461a      	mov	r2, r3
 8001914:	4b75      	ldr	r3, [pc, #468]	; (8001aec <TIM3_IRQHandler+0x268>)
 8001916:	88db      	ldrh	r3, [r3, #6]
 8001918:	b29b      	uxth	r3, r3
 800191a:	4413      	add	r3, r2
 800191c:	4a73      	ldr	r2, [pc, #460]	; (8001aec <TIM3_IRQHandler+0x268>)
 800191e:	8952      	ldrh	r2, [r2, #10]
 8001920:	b292      	uxth	r2, r2
 8001922:	4413      	add	r3, r2
 8001924:	4a71      	ldr	r2, [pc, #452]	; (8001aec <TIM3_IRQHandler+0x268>)
 8001926:	89d2      	ldrh	r2, [r2, #14]
 8001928:	b292      	uxth	r2, r2
 800192a:	4413      	add	r3, r2
 800192c:	ee07 3a90 	vmov	s15, r3
 8001930:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001934:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001938:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800193c:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8001af0 <TIM3_IRQHandler+0x26c>
 8001940:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001944:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001af4 <TIM3_IRQHandler+0x270>
 8001948:	ee67 7a87 	vmul.f32	s15, s15, s14
 800194c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001950:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001958:	edc7 7a01 	vstr	s15, [r7, #4]
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	b29a      	uxth	r2, r3
 8001960:	4b66      	ldr	r3, [pc, #408]	; (8001afc <TIM3_IRQHandler+0x278>)
 8001962:	801a      	strh	r2, [r3, #0]
			//adc0 = ((float)ADC_array[0] / 4096 * 240) - 30;

			// check if we should start capturing - ie not drawing from the capture buffer and crossed over the trigger threshold
			if ((!drawing || captureBufferNumber != drawBufferNumber) && (!capturing && oldAdc0 < trigger.y && adc0 >= trigger.y)) {
 8001964:	4b66      	ldr	r3, [pc, #408]	; (8001b00 <TIM3_IRQHandler+0x27c>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	b2db      	uxtb	r3, r3
 800196a:	f083 0301 	eor.w	r3, r3, #1
 800196e:	b2db      	uxtb	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	d107      	bne.n	8001984 <TIM3_IRQHandler+0x100>
 8001974:	4b63      	ldr	r3, [pc, #396]	; (8001b04 <TIM3_IRQHandler+0x280>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b2da      	uxtb	r2, r3
 800197a:	4b63      	ldr	r3, [pc, #396]	; (8001b08 <TIM3_IRQHandler+0x284>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	b2db      	uxtb	r3, r3
 8001980:	429a      	cmp	r2, r3
 8001982:	d019      	beq.n	80019b8 <TIM3_IRQHandler+0x134>
 8001984:	4b61      	ldr	r3, [pc, #388]	; (8001b0c <TIM3_IRQHandler+0x288>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b2db      	uxtb	r3, r3
 800198a:	f083 0301 	eor.w	r3, r3, #1
 800198e:	b2db      	uxtb	r3, r3
 8001990:	2b00      	cmp	r3, #0
 8001992:	d011      	beq.n	80019b8 <TIM3_IRQHandler+0x134>
 8001994:	4b5e      	ldr	r3, [pc, #376]	; (8001b10 <TIM3_IRQHandler+0x28c>)
 8001996:	881b      	ldrh	r3, [r3, #0]
 8001998:	b29b      	uxth	r3, r3
 800199a:	461a      	mov	r2, r3
 800199c:	4b5d      	ldr	r3, [pc, #372]	; (8001b14 <TIM3_IRQHandler+0x290>)
 800199e:	885b      	ldrh	r3, [r3, #2]
 80019a0:	429a      	cmp	r2, r3
 80019a2:	da09      	bge.n	80019b8 <TIM3_IRQHandler+0x134>
 80019a4:	4b54      	ldr	r3, [pc, #336]	; (8001af8 <TIM3_IRQHandler+0x274>)
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	461a      	mov	r2, r3
 80019ac:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <TIM3_IRQHandler+0x290>)
 80019ae:	885b      	ldrh	r3, [r3, #2]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	db01      	blt.n	80019b8 <TIM3_IRQHandler+0x134>
 80019b4:	2301      	movs	r3, #1
 80019b6:	e000      	b.n	80019ba <TIM3_IRQHandler+0x136>
 80019b8:	2300      	movs	r3, #0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d034      	beq.n	8001a28 <TIM3_IRQHandler+0x1a4>
				capturing = true;
 80019be:	4b53      	ldr	r3, [pc, #332]	; (8001b0c <TIM3_IRQHandler+0x288>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]

				// calculate the drawing offset based on the current capture position minus the horizontal trigger position
				drawOffset[captureBufferNumber] = capturePos - trigger.x;
 80019c4:	4b4f      	ldr	r3, [pc, #316]	; (8001b04 <TIM3_IRQHandler+0x280>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	b2db      	uxtb	r3, r3
 80019ca:	4619      	mov	r1, r3
 80019cc:	4b52      	ldr	r3, [pc, #328]	; (8001b18 <TIM3_IRQHandler+0x294>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	b29a      	uxth	r2, r3
 80019d2:	4b50      	ldr	r3, [pc, #320]	; (8001b14 <TIM3_IRQHandler+0x290>)
 80019d4:	881b      	ldrh	r3, [r3, #0]
 80019d6:	1ad3      	subs	r3, r2, r3
 80019d8:	b29b      	uxth	r3, r3
 80019da:	b21a      	sxth	r2, r3
 80019dc:	4b4f      	ldr	r3, [pc, #316]	; (8001b1c <TIM3_IRQHandler+0x298>)
 80019de:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				if (drawOffset[captureBufferNumber] < 0) drawOffset[captureBufferNumber] += OSCWIDTH;
 80019e2:	4b48      	ldr	r3, [pc, #288]	; (8001b04 <TIM3_IRQHandler+0x280>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	461a      	mov	r2, r3
 80019ea:	4b4c      	ldr	r3, [pc, #304]	; (8001b1c <TIM3_IRQHandler+0x298>)
 80019ec:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80019f0:	b29b      	uxth	r3, r3
 80019f2:	0bdb      	lsrs	r3, r3, #15
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00f      	beq.n	8001a1a <TIM3_IRQHandler+0x196>
 80019fa:	4b42      	ldr	r3, [pc, #264]	; (8001b04 <TIM3_IRQHandler+0x280>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	461a      	mov	r2, r3
 8001a02:	4619      	mov	r1, r3
 8001a04:	4b45      	ldr	r3, [pc, #276]	; (8001b1c <TIM3_IRQHandler+0x298>)
 8001a06:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	b219      	sxth	r1, r3
 8001a14:	4b41      	ldr	r3, [pc, #260]	; (8001b1c <TIM3_IRQHandler+0x298>)
 8001a16:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				// captureSamples is used to check if a sample is ready to be drawn
				captureSamples = trigger.x - 1;
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	; (8001b14 <TIM3_IRQHandler+0x290>)
 8001a1c:	881b      	ldrh	r3, [r3, #0]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	4b3e      	ldr	r3, [pc, #248]	; (8001b20 <TIM3_IRQHandler+0x29c>)
 8001a26:	801a      	strh	r2, [r3, #0]
			}

			// if capturing check if write buffer is full and switch to next buffer if so; if not full store current reading
			if (capturing && capturePos == drawOffset[captureBufferNumber]) {
 8001a28:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <TIM3_IRQHandler+0x288>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	b2db      	uxtb	r3, r3
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00e      	beq.n	8001a50 <TIM3_IRQHandler+0x1cc>
 8001a32:	4b39      	ldr	r3, [pc, #228]	; (8001b18 <TIM3_IRQHandler+0x294>)
 8001a34:	881b      	ldrh	r3, [r3, #0]
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	461a      	mov	r2, r3
 8001a3a:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <TIM3_IRQHandler+0x280>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	4619      	mov	r1, r3
 8001a42:	4b36      	ldr	r3, [pc, #216]	; (8001b1c <TIM3_IRQHandler+0x298>)
 8001a44:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d101      	bne.n	8001a50 <TIM3_IRQHandler+0x1cc>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <TIM3_IRQHandler+0x1ce>
 8001a50:	2300      	movs	r3, #0
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d021      	beq.n	8001a9a <TIM3_IRQHandler+0x216>
				capturing = false;
 8001a56:	4b2d      	ldr	r3, [pc, #180]	; (8001b0c <TIM3_IRQHandler+0x288>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	701a      	strb	r2, [r3, #0]

				// switch the capture buffer and get a pointer to the current capture buffer
				captureBufferNumber = captureBufferNumber == 1 ? 0 : 1;
 8001a5c:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <TIM3_IRQHandler+0x280>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	bf14      	ite	ne
 8001a66:	2301      	movne	r3, #1
 8001a68:	2300      	moveq	r3, #0
 8001a6a:	b2db      	uxtb	r3, r3
 8001a6c:	461a      	mov	r2, r3
 8001a6e:	4b25      	ldr	r3, [pc, #148]	; (8001b04 <TIM3_IRQHandler+0x280>)
 8001a70:	701a      	strb	r2, [r3, #0]
				captureABuffer = captureBufferNumber == 0 ? ChannelA0 : ChannelA1;
 8001a72:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <TIM3_IRQHandler+0x280>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <TIM3_IRQHandler+0x1fc>
 8001a7c:	4b29      	ldr	r3, [pc, #164]	; (8001b24 <TIM3_IRQHandler+0x2a0>)
 8001a7e:	e000      	b.n	8001a82 <TIM3_IRQHandler+0x1fe>
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <TIM3_IRQHandler+0x2a4>)
 8001a82:	4a2a      	ldr	r2, [pc, #168]	; (8001b2c <TIM3_IRQHandler+0x2a8>)
 8001a84:	6013      	str	r3, [r2, #0]
				captureBBuffer = captureBufferNumber == 0 ? ChannelB0 : ChannelB1;
 8001a86:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <TIM3_IRQHandler+0x280>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d101      	bne.n	8001a94 <TIM3_IRQHandler+0x210>
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <TIM3_IRQHandler+0x2ac>)
 8001a92:	e000      	b.n	8001a96 <TIM3_IRQHandler+0x212>
 8001a94:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <TIM3_IRQHandler+0x2b0>)
 8001a96:	4a28      	ldr	r2, [pc, #160]	; (8001b38 <TIM3_IRQHandler+0x2b4>)
 8001a98:	6013      	str	r3, [r2, #0]
			}
			captureABuffer[capturePos] = adc0;
 8001a9a:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <TIM3_IRQHandler+0x2a8>)
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	4b1e      	ldr	r3, [pc, #120]	; (8001b18 <TIM3_IRQHandler+0x294>)
 8001aa0:	881b      	ldrh	r3, [r3, #0]
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4413      	add	r3, r2
 8001aa8:	4a13      	ldr	r2, [pc, #76]	; (8001af8 <TIM3_IRQHandler+0x274>)
 8001aaa:	8812      	ldrh	r2, [r2, #0]
 8001aac:	b292      	uxth	r2, r2
 8001aae:	801a      	strh	r2, [r3, #0]
			captureBBuffer[capturePos] = adc1;
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <TIM3_IRQHandler+0x2b4>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	4b18      	ldr	r3, [pc, #96]	; (8001b18 <TIM3_IRQHandler+0x294>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	4413      	add	r3, r2
 8001abe:	4a0f      	ldr	r2, [pc, #60]	; (8001afc <TIM3_IRQHandler+0x278>)
 8001ac0:	8812      	ldrh	r2, [r2, #0]
 8001ac2:	b292      	uxth	r2, r2
 8001ac4:	801a      	strh	r2, [r3, #0]

			if (capturePos == OSCWIDTH - 1) {
 8001ac6:	4b14      	ldr	r3, [pc, #80]	; (8001b18 <TIM3_IRQHandler+0x294>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	b29b      	uxth	r3, r3
 8001acc:	f240 123f 	movw	r2, #319	; 0x13f
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	bf0c      	ite	eq
 8001ad4:	2301      	moveq	r3, #1
 8001ad6:	2300      	movne	r3, #0
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d02e      	beq.n	8001b3c <TIM3_IRQHandler+0x2b8>
				capturePos = 0;
 8001ade:	4b0e      	ldr	r3, [pc, #56]	; (8001b18 <TIM3_IRQHandler+0x294>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	801a      	strh	r2, [r3, #0]
 8001ae4:	e031      	b.n	8001b4a <TIM3_IRQHandler+0x2c6>
 8001ae6:	bf00      	nop
 8001ae8:	40000400 	.word	0x40000400
 8001aec:	20000098 	.word	0x20000098
 8001af0:	45800000 	.word	0x45800000
 8001af4:	43700000 	.word	0x43700000
 8001af8:	200000a8 	.word	0x200000a8
 8001afc:	200000ac 	.word	0x200000ac
 8001b00:	20000acc 	.word	0x20000acc
 8001b04:	20000acd 	.word	0x20000acd
 8001b08:	20000ace 	.word	0x20000ace
 8001b0c:	20000ac8 	.word	0x20000ac8
 8001b10:	200000aa 	.word	0x200000aa
 8001b14:	20000000 	.word	0x20000000
 8001b18:	20000ac0 	.word	0x20000ac0
 8001b1c:	20000ad0 	.word	0x20000ad0
 8001b20:	20000aca 	.word	0x20000aca
 8001b24:	200000b0 	.word	0x200000b0
 8001b28:	20000330 	.word	0x20000330
 8001b2c:	20000ab0 	.word	0x20000ab0
 8001b30:	200005b0 	.word	0x200005b0
 8001b34:	20000830 	.word	0x20000830
 8001b38:	20000ab4 	.word	0x20000ab4
			} else {
				capturePos++;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <TIM3_IRQHandler+0x2f8>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	3301      	adds	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <TIM3_IRQHandler+0x2f8>)
 8001b48:	801a      	strh	r2, [r3, #0]
			}

			if (capturing) captureSamples++;
 8001b4a:	4b0d      	ldr	r3, [pc, #52]	; (8001b80 <TIM3_IRQHandler+0x2fc>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d008      	beq.n	8001b66 <TIM3_IRQHandler+0x2e2>
 8001b54:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <TIM3_IRQHandler+0x300>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	b21b      	sxth	r3, r3
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <TIM3_IRQHandler+0x300>)
 8001b64:	801a      	strh	r2, [r3, #0]

			oldAdc0 = adc0;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <TIM3_IRQHandler+0x304>)
 8001b68:	881b      	ldrh	r3, [r3, #0]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <TIM3_IRQHandler+0x308>)
 8001b6e:	801a      	strh	r2, [r3, #0]

		}
	}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	20000ac0 	.word	0x20000ac0
 8001b80:	20000ac8 	.word	0x20000ac8
 8001b84:	20000aca 	.word	0x20000aca
 8001b88:	200000a8 	.word	0x200000a8
 8001b8c:	200000aa 	.word	0x200000aa

08001b90 <main>:
}

int main(void) {
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af02      	add	r7, sp, #8
	SystemInit();				// Activates floating point coprocessor and resets clock
 8001b96:	f000 f9a5 	bl	8001ee4 <SystemInit>
//	SystemClock_Config();		// Configure the clock and PLL - NB Currently done in SystemInit but will need updating for production board
	SystemCoreClockUpdate();	// Update SystemCoreClock (system clock frequency) derived from settings of oscillators, prescalers and PLL
 8001b9a:	f000 f9d9 	bl	8001f50 <SystemCoreClockUpdate>

	InitLCDHardware();
 8001b9e:	f7ff fc89 	bl	80014b4 <_Z15InitLCDHardwarev>
	InitADC();
 8001ba2:	f7ff fd39 	bl	8001618 <_Z7InitADCv>

	//Initialize ILI9341
	lcd.Init();
 8001ba6:	4890      	ldr	r0, [pc, #576]	; (8001de8 <main+0x258>)
 8001ba8:	f7fe fd00 	bl	80005ac <_ZN3Lcd4InitEv>
	//TM_ILI9341_Init();
	TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_2);		// Rotate LCD 90 degrees
 8001bac:	2003      	movs	r0, #3
 8001bae:	f000 fce1 	bl	8002574 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t>
	TM_ILI9341_Fill(ILI9341_COLOR_BLACK);						// Fill lcd with black
 8001bb2:	2000      	movs	r0, #0
 8001bb4:	f000 fc58 	bl	8002468 <_Z15TM_ILI9341_Fillm>
	TM_ILI9341_Puts(245, 225, "Mountjoy", &TM_Font_7x10, ILI9341_COLOR_BLACK, ILI9341_COLOR_ORANGE);

	DW_Pattern_Fill(50, 50);
*/

	captureABuffer = ChannelA0;
 8001bb8:	4b8c      	ldr	r3, [pc, #560]	; (8001dec <main+0x25c>)
 8001bba:	4a8d      	ldr	r2, [pc, #564]	; (8001df0 <main+0x260>)
 8001bbc:	601a      	str	r2, [r3, #0]
	captureBBuffer = ChannelB0;
 8001bbe:	4b8d      	ldr	r3, [pc, #564]	; (8001df4 <main+0x264>)
 8001bc0:	4a8d      	ldr	r2, [pc, #564]	; (8001df8 <main+0x268>)
 8001bc2:	601a      	str	r2, [r3, #0]
	InitTimer();
 8001bc4:	f7ff fe2a 	bl	800181c <_Z9InitTimerv>

	while (1) {

		// check if we should start drawing
		if (!drawing && capturing) {
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <main+0x26c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	f083 0301 	eor.w	r3, r3, #1
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d006      	beq.n	8001be6 <main+0x56>
 8001bd8:	4b89      	ldr	r3, [pc, #548]	; (8001e00 <main+0x270>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <main+0x56>
 8001be2:	2301      	movs	r3, #1
 8001be4:	e000      	b.n	8001be8 <main+0x58>
 8001be6:	2300      	movs	r3, #0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d01e      	beq.n	8001c2a <main+0x9a>
			drawing = true;
 8001bec:	4b83      	ldr	r3, [pc, #524]	; (8001dfc <main+0x26c>)
 8001bee:	2201      	movs	r2, #1
 8001bf0:	701a      	strb	r2, [r3, #0]
			drawPos = 0;
 8001bf2:	4b84      	ldr	r3, [pc, #528]	; (8001e04 <main+0x274>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	801a      	strh	r2, [r3, #0]
			drawBufferNumber = captureBufferNumber;
 8001bf8:	4b83      	ldr	r3, [pc, #524]	; (8001e08 <main+0x278>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	b2da      	uxtb	r2, r3
 8001bfe:	4b83      	ldr	r3, [pc, #524]	; (8001e0c <main+0x27c>)
 8001c00:	701a      	strb	r2, [r3, #0]

			// Get a pointer to the current draw buffer
			drawABuffer = drawBufferNumber == 0 ? ChannelA0 : ChannelA1;
 8001c02:	4b82      	ldr	r3, [pc, #520]	; (8001e0c <main+0x27c>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d101      	bne.n	8001c10 <main+0x80>
 8001c0c:	4b78      	ldr	r3, [pc, #480]	; (8001df0 <main+0x260>)
 8001c0e:	e000      	b.n	8001c12 <main+0x82>
 8001c10:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <main+0x280>)
 8001c12:	4a80      	ldr	r2, [pc, #512]	; (8001e14 <main+0x284>)
 8001c14:	6013      	str	r3, [r2, #0]
			drawBBuffer = drawBufferNumber == 0 ? ChannelB0 : ChannelB1;
 8001c16:	4b7d      	ldr	r3, [pc, #500]	; (8001e0c <main+0x27c>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d101      	bne.n	8001c24 <main+0x94>
 8001c20:	4b75      	ldr	r3, [pc, #468]	; (8001df8 <main+0x268>)
 8001c22:	e000      	b.n	8001c26 <main+0x96>
 8001c24:	4b7c      	ldr	r3, [pc, #496]	; (8001e18 <main+0x288>)
 8001c26:	4a7d      	ldr	r2, [pc, #500]	; (8001e1c <main+0x28c>)
 8001c28:	6013      	str	r3, [r2, #0]
		}


		if (drawing) {
 8001c2a:	4b74      	ldr	r3, [pc, #464]	; (8001dfc <main+0x26c>)
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d0c9      	beq.n	8001bc8 <main+0x38>

			// Check that the sample has been captured
			if (drawBufferNumber != captureBufferNumber || captureSamples >= drawPos) {
 8001c34:	4b75      	ldr	r3, [pc, #468]	; (8001e0c <main+0x27c>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <main+0x278>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d108      	bne.n	8001c56 <main+0xc6>
 8001c44:	4b76      	ldr	r3, [pc, #472]	; (8001e20 <main+0x290>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	b21b      	sxth	r3, r3
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4b6d      	ldr	r3, [pc, #436]	; (8001e04 <main+0x274>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	b29b      	uxth	r3, r3
 8001c52:	429a      	cmp	r2, r3
 8001c54:	db01      	blt.n	8001c5a <main+0xca>
 8001c56:	2301      	movs	r3, #1
 8001c58:	e000      	b.n	8001c5c <main+0xcc>
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0b3      	beq.n	8001bc8 <main+0x38>

				// Calculate offset between capture and drawing positions to display correct sample
				uint16_t calculatedOffset = drawOffset[drawBufferNumber] + drawPos;
 8001c60:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <main+0x27c>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <main+0x294>)
 8001c6a:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	4b64      	ldr	r3, [pc, #400]	; (8001e04 <main+0x274>)
 8001c72:	881b      	ldrh	r3, [r3, #0]
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	4413      	add	r3, r2
 8001c78:	80fb      	strh	r3, [r7, #6]
				if (calculatedOffset >= OSCWIDTH) calculatedOffset = calculatedOffset - OSCWIDTH;
 8001c7a:	88fb      	ldrh	r3, [r7, #6]
 8001c7c:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001c80:	db03      	blt.n	8001c8a <main+0xfa>
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001c88:	80fb      	strh	r3, [r7, #6]

				// Set previous pixel to current pixel if starting a new screen
				if (drawPos == 0) {
 8001c8a:	4b5e      	ldr	r3, [pc, #376]	; (8001e04 <main+0x274>)
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	bf0c      	ite	eq
 8001c94:	2301      	moveq	r3, #1
 8001c96:	2300      	movne	r3, #0
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d011      	beq.n	8001cc2 <main+0x132>
					prevAPixel = drawABuffer[calculatedOffset];
 8001c9e:	4b5d      	ldr	r3, [pc, #372]	; (8001e14 <main+0x284>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	88fb      	ldrh	r3, [r7, #6]
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	4413      	add	r3, r2
 8001ca8:	881b      	ldrh	r3, [r3, #0]
 8001caa:	b29a      	uxth	r2, r3
 8001cac:	4b5e      	ldr	r3, [pc, #376]	; (8001e28 <main+0x298>)
 8001cae:	801a      	strh	r2, [r3, #0]
					prevBPixel = drawBBuffer[calculatedOffset];
 8001cb0:	4b5a      	ldr	r3, [pc, #360]	; (8001e1c <main+0x28c>)
 8001cb2:	681a      	ldr	r2, [r3, #0]
 8001cb4:	88fb      	ldrh	r3, [r7, #6]
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	b29a      	uxth	r2, r3
 8001cbe:	4b5b      	ldr	r3, [pc, #364]	; (8001e2c <main+0x29c>)
 8001cc0:	801a      	strh	r2, [r3, #0]
				}

				// Draw a black line over previous sample
				TM_ILI9341_DrawLine(drawPos, 0, drawPos, 239, LCD_BLACK);
 8001cc2:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <main+0x274>)
 8001cc4:	881b      	ldrh	r3, [r3, #0]
 8001cc6:	b298      	uxth	r0, r3
 8001cc8:	4b4e      	ldr	r3, [pc, #312]	; (8001e04 <main+0x274>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	2300      	movs	r3, #0
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	23ef      	movs	r3, #239	; 0xef
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	f000 fc91 	bl	80025fc <_Z19TM_ILI9341_DrawLinettttm>

				// Draw current samples as lines from previous pixel position to current sample position
				TM_ILI9341_DrawLine(drawPos, drawABuffer[calculatedOffset], drawPos, prevAPixel, LCD_GREEN);
 8001cda:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <main+0x274>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	b298      	uxth	r0, r3
 8001ce0:	4b4c      	ldr	r3, [pc, #304]	; (8001e14 <main+0x284>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	4413      	add	r3, r2
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	b299      	uxth	r1, r3
 8001cee:	4b45      	ldr	r3, [pc, #276]	; (8001e04 <main+0x274>)
 8001cf0:	881b      	ldrh	r3, [r3, #0]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <main+0x298>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	b29c      	uxth	r4, r3
 8001cfa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	4623      	mov	r3, r4
 8001d02:	f000 fc7b 	bl	80025fc <_Z19TM_ILI9341_DrawLinettttm>
				TM_ILI9341_DrawLine(drawPos, drawBBuffer[calculatedOffset], drawPos, prevBPixel, LCD_LIGHTBLUE);
 8001d06:	4b3f      	ldr	r3, [pc, #252]	; (8001e04 <main+0x274>)
 8001d08:	881b      	ldrh	r3, [r3, #0]
 8001d0a:	b298      	uxth	r0, r3
 8001d0c:	4b43      	ldr	r3, [pc, #268]	; (8001e1c <main+0x28c>)
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4413      	add	r3, r2
 8001d16:	881b      	ldrh	r3, [r3, #0]
 8001d18:	b299      	uxth	r1, r3
 8001d1a:	4b3a      	ldr	r3, [pc, #232]	; (8001e04 <main+0x274>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b42      	ldr	r3, [pc, #264]	; (8001e2c <main+0x29c>)
 8001d22:	881b      	ldrh	r3, [r3, #0]
 8001d24:	b29c      	uxth	r4, r3
 8001d26:	f240 531d 	movw	r3, #1309	; 0x51d
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	4623      	mov	r3, r4
 8001d2e:	f000 fc65 	bl	80025fc <_Z19TM_ILI9341_DrawLinettttm>

				// Store previous sample so next sample can be drawn as a line from old to new
				prevAPixel = drawABuffer[calculatedOffset];
 8001d32:	4b38      	ldr	r3, [pc, #224]	; (8001e14 <main+0x284>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	88fb      	ldrh	r3, [r7, #6]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	881b      	ldrh	r3, [r3, #0]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b39      	ldr	r3, [pc, #228]	; (8001e28 <main+0x298>)
 8001d42:	801a      	strh	r2, [r3, #0]
				prevBPixel = drawBBuffer[calculatedOffset];
 8001d44:	4b35      	ldr	r3, [pc, #212]	; (8001e1c <main+0x28c>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4413      	add	r3, r2
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	4b36      	ldr	r3, [pc, #216]	; (8001e2c <main+0x29c>)
 8001d54:	801a      	strh	r2, [r3, #0]


				drawPos ++;
 8001d56:	4b2b      	ldr	r3, [pc, #172]	; (8001e04 <main+0x274>)
 8001d58:	881b      	ldrh	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	3301      	adds	r3, #1
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b28      	ldr	r3, [pc, #160]	; (8001e04 <main+0x274>)
 8001d62:	801a      	strh	r2, [r3, #0]
				if (drawPos == OSCWIDTH) drawing = false;
 8001d64:	4b27      	ldr	r3, [pc, #156]	; (8001e04 <main+0x274>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b29b      	uxth	r3, r3
 8001d6a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001d6e:	bf0c      	ite	eq
 8001d70:	2301      	moveq	r3, #1
 8001d72:	2300      	movne	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d002      	beq.n	8001d80 <main+0x1f0>
 8001d7a:	4b20      	ldr	r3, [pc, #128]	; (8001dfc <main+0x26c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]

				// Draw trigger as a yellow cross
				if (drawPos == trigger.x + 4) {
 8001d80:	4b20      	ldr	r3, [pc, #128]	; (8001e04 <main+0x274>)
 8001d82:	881b      	ldrh	r3, [r3, #0]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	461a      	mov	r2, r3
 8001d88:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <main+0x2a0>)
 8001d8a:	881b      	ldrh	r3, [r3, #0]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	bf0c      	ite	eq
 8001d92:	2301      	moveq	r3, #1
 8001d94:	2300      	movne	r3, #0
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f43f af15 	beq.w	8001bc8 <main+0x38>
					TM_ILI9341_DrawLine(trigger.x, trigger.y - 4, trigger.x, trigger.y + 4, LCD_YELLOW);
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <main+0x2a0>)
 8001da0:	8818      	ldrh	r0, [r3, #0]
 8001da2:	4b23      	ldr	r3, [pc, #140]	; (8001e30 <main+0x2a0>)
 8001da4:	885b      	ldrh	r3, [r3, #2]
 8001da6:	3b04      	subs	r3, #4
 8001da8:	b299      	uxth	r1, r3
 8001daa:	4b21      	ldr	r3, [pc, #132]	; (8001e30 <main+0x2a0>)
 8001dac:	881a      	ldrh	r2, [r3, #0]
 8001dae:	4b20      	ldr	r3, [pc, #128]	; (8001e30 <main+0x2a0>)
 8001db0:	885b      	ldrh	r3, [r3, #2]
 8001db2:	3304      	adds	r3, #4
 8001db4:	b29c      	uxth	r4, r3
 8001db6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	4623      	mov	r3, r4
 8001dbe:	f000 fc1d 	bl	80025fc <_Z19TM_ILI9341_DrawLinettttm>
					TM_ILI9341_DrawLine(trigger.x - 4, trigger.y, trigger.x + 4, trigger.y, LCD_YELLOW);
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <main+0x2a0>)
 8001dc4:	881b      	ldrh	r3, [r3, #0]
 8001dc6:	3b04      	subs	r3, #4
 8001dc8:	b298      	uxth	r0, r3
 8001dca:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <main+0x2a0>)
 8001dcc:	8859      	ldrh	r1, [r3, #2]
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <main+0x2a0>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	b29a      	uxth	r2, r3
 8001dd6:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <main+0x2a0>)
 8001dd8:	885c      	ldrh	r4, [r3, #2]
 8001dda:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001dde:	9300      	str	r3, [sp, #0]
 8001de0:	4623      	mov	r3, r4
 8001de2:	f000 fc0b 	bl	80025fc <_Z19TM_ILI9341_DrawLinettttm>

			}
		}


	}
 8001de6:	e6ef      	b.n	8001bc8 <main+0x38>
 8001de8:	20000ad4 	.word	0x20000ad4
 8001dec:	20000ab0 	.word	0x20000ab0
 8001df0:	200000b0 	.word	0x200000b0
 8001df4:	20000ab4 	.word	0x20000ab4
 8001df8:	200005b0 	.word	0x200005b0
 8001dfc:	20000acc 	.word	0x20000acc
 8001e00:	20000ac8 	.word	0x20000ac8
 8001e04:	20000ac2 	.word	0x20000ac2
 8001e08:	20000acd 	.word	0x20000acd
 8001e0c:	20000ace 	.word	0x20000ace
 8001e10:	20000330 	.word	0x20000330
 8001e14:	20000ab8 	.word	0x20000ab8
 8001e18:	20000830 	.word	0x20000830
 8001e1c:	20000abc 	.word	0x20000abc
 8001e20:	20000aca 	.word	0x20000aca
 8001e24:	20000ad0 	.word	0x20000ad0
 8001e28:	20000ac4 	.word	0x20000ac4
 8001e2c:	20000ac6 	.word	0x20000ac6
 8001e30:	20000000 	.word	0x20000000

08001e34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e6c <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e38:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e3a:	e003      	b.n	8001e44 <LoopCopyDataInit>

08001e3c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e3e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e40:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e42:	3104      	adds	r1, #4

08001e44 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e44:	480b      	ldr	r0, [pc, #44]	; (8001e74 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e46:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e48:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e4a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e4c:	d3f6      	bcc.n	8001e3c <CopyDataInit>
  ldr  r2, =_sbss
 8001e4e:	4a0b      	ldr	r2, [pc, #44]	; (8001e7c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e50:	e002      	b.n	8001e58 <LoopFillZerobss>

08001e52 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e52:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e54:	f842 3b04 	str.w	r3, [r2], #4

08001e58 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e5a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e5c:	d3f9      	bcc.n	8001e52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e5e:	f000 f841 	bl	8001ee4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e62:	f000 fdfd 	bl	8002a60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e66:	f7ff fe93 	bl	8001b90 <main>
  bx  lr    
 8001e6a:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e6c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001e70:	08002ef8 	.word	0x08002ef8
  ldr  r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e78:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001e7c:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001e80:	20000b94 	.word	0x20000b94

08001e84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e84:	e7fe      	b.n	8001e84 <ADC_IRQHandler>

08001e86 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001e98:	e7fe      	b.n	8001e98 <HardFault_Handler+0x4>

08001e9a <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001e9e:	e7fe      	b.n	8001e9e <MemManage_Handler+0x4>

08001ea0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <BusFault_Handler+0x4>

08001ea6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001eaa:	e7fe      	b.n	8001eaa <UsageFault_Handler+0x4>

08001eac <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
}
 8001eb0:	bf00      	nop
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ee8:	4a16      	ldr	r2, [pc, #88]	; (8001f44 <SystemInit+0x60>)
 8001eea:	4b16      	ldr	r3, [pc, #88]	; (8001f44 <SystemInit+0x60>)
 8001eec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ef4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001ef8:	4a13      	ldr	r2, [pc, #76]	; (8001f48 <SystemInit+0x64>)
 8001efa:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <SystemInit+0x64>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001f04:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <SystemInit+0x64>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <SystemInit+0x64>)
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <SystemInit+0x64>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001f14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f18:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001f1a:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <SystemInit+0x64>)
 8001f1c:	4a0b      	ldr	r2, [pc, #44]	; (8001f4c <SystemInit+0x68>)
 8001f1e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001f20:	4a09      	ldr	r2, [pc, #36]	; (8001f48 <SystemInit+0x64>)
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <SystemInit+0x64>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <SystemInit+0x64>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8001f32:	f000 f889 	bl	8002048 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f36:	4b03      	ldr	r3, [pc, #12]	; (8001f44 <SystemInit+0x60>)
 8001f38:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f3c:	609a      	str	r2, [r3, #8]
#endif
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	e000ed00 	.word	0xe000ed00
 8001f48:	40023800 	.word	0x40023800
 8001f4c:	24003010 	.word	0x24003010

08001f50 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b087      	sub	sp, #28
 8001f54:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001f56:	2300      	movs	r3, #0
 8001f58:	613b      	str	r3, [r7, #16]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	2302      	movs	r3, #2
 8001f60:	60fb      	str	r3, [r7, #12]
 8001f62:	2300      	movs	r3, #0
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	2302      	movs	r3, #2
 8001f68:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <SystemCoreClockUpdate+0xe4>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	2b04      	cmp	r3, #4
 8001f78:	d007      	beq.n	8001f8a <SystemCoreClockUpdate+0x3a>
 8001f7a:	2b08      	cmp	r3, #8
 8001f7c:	d009      	beq.n	8001f92 <SystemCoreClockUpdate+0x42>
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d13d      	bne.n	8001ffe <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <SystemCoreClockUpdate+0xe8>)
 8001f84:	4a2d      	ldr	r2, [pc, #180]	; (800203c <SystemCoreClockUpdate+0xec>)
 8001f86:	601a      	str	r2, [r3, #0]
      break;
 8001f88:	e03d      	b.n	8002006 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001f8a:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <SystemCoreClockUpdate+0xe8>)
 8001f8c:	4a2c      	ldr	r2, [pc, #176]	; (8002040 <SystemCoreClockUpdate+0xf0>)
 8001f8e:	601a      	str	r2, [r3, #0]
      break;
 8001f90:	e039      	b.n	8002006 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8001f92:	4b28      	ldr	r3, [pc, #160]	; (8002034 <SystemCoreClockUpdate+0xe4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	0d9b      	lsrs	r3, r3, #22
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <SystemCoreClockUpdate+0xe4>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001fa6:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00c      	beq.n	8001fc8 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8001fae:	4a24      	ldr	r2, [pc, #144]	; (8002040 <SystemCoreClockUpdate+0xf0>)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fb6:	4a1f      	ldr	r2, [pc, #124]	; (8002034 <SystemCoreClockUpdate+0xe4>)
 8001fb8:	6852      	ldr	r2, [r2, #4]
 8001fba:	0992      	lsrs	r2, r2, #6
 8001fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e00b      	b.n	8001fe0 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001fc8:	4a1c      	ldr	r2, [pc, #112]	; (800203c <SystemCoreClockUpdate+0xec>)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	4a18      	ldr	r2, [pc, #96]	; (8002034 <SystemCoreClockUpdate+0xe4>)
 8001fd2:	6852      	ldr	r2, [r2, #4]
 8001fd4:	0992      	lsrs	r2, r2, #6
 8001fd6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fda:	fb02 f303 	mul.w	r3, r2, r3
 8001fde:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <SystemCoreClockUpdate+0xe4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	0c1b      	lsrs	r3, r3, #16
 8001fe6:	f003 0303 	and.w	r3, r3, #3
 8001fea:	3301      	adds	r3, #1
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8001ff0:	697a      	ldr	r2, [r7, #20]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff8:	4a0f      	ldr	r2, [pc, #60]	; (8002038 <SystemCoreClockUpdate+0xe8>)
 8001ffa:	6013      	str	r3, [r2, #0]
      break;
 8001ffc:	e003      	b.n	8002006 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <SystemCoreClockUpdate+0xe8>)
 8002000:	4a0e      	ldr	r2, [pc, #56]	; (800203c <SystemCoreClockUpdate+0xec>)
 8002002:	601a      	str	r2, [r3, #0]
      break;
 8002004:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <SystemCoreClockUpdate+0xe4>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <SystemCoreClockUpdate+0xf4>)
 8002012:	5cd3      	ldrb	r3, [r2, r3]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <SystemCoreClockUpdate+0xe8>)
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	693b      	ldr	r3, [r7, #16]
 800201e:	fa22 f303 	lsr.w	r3, r2, r3
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <SystemCoreClockUpdate+0xe8>)
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40023800 	.word	0x40023800
 8002038:	20000004 	.word	0x20000004
 800203c:	00f42400 	.word	0x00f42400
 8002040:	007a1200 	.word	0x007a1200
 8002044:	20000008 	.word	0x20000008

08002048 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8002056:	4a36      	ldr	r2, [pc, #216]	; (8002130 <SetSysClock+0xe8>)
 8002058:	4b35      	ldr	r3, [pc, #212]	; (8002130 <SetSysClock+0xe8>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002060:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8002062:	4b33      	ldr	r3, [pc, #204]	; (8002130 <SetSysClock+0xe8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3301      	adds	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d103      	bne.n	8002080 <SetSysClock+0x38>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800207e:	d1f0      	bne.n	8002062 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8002080:	4b2b      	ldr	r3, [pc, #172]	; (8002130 <SetSysClock+0xe8>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d002      	beq.n	8002092 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800208c:	2301      	movs	r3, #1
 800208e:	603b      	str	r3, [r7, #0]
 8002090:	e001      	b.n	8002096 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8002092:	2300      	movs	r3, #0
 8002094:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <SetSysClock+0xe8>)
 800209e:	4a25      	ldr	r2, [pc, #148]	; (8002134 <SetSysClock+0xec>)
 80020a0:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80020a2:	4a23      	ldr	r2, [pc, #140]	; (8002130 <SetSysClock+0xe8>)
 80020a4:	4b22      	ldr	r3, [pc, #136]	; (8002130 <SetSysClock+0xe8>)
 80020a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 80020ae:	4a22      	ldr	r2, [pc, #136]	; (8002138 <SetSysClock+0xf0>)
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <SetSysClock+0xf0>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80020b8:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80020ba:	4a1d      	ldr	r2, [pc, #116]	; (8002130 <SetSysClock+0xe8>)
 80020bc:	4b1c      	ldr	r3, [pc, #112]	; (8002130 <SetSysClock+0xe8>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80020c2:	4a1b      	ldr	r2, [pc, #108]	; (8002130 <SetSysClock+0xe8>)
 80020c4:	4b1a      	ldr	r3, [pc, #104]	; (8002130 <SetSysClock+0xe8>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020cc:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80020ce:	4a18      	ldr	r2, [pc, #96]	; (8002130 <SetSysClock+0xe8>)
 80020d0:	4b17      	ldr	r3, [pc, #92]	; (8002130 <SetSysClock+0xe8>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80020d8:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80020da:	4a15      	ldr	r2, [pc, #84]	; (8002130 <SetSysClock+0xe8>)
 80020dc:	4b14      	ldr	r3, [pc, #80]	; (8002130 <SetSysClock+0xe8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020e4:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80020e6:	bf00      	nop
 80020e8:	4b11      	ldr	r3, [pc, #68]	; (8002130 <SetSysClock+0xe8>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d0f9      	beq.n	80020e8 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 80020f4:	4b11      	ldr	r3, [pc, #68]	; (800213c <SetSysClock+0xf4>)
 80020f6:	f240 7205 	movw	r2, #1797	; 0x705
 80020fa:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80020fc:	4a0c      	ldr	r2, [pc, #48]	; (8002130 <SetSysClock+0xe8>)
 80020fe:	4b0c      	ldr	r3, [pc, #48]	; (8002130 <SetSysClock+0xe8>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8002108:	4a09      	ldr	r2, [pc, #36]	; (8002130 <SetSysClock+0xe8>)
 800210a:	4b09      	ldr	r3, [pc, #36]	; (8002130 <SetSysClock+0xe8>)
 800210c:	689b      	ldr	r3, [r3, #8]
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8002114:	bf00      	nop
 8002116:	4b06      	ldr	r3, [pc, #24]	; (8002130 <SetSysClock+0xe8>)
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	f003 030c 	and.w	r3, r3, #12
 800211e:	2b08      	cmp	r3, #8
 8002120:	d1f9      	bne.n	8002116 <SetSysClock+0xce>
    {
    }
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40023800 	.word	0x40023800
 8002134:	07405a08 	.word	0x07405a08
 8002138:	40007000 	.word	0x40007000
 800213c:	40023c00 	.word	0x40023c00

08002140 <_ZL11DW_SPI_Sendh>:
uint8_t ILI9341_INT_CalledFromPuts = 0;

uint16_t DMAint16;		// dummy variable for 16 bit DMA transfers

//  Send single byte over SPI
static __INLINE void DW_SPI_Send(uint8_t data) {
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	71fb      	strb	r3, [r7, #7]
	while ((SPI5->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || (SPI5->SR & SPI_SR_BSY));	// Wait for previous transmissions to complete if DMA TX enabled for SPI
 800214a:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <_ZL11DW_SPI_Sendh+0x70>)
 800214c:	891b      	ldrh	r3, [r3, #8]
 800214e:	b29b      	uxth	r3, r3
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b00      	cmp	r3, #0
 8002156:	d006      	beq.n	8002166 <_ZL11DW_SPI_Sendh+0x26>
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_ZL11DW_SPI_Sendh+0x70>)
 800215a:	891b      	ldrh	r3, [r3, #8]
 800215c:	b29b      	uxth	r3, r3
 800215e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <_ZL11DW_SPI_Sendh+0x2a>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <_ZL11DW_SPI_Sendh+0x2c>
 800216a:	2300      	movs	r3, #0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d000      	beq.n	8002172 <_ZL11DW_SPI_Sendh+0x32>
 8002170:	e7eb      	b.n	800214a <_ZL11DW_SPI_Sendh+0xa>

	SPI5->DR = data;					// Fill output buffer with data
 8002172:	4b0f      	ldr	r3, [pc, #60]	; (80021b0 <_ZL11DW_SPI_Sendh+0x70>)
 8002174:	79fa      	ldrb	r2, [r7, #7]
 8002176:	b292      	uxth	r2, r2
 8002178:	819a      	strh	r2, [r3, #12]

	while ((SPI5->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || (SPI5->SR & SPI_SR_BSY));	// Wait for transmission to complete
 800217a:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <_ZL11DW_SPI_Sendh+0x70>)
 800217c:	891b      	ldrh	r3, [r3, #8]
 800217e:	b29b      	uxth	r3, r3
 8002180:	f003 0303 	and.w	r3, r3, #3
 8002184:	2b00      	cmp	r3, #0
 8002186:	d006      	beq.n	8002196 <_ZL11DW_SPI_Sendh+0x56>
 8002188:	4b09      	ldr	r3, [pc, #36]	; (80021b0 <_ZL11DW_SPI_Sendh+0x70>)
 800218a:	891b      	ldrh	r3, [r3, #8]
 800218c:	b29b      	uxth	r3, r3
 800218e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <_ZL11DW_SPI_Sendh+0x5a>
 8002196:	2301      	movs	r3, #1
 8002198:	e000      	b.n	800219c <_ZL11DW_SPI_Sendh+0x5c>
 800219a:	2300      	movs	r3, #0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d000      	beq.n	80021a2 <_ZL11DW_SPI_Sendh+0x62>
 80021a0:	e7eb      	b.n	800217a <_ZL11DW_SPI_Sendh+0x3a>
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40015000 	.word	0x40015000

080021b4 <_Z22TM_ILI9341_SendCommandh>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 80021be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021c2:	4809      	ldr	r0, [pc, #36]	; (80021e8 <_Z22TM_ILI9341_SendCommandh+0x34>)
 80021c4:	f7fe f821 	bl	800020a <GPIO_ResetBits>
	ILI9341_CS_RESET;
 80021c8:	2104      	movs	r1, #4
 80021ca:	4808      	ldr	r0, [pc, #32]	; (80021ec <_Z22TM_ILI9341_SendCommandh+0x38>)
 80021cc:	f7fe f81d 	bl	800020a <GPIO_ResetBits>
	DW_SPI_Send(data);
 80021d0:	79fb      	ldrb	r3, [r7, #7]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ffb4 	bl	8002140 <_ZL11DW_SPI_Sendh>
	ILI9341_CS_SET;
 80021d8:	2104      	movs	r1, #4
 80021da:	4804      	ldr	r0, [pc, #16]	; (80021ec <_Z22TM_ILI9341_SendCommandh+0x38>)
 80021dc:	f7fe f806 	bl	80001ec <GPIO_SetBits>
}
 80021e0:	bf00      	nop
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40020c00 	.word	0x40020c00
 80021ec:	40020800 	.word	0x40020800

080021f0 <_Z19TM_ILI9341_SendDatah>:

void TM_ILI9341_SendData(uint8_t data) {
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	4603      	mov	r3, r0
 80021f8:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 80021fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021fe:	4809      	ldr	r0, [pc, #36]	; (8002224 <_Z19TM_ILI9341_SendDatah+0x34>)
 8002200:	f7fd fff4 	bl	80001ec <GPIO_SetBits>
	ILI9341_CS_RESET;
 8002204:	2104      	movs	r1, #4
 8002206:	4808      	ldr	r0, [pc, #32]	; (8002228 <_Z19TM_ILI9341_SendDatah+0x38>)
 8002208:	f7fd ffff 	bl	800020a <GPIO_ResetBits>
	DW_SPI_Send(data);
 800220c:	79fb      	ldrb	r3, [r7, #7]
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff ff96 	bl	8002140 <_ZL11DW_SPI_Sendh>
	ILI9341_CS_SET;
 8002214:	2104      	movs	r1, #4
 8002216:	4804      	ldr	r0, [pc, #16]	; (8002228 <_Z19TM_ILI9341_SendDatah+0x38>)
 8002218:	f7fd ffe8 	bl	80001ec <GPIO_SetBits>
}
 800221c:	bf00      	nop
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40020c00 	.word	0x40020c00
 8002228:	40020800 	.word	0x40020800

0800222c <_Z23DW_SPI_DMA_SendHalfWordtt>:



uint8_t DW_SPI_DMA_SendHalfWord(uint16_t value, uint16_t count) {
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	460a      	mov	r2, r1
 8002236:	80fb      	strh	r3, [r7, #6]
 8002238:	4613      	mov	r3, r2
 800223a:	80bb      	strh	r3, [r7, #4]

	if (DMA2_Stream6->NDTR)							// Check number of data items to transfer is zero (ie stream is free)
 800223c:	4b26      	ldr	r3, [pc, #152]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	2b00      	cmp	r3, #0
 8002242:	bf14      	ite	ne
 8002244:	2301      	movne	r3, #1
 8002246:	2300      	moveq	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <_Z23DW_SPI_DMA_SendHalfWordtt+0x26>
		return 0;
 800224e:	2300      	movs	r3, #0
 8002250:	e03c      	b.n	80022cc <_Z23DW_SPI_DMA_SendHalfWordtt+0xa0>

	DMAint16 = value;								// data to transfer - use public variable so does not go out of scope
 8002252:	4a22      	ldr	r2, [pc, #136]	; (80022dc <_Z23DW_SPI_DMA_SendHalfWordtt+0xb0>)
 8002254:	88fb      	ldrh	r3, [r7, #6]
 8002256:	8013      	strh	r3, [r2, #0]

	// Clear DMA Stream 6 flags using high interrupt flag clear register
	DMA2->HIFCR = DMA_HIFCR_CFEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTCIF6;
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <_Z23DW_SPI_DMA_SendHalfWordtt+0xb4>)
 800225a:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 800225e:	60da      	str	r2, [r3, #12]

	// Initialise TX stream
	DMA2_Stream6->CR |= DMA_SxCR_CHSEL;				// 0b111 is channel 7
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 800226a:	6013      	str	r3, [r2, #0]
	DMA2_Stream6->CR |= DMA_SxCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 800226c:	4a1a      	ldr	r2, [pc, #104]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 800226e:	4b1a      	ldr	r3, [pc, #104]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002276:	6013      	str	r3, [r2, #0]
	DMA2_Stream6->CR |= DMA_SxCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 8002278:	4a17      	ldr	r2, [pc, #92]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 800227a:	4b17      	ldr	r3, [pc, #92]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002282:	6013      	str	r3, [r2, #0]
	DMA2_Stream6->CR |= DMA_SxCR_DIR_0;				// data transfer direction: 00: peripheral-to-memory; 01: memory-to-peripheral; 10: memory-to-memory
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 8002286:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800228e:	6013      	str	r3, [r2, #0]
	DMA2_Stream6->CR &= ~DMA_SxCR_MINC;				// Memory in increment mode
 8002290:	4a11      	ldr	r2, [pc, #68]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 8002292:	4b11      	ldr	r3, [pc, #68]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800229a:	6013      	str	r3, [r2, #0]

	DMA2_Stream6->NDTR = count;						// Number of data items to transfer
 800229c:	4a0e      	ldr	r2, [pc, #56]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 800229e:	88bb      	ldrh	r3, [r7, #4]
 80022a0:	6053      	str	r3, [r2, #4]
	DMA2_Stream6->PAR = (uint32_t) &(SPI5->DR);		// Configure the peripheral data register address
 80022a2:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80022a4:	4a0f      	ldr	r2, [pc, #60]	; (80022e4 <_Z23DW_SPI_DMA_SendHalfWordtt+0xb8>)
 80022a6:	609a      	str	r2, [r3, #8]
	DMA2_Stream6->M0AR = (uint32_t) &DMAint16;		// DMA_InitStruct.DMA_Memory0BaseAddr;
 80022a8:	4b0b      	ldr	r3, [pc, #44]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80022aa:	4a0c      	ldr	r2, [pc, #48]	; (80022dc <_Z23DW_SPI_DMA_SendHalfWordtt+0xb0>)
 80022ac:	60da      	str	r2, [r3, #12]

	DMA2_Stream6->CR |= DMA_SxCR_EN;				// Enable DMA transfer stream
 80022ae:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80022b0:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	6013      	str	r3, [r2, #0]
	SPI5->CR2 |= SPI_CR2_TXDMAEN;					// Enable SPI TX DMA
 80022ba:	4a0b      	ldr	r2, [pc, #44]	; (80022e8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xbc>)
 80022bc:	4b0a      	ldr	r3, [pc, #40]	; (80022e8 <_Z23DW_SPI_DMA_SendHalfWordtt+0xbc>)
 80022be:	889b      	ldrh	r3, [r3, #4]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	f043 0302 	orr.w	r3, r3, #2
 80022c6:	b29b      	uxth	r3, r3
 80022c8:	8093      	strh	r3, [r2, #4]

	return 1;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	400264a0 	.word	0x400264a0
 80022dc:	20000ade 	.word	0x20000ade
 80022e0:	40026400 	.word	0x40026400
 80022e4:	4001500c 	.word	0x4001500c
 80022e8:	40015000 	.word	0x40015000

080022ec <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t>:

void DW_SPI_SetDataSize(DW_SPI_DataSize_t Mode) {
 80022ec:	b480      	push	{r7}
 80022ee:	b083      	sub	sp, #12
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	4603      	mov	r3, r0
 80022f4:	71fb      	strb	r3, [r7, #7]

	SPI5->CR1 &= ~SPI_CR1_SPE;						// Disable SPI
 80022f6:	4a15      	ldr	r2, [pc, #84]	; (800234c <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 80022f8:	4b14      	ldr	r3, [pc, #80]	; (800234c <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 80022fa:	881b      	ldrh	r3, [r3, #0]
 80022fc:	b29b      	uxth	r3, r3
 80022fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002302:	b29b      	uxth	r3, r3
 8002304:	8013      	strh	r3, [r2, #0]

	if (Mode == DW_SPI_DataSize_16b) {
 8002306:	79fb      	ldrb	r3, [r7, #7]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d108      	bne.n	800231e <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x32>
		SPI5->CR1 |= SPI_CR1_DFF;					// Data frame format: 0: 8-bit data frame format; 1: 16-bit data frame format
 800230c:	4a0f      	ldr	r2, [pc, #60]	; (800234c <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 800230e:	4b0f      	ldr	r3, [pc, #60]	; (800234c <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002318:	b29b      	uxth	r3, r3
 800231a:	8013      	strh	r3, [r2, #0]
 800231c:	e007      	b.n	800232e <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x42>
	} else {
		SPI5->CR1 &= ~SPI_CR1_DFF;
 800231e:	4a0b      	ldr	r2, [pc, #44]	; (800234c <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8002320:	4b0a      	ldr	r3, [pc, #40]	; (800234c <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	b29b      	uxth	r3, r3
 8002326:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800232a:	b29b      	uxth	r3, r3
 800232c:	8013      	strh	r3, [r2, #0]
	}

	SPI5->CR1 |= SPI_CR1_SPE;						// Re-enable SPI
 800232e:	4a07      	ldr	r2, [pc, #28]	; (800234c <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8002332:	881b      	ldrh	r3, [r3, #0]
 8002334:	b29b      	uxth	r3, r3
 8002336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800233a:	b29b      	uxth	r3, r3
 800233c:	8013      	strh	r3, [r2, #0]
}
 800233e:	bf00      	nop
 8002340:	370c      	adds	r7, #12
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	40015000 	.word	0x40015000

08002350 <_Z18DW_SPI_DMA_Workingv>:

// Check if either send or receive registers have data or SPI is busy
uint8_t DW_SPI_DMA_Working(void) {
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
	return DMA2_Stream5->NDTR || DMA2_Stream6->NDTR || ((SPI5->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || (SPI5->SR & SPI_SR_BSY));
 8002354:	4b0e      	ldr	r3, [pc, #56]	; (8002390 <_Z18DW_SPI_DMA_Workingv+0x40>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d111      	bne.n	8002380 <_Z18DW_SPI_DMA_Workingv+0x30>
 800235c:	4b0d      	ldr	r3, [pc, #52]	; (8002394 <_Z18DW_SPI_DMA_Workingv+0x44>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10d      	bne.n	8002380 <_Z18DW_SPI_DMA_Workingv+0x30>
 8002364:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <_Z18DW_SPI_DMA_Workingv+0x48>)
 8002366:	891b      	ldrh	r3, [r3, #8]
 8002368:	b29b      	uxth	r3, r3
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <_Z18DW_SPI_DMA_Workingv+0x30>
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <_Z18DW_SPI_DMA_Workingv+0x48>)
 8002374:	891b      	ldrh	r3, [r3, #8]
 8002376:	b29b      	uxth	r3, r3
 8002378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <_Z18DW_SPI_DMA_Workingv+0x34>
 8002380:	2301      	movs	r3, #1
 8002382:	e000      	b.n	8002386 <_Z18DW_SPI_DMA_Workingv+0x36>
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr
 8002390:	40026488 	.word	0x40026488
 8002394:	400264a0 	.word	0x400264a0
 8002398:	40015000 	.word	0x40015000

0800239c <_Z20TM_ILI9341_DrawPixelttm>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	603a      	str	r2, [r7, #0]
 80023a6:	80fb      	strh	r3, [r7, #6]
 80023a8:	460b      	mov	r3, r1
 80023aa:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 80023ac:	88bb      	ldrh	r3, [r7, #4]
 80023ae:	88fa      	ldrh	r2, [r7, #6]
 80023b0:	88b9      	ldrh	r1, [r7, #4]
 80023b2:	88f8      	ldrh	r0, [r7, #6]
 80023b4:	f000 f812 	bl	80023dc <_Z28TM_ILI9341_SetCursorPositiontttt>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80023b8:	202c      	movs	r0, #44	; 0x2c
 80023ba:	f7ff fefb 	bl	80021b4 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(color >> 8);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	0a1b      	lsrs	r3, r3, #8
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff13 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(color & 0xFF);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	4618      	mov	r0, r3
 80023d0:	f7ff ff0e 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
}
 80023d4:	bf00      	nop
 80023d6:	3708      	adds	r7, #8
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_Z28TM_ILI9341_SetCursorPositiontttt>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80023dc:	b590      	push	{r4, r7, lr}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4604      	mov	r4, r0
 80023e4:	4608      	mov	r0, r1
 80023e6:	4611      	mov	r1, r2
 80023e8:	461a      	mov	r2, r3
 80023ea:	4623      	mov	r3, r4
 80023ec:	80fb      	strh	r3, [r7, #6]
 80023ee:	4603      	mov	r3, r0
 80023f0:	80bb      	strh	r3, [r7, #4]
 80023f2:	460b      	mov	r3, r1
 80023f4:	807b      	strh	r3, [r7, #2]
 80023f6:	4613      	mov	r3, r2
 80023f8:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 80023fa:	202a      	movs	r0, #42	; 0x2a
 80023fc:	f7ff feda 	bl	80021b4 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(x1 >> 8);
 8002400:	88fb      	ldrh	r3, [r7, #6]
 8002402:	121b      	asrs	r3, r3, #8
 8002404:	b2db      	uxtb	r3, r3
 8002406:	4618      	mov	r0, r3
 8002408:	f7ff fef2 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(x1 & 0xFF);
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	b2db      	uxtb	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff feed 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(x2 >> 8);
 8002416:	887b      	ldrh	r3, [r7, #2]
 8002418:	121b      	asrs	r3, r3, #8
 800241a:	b2db      	uxtb	r3, r3
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fee7 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(x2 & 0xFF);
 8002422:	887b      	ldrh	r3, [r7, #2]
 8002424:	b2db      	uxtb	r3, r3
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fee2 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 800242c:	202b      	movs	r0, #43	; 0x2b
 800242e:	f7ff fec1 	bl	80021b4 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(y1 >> 8);
 8002432:	88bb      	ldrh	r3, [r7, #4]
 8002434:	121b      	asrs	r3, r3, #8
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fed9 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(y1 & 0xFF);
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	b2db      	uxtb	r3, r3
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fed4 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(y2 >> 8);
 8002448:	883b      	ldrh	r3, [r7, #0]
 800244a:	121b      	asrs	r3, r3, #8
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4618      	mov	r0, r3
 8002450:	f7ff fece 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(y2 & 0xFF);
 8002454:	883b      	ldrh	r3, [r7, #0]
 8002456:	b2db      	uxtb	r3, r3
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fec9 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
}
 800245e:	bf00      	nop
 8002460:	370c      	adds	r7, #12
 8002462:	46bd      	mov	sp, r7
 8002464:	bd90      	pop	{r4, r7, pc}
	...

08002468 <_Z15TM_ILI9341_Fillm>:

void TM_ILI9341_Fill(uint32_t color) {
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af02      	add	r7, sp, #8
 800246e:	6078      	str	r0, [r7, #4]
	/* Fill entire screen */
	TM_ILI9341_INT_Fill(0, 0, ILI9341_Opts.width - 1, ILI9341_Opts.height, color);
 8002470:	4b08      	ldr	r3, [pc, #32]	; (8002494 <_Z15TM_ILI9341_Fillm+0x2c>)
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	b29a      	uxth	r2, r3
 8002478:	4b06      	ldr	r3, [pc, #24]	; (8002494 <_Z15TM_ILI9341_Fillm+0x2c>)
 800247a:	8859      	ldrh	r1, [r3, #2]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	b29b      	uxth	r3, r3
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	460b      	mov	r3, r1
 8002484:	2100      	movs	r1, #0
 8002486:	2000      	movs	r0, #0
 8002488:	f000 f806 	bl	8002498 <_Z19TM_ILI9341_INT_Fillttttt>
}
 800248c:	bf00      	nop
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20000ad8 	.word	0x20000ad8

08002498 <_Z19TM_ILI9341_INT_Fillttttt>:

void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	b085      	sub	sp, #20
 800249c:	af00      	add	r7, sp, #0
 800249e:	4604      	mov	r4, r0
 80024a0:	4608      	mov	r0, r1
 80024a2:	4611      	mov	r1, r2
 80024a4:	461a      	mov	r2, r3
 80024a6:	4623      	mov	r3, r4
 80024a8:	80fb      	strh	r3, [r7, #6]
 80024aa:	4603      	mov	r3, r0
 80024ac:	80bb      	strh	r3, [r7, #4]
 80024ae:	460b      	mov	r3, r1
 80024b0:	807b      	strh	r3, [r7, #2]
 80024b2:	4613      	mov	r3, r2
 80024b4:	803b      	strh	r3, [r7, #0]
	uint32_t pixels_count;
	
	/* Set cursor position */
	TM_ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80024b6:	883b      	ldrh	r3, [r7, #0]
 80024b8:	887a      	ldrh	r2, [r7, #2]
 80024ba:	88b9      	ldrh	r1, [r7, #4]
 80024bc:	88f8      	ldrh	r0, [r7, #6]
 80024be:	f7ff ff8d 	bl	80023dc <_Z28TM_ILI9341_SetCursorPositiontttt>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80024c2:	202c      	movs	r0, #44	; 0x2c
 80024c4:	f7ff fe76 	bl	80021b4 <_Z22TM_ILI9341_SendCommandh>
	
	/* Calculate pixels count */
	pixels_count = (x1 - x0 + 1) * (y1 - y0 + 1);
 80024c8:	887a      	ldrh	r2, [r7, #2]
 80024ca:	88fb      	ldrh	r3, [r7, #6]
 80024cc:	1ad3      	subs	r3, r2, r3
 80024ce:	3301      	adds	r3, #1
 80024d0:	8839      	ldrh	r1, [r7, #0]
 80024d2:	88ba      	ldrh	r2, [r7, #4]
 80024d4:	1a8a      	subs	r2, r1, r2
 80024d6:	3201      	adds	r2, #1
 80024d8:	fb02 f303 	mul.w	r3, r2, r3
 80024dc:	60fb      	str	r3, [r7, #12]

	ILI9341_CS_RESET;
 80024de:	2104      	movs	r1, #4
 80024e0:	4822      	ldr	r0, [pc, #136]	; (800256c <_Z19TM_ILI9341_INT_Fillttttt+0xd4>)
 80024e2:	f7fd fe92 	bl	800020a <GPIO_ResetBits>
	ILI9341_WRX_SET;
 80024e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ea:	4821      	ldr	r0, [pc, #132]	; (8002570 <_Z19TM_ILI9341_INT_Fillttttt+0xd8>)
 80024ec:	f7fd fe7e 	bl	80001ec <GPIO_SetBits>

	DW_SPI_SetDataSize(DW_SPI_DataSize_16b);			// 16-bit SPI mode
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7ff fefb 	bl	80022ec <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t>
	
	// Send first 65535 bytes, SPI must be in 16-bit Mode
	DW_SPI_DMA_SendHalfWord(color, (pixels_count > 0xFFFF) ? 0xFFFF : pixels_count);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024fc:	4293      	cmp	r3, r2
 80024fe:	bf28      	it	cs
 8002500:	4613      	movcs	r3, r2
 8002502:	b29a      	uxth	r2, r3
 8002504:	8c3b      	ldrh	r3, [r7, #32]
 8002506:	4611      	mov	r1, r2
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff fe8f 	bl	800222c <_Z23DW_SPI_DMA_SendHalfWordtt>

	while (DW_SPI_DMA_Working());
 800250e:	f7ff ff1f 	bl	8002350 <_Z18DW_SPI_DMA_Workingv>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	bf14      	ite	ne
 8002518:	2301      	movne	r3, #1
 800251a:	2300      	moveq	r3, #0
 800251c:	b2db      	uxtb	r3, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	d000      	beq.n	8002524 <_Z19TM_ILI9341_INT_Fillttttt+0x8c>
 8002522:	e7f4      	b.n	800250e <_Z19TM_ILI9341_INT_Fillttttt+0x76>
	
	// Check if there is more data to send
	if (pixels_count > 0xFFFF) {
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800252a:	d313      	bcc.n	8002554 <_Z19TM_ILI9341_INT_Fillttttt+0xbc>
		DW_SPI_DMA_SendHalfWord(color, pixels_count - 0xFFFF);		// Send remaining data
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	b29b      	uxth	r3, r3
 8002530:	3301      	adds	r3, #1
 8002532:	b29a      	uxth	r2, r3
 8002534:	8c3b      	ldrh	r3, [r7, #32]
 8002536:	4611      	mov	r1, r2
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fe77 	bl	800222c <_Z23DW_SPI_DMA_SendHalfWordtt>

		while (DW_SPI_DMA_Working());
 800253e:	f7ff ff07 	bl	8002350 <_Z18DW_SPI_DMA_Workingv>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf14      	ite	ne
 8002548:	2301      	movne	r3, #1
 800254a:	2300      	moveq	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	2b00      	cmp	r3, #0
 8002550:	d000      	beq.n	8002554 <_Z19TM_ILI9341_INT_Fillttttt+0xbc>
 8002552:	e7f4      	b.n	800253e <_Z19TM_ILI9341_INT_Fillttttt+0xa6>
	}
	
	ILI9341_CS_SET;
 8002554:	2104      	movs	r1, #4
 8002556:	4805      	ldr	r0, [pc, #20]	; (800256c <_Z19TM_ILI9341_INT_Fillttttt+0xd4>)
 8002558:	f7fd fe48 	bl	80001ec <GPIO_SetBits>

	DW_SPI_SetDataSize(DW_SPI_DataSize_8b);				// 8 bit SPI Mode
 800255c:	2000      	movs	r0, #0
 800255e:	f7ff fec5 	bl	80022ec <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t>
}
 8002562:	bf00      	nop
 8002564:	3714      	adds	r7, #20
 8002566:	46bd      	mov	sp, r7
 8002568:	bd90      	pop	{r4, r7, pc}
 800256a:	bf00      	nop
 800256c:	40020800 	.word	0x40020800
 8002570:	40020c00 	.word	0x40020c00

08002574 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t>:

void TM_ILI9341_Delay(volatile unsigned int delay) {
	for (; delay != 0; delay--); 
}

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_SendCommand(ILI9341_MAC);
 800257e:	2036      	movs	r0, #54	; 0x36
 8002580:	f7ff fe18 	bl	80021b4 <_Z22TM_ILI9341_SendCommandh>
	if (orientation == TM_ILI9341_Orientation_Portrait_1) {
 8002584:	79fb      	ldrb	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d103      	bne.n	8002592 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x1e>
		TM_ILI9341_SendData(0x58);
 800258a:	2058      	movs	r0, #88	; 0x58
 800258c:	f7ff fe30 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
 8002590:	e013      	b.n	80025ba <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Portrait_2) {
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d103      	bne.n	80025a0 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x2c>
		TM_ILI9341_SendData(0x88);
 8002598:	2088      	movs	r0, #136	; 0x88
 800259a:	f7ff fe29 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
 800259e:	e00c      	b.n	80025ba <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_1) {
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	2b02      	cmp	r3, #2
 80025a4:	d103      	bne.n	80025ae <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x3a>
		TM_ILI9341_SendData(0x28);
 80025a6:	2028      	movs	r0, #40	; 0x28
 80025a8:	f7ff fe22 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
 80025ac:	e005      	b.n	80025ba <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_2) {
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d102      	bne.n	80025ba <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x46>
		TM_ILI9341_SendData(0xE8);
 80025b4:	20e8      	movs	r0, #232	; 0xe8
 80025b6:	f7ff fe1b 	bl	80021f0 <_Z19TM_ILI9341_SendDatah>
	}
	
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d002      	beq.n	80025c6 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x52>
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d10a      	bne.n	80025dc <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 80025c6:	4b0c      	ldr	r3, [pc, #48]	; (80025f8 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 80025c8:	22f0      	movs	r2, #240	; 0xf0
 80025ca:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 80025cc:	4b0a      	ldr	r3, [pc, #40]	; (80025f8 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 80025ce:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025d2:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 80025d4:	4b08      	ldr	r3, [pc, #32]	; (80025f8 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	711a      	strb	r2, [r3, #4]
 80025da:	e009      	b.n	80025f0 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x7c>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 80025dc:	4b06      	ldr	r3, [pc, #24]	; (80025f8 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 80025de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025e2:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 80025e4:	4b04      	ldr	r3, [pc, #16]	; (80025f8 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 80025e6:	22f0      	movs	r2, #240	; 0xf0
 80025e8:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Landscape;
 80025ea:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	711a      	strb	r2, [r3, #4]
	}
}
 80025f0:	bf00      	nop
 80025f2:	3708      	adds	r7, #8
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000ad8 	.word	0x20000ad8

080025fc <_Z19TM_ILI9341_DrawLinettttm>:
	/* Set new pointer */
	ILI9341_x += font->FontWidth;
}


void TM_ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {
 80025fc:	b590      	push	{r4, r7, lr}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af02      	add	r7, sp, #8
 8002602:	4604      	mov	r4, r0
 8002604:	4608      	mov	r0, r1
 8002606:	4611      	mov	r1, r2
 8002608:	461a      	mov	r2, r3
 800260a:	4623      	mov	r3, r4
 800260c:	80fb      	strh	r3, [r7, #6]
 800260e:	4603      	mov	r3, r0
 8002610:	80bb      	strh	r3, [r7, #4]
 8002612:	460b      	mov	r3, r1
 8002614:	807b      	strh	r3, [r7, #2]
 8002616:	4613      	mov	r3, r2
 8002618:	803b      	strh	r3, [r7, #0]
	
	int16_t dx, dy, sx, sy, err, e2; 	
	uint16_t tmp;
	
	/* Check for overflow */
	if (x0 >= ILI9341_Opts.width) {
 800261a:	88fb      	ldrh	r3, [r7, #6]
 800261c:	4a57      	ldr	r2, [pc, #348]	; (800277c <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 800261e:	8812      	ldrh	r2, [r2, #0]
 8002620:	4293      	cmp	r3, r2
 8002622:	db03      	blt.n	800262c <_Z19TM_ILI9341_DrawLinettttm+0x30>
		x0 = ILI9341_Opts.width - 1;
 8002624:	4b55      	ldr	r3, [pc, #340]	; (800277c <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8002626:	881b      	ldrh	r3, [r3, #0]
 8002628:	3b01      	subs	r3, #1
 800262a:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= ILI9341_Opts.width) {
 800262c:	887b      	ldrh	r3, [r7, #2]
 800262e:	4a53      	ldr	r2, [pc, #332]	; (800277c <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8002630:	8812      	ldrh	r2, [r2, #0]
 8002632:	4293      	cmp	r3, r2
 8002634:	db03      	blt.n	800263e <_Z19TM_ILI9341_DrawLinettttm+0x42>
		x1 = ILI9341_Opts.width - 1;
 8002636:	4b51      	ldr	r3, [pc, #324]	; (800277c <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	3b01      	subs	r3, #1
 800263c:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= ILI9341_Opts.height) {
 800263e:	88bb      	ldrh	r3, [r7, #4]
 8002640:	4a4e      	ldr	r2, [pc, #312]	; (800277c <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8002642:	8852      	ldrh	r2, [r2, #2]
 8002644:	4293      	cmp	r3, r2
 8002646:	db03      	blt.n	8002650 <_Z19TM_ILI9341_DrawLinettttm+0x54>
		y0 = ILI9341_Opts.height - 1;
 8002648:	4b4c      	ldr	r3, [pc, #304]	; (800277c <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 800264a:	885b      	ldrh	r3, [r3, #2]
 800264c:	3b01      	subs	r3, #1
 800264e:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= ILI9341_Opts.height) {
 8002650:	883b      	ldrh	r3, [r7, #0]
 8002652:	4a4a      	ldr	r2, [pc, #296]	; (800277c <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8002654:	8852      	ldrh	r2, [r2, #2]
 8002656:	4293      	cmp	r3, r2
 8002658:	db03      	blt.n	8002662 <_Z19TM_ILI9341_DrawLinettttm+0x66>
		y1 = ILI9341_Opts.height - 1;
 800265a:	4b48      	ldr	r3, [pc, #288]	; (800277c <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 800265c:	885b      	ldrh	r3, [r3, #2]
 800265e:	3b01      	subs	r3, #1
 8002660:	803b      	strh	r3, [r7, #0]
	}
	
	/* Check correction */
	if (x0 > x1) {
 8002662:	88fa      	ldrh	r2, [r7, #6]
 8002664:	887b      	ldrh	r3, [r7, #2]
 8002666:	429a      	cmp	r2, r3
 8002668:	dd05      	ble.n	8002676 <_Z19TM_ILI9341_DrawLinettttm+0x7a>
		tmp = x0;
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	82bb      	strh	r3, [r7, #20]
		x0 = x1;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 8002672:	8abb      	ldrh	r3, [r7, #20]
 8002674:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 8002676:	88ba      	ldrh	r2, [r7, #4]
 8002678:	883b      	ldrh	r3, [r7, #0]
 800267a:	429a      	cmp	r2, r3
 800267c:	dd05      	ble.n	800268a <_Z19TM_ILI9341_DrawLinettttm+0x8e>
		tmp = y0;
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	82bb      	strh	r3, [r7, #20]
		y0 = y1;
 8002682:	883b      	ldrh	r3, [r7, #0]
 8002684:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 8002686:	8abb      	ldrh	r3, [r7, #20]
 8002688:	803b      	strh	r3, [r7, #0]
	}
	
	dx = x1 - x0;
 800268a:	887a      	ldrh	r2, [r7, #2]
 800268c:	88fb      	ldrh	r3, [r7, #6]
 800268e:	1ad3      	subs	r3, r2, r3
 8002690:	b29b      	uxth	r3, r3
 8002692:	827b      	strh	r3, [r7, #18]
	dy = y1 - y0;
 8002694:	883a      	ldrh	r2, [r7, #0]
 8002696:	88bb      	ldrh	r3, [r7, #4]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	b29b      	uxth	r3, r3
 800269c:	823b      	strh	r3, [r7, #16]
	
	/* Vertical or horizontal line */
	if (dx == 0 || dy == 0) {
 800269e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <_Z19TM_ILI9341_DrawLinettttm+0xb2>
 80026a6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10a      	bne.n	80026c4 <_Z19TM_ILI9341_DrawLinettttm+0xc8>
		TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
 80026ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	883c      	ldrh	r4, [r7, #0]
 80026b4:	887a      	ldrh	r2, [r7, #2]
 80026b6:	88b9      	ldrh	r1, [r7, #4]
 80026b8:	88f8      	ldrh	r0, [r7, #6]
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	4623      	mov	r3, r4
 80026be:	f7ff feeb 	bl	8002498 <_Z19TM_ILI9341_INT_Fillttttt>
		return;
 80026c2:	e057      	b.n	8002774 <_Z19TM_ILI9341_DrawLinettttm+0x178>
	}
	
	sx = (x0 < x1) ? 1 : -1; 
 80026c4:	88fa      	ldrh	r2, [r7, #6]
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	da01      	bge.n	80026d0 <_Z19TM_ILI9341_DrawLinettttm+0xd4>
 80026cc:	2301      	movs	r3, #1
 80026ce:	e001      	b.n	80026d4 <_Z19TM_ILI9341_DrawLinettttm+0xd8>
 80026d0:	f04f 33ff 	mov.w	r3, #4294967295
 80026d4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80026d6:	88ba      	ldrh	r2, [r7, #4]
 80026d8:	883b      	ldrh	r3, [r7, #0]
 80026da:	429a      	cmp	r2, r3
 80026dc:	da01      	bge.n	80026e2 <_Z19TM_ILI9341_DrawLinettttm+0xe6>
 80026de:	2301      	movs	r3, #1
 80026e0:	e001      	b.n	80026e6 <_Z19TM_ILI9341_DrawLinettttm+0xea>
 80026e2:	f04f 33ff 	mov.w	r3, #4294967295
 80026e6:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80026e8:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80026ec:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dd06      	ble.n	8002702 <_Z19TM_ILI9341_DrawLinettttm+0x106>
 80026f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80026f8:	0fda      	lsrs	r2, r3, #31
 80026fa:	4413      	add	r3, r2
 80026fc:	105b      	asrs	r3, r3, #1
 80026fe:	b21b      	sxth	r3, r3
 8002700:	e006      	b.n	8002710 <_Z19TM_ILI9341_DrawLinettttm+0x114>
 8002702:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002706:	425b      	negs	r3, r3
 8002708:	0fda      	lsrs	r2, r3, #31
 800270a:	4413      	add	r3, r2
 800270c:	105b      	asrs	r3, r3, #1
 800270e:	b21b      	sxth	r3, r3
 8002710:	82fb      	strh	r3, [r7, #22]

	while (1) {
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8002712:	88b9      	ldrh	r1, [r7, #4]
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff fe3f 	bl	800239c <_Z20TM_ILI9341_DrawPixelttm>
		if (x0 == x1 && y0 == y1) {
 800271e:	88fa      	ldrh	r2, [r7, #6]
 8002720:	887b      	ldrh	r3, [r7, #2]
 8002722:	429a      	cmp	r2, r3
 8002724:	d103      	bne.n	800272e <_Z19TM_ILI9341_DrawLinettttm+0x132>
 8002726:	88ba      	ldrh	r2, [r7, #4]
 8002728:	883b      	ldrh	r3, [r7, #0]
 800272a:	429a      	cmp	r2, r3
 800272c:	d021      	beq.n	8002772 <_Z19TM_ILI9341_DrawLinettttm+0x176>
			break;
		}
		e2 = err; 
 800272e:	8afb      	ldrh	r3, [r7, #22]
 8002730:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8002732:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002736:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800273a:	425b      	negs	r3, r3
 800273c:	429a      	cmp	r2, r3
 800273e:	dd08      	ble.n	8002752 <_Z19TM_ILI9341_DrawLinettttm+0x156>
			err -= dy;
 8002740:	8afa      	ldrh	r2, [r7, #22]
 8002742:	8a3b      	ldrh	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	b29b      	uxth	r3, r3
 8002748:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 800274a:	89fa      	ldrh	r2, [r7, #14]
 800274c:	88fb      	ldrh	r3, [r7, #6]
 800274e:	4413      	add	r3, r2
 8002750:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8002752:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002756:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800275a:	429a      	cmp	r2, r3
 800275c:	dad9      	bge.n	8002712 <_Z19TM_ILI9341_DrawLinettttm+0x116>
			err += dx;
 800275e:	8afa      	ldrh	r2, [r7, #22]
 8002760:	8a7b      	ldrh	r3, [r7, #18]
 8002762:	4413      	add	r3, r2
 8002764:	b29b      	uxth	r3, r3
 8002766:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8002768:	89ba      	ldrh	r2, [r7, #12]
 800276a:	88bb      	ldrh	r3, [r7, #4]
 800276c:	4413      	add	r3, r2
 800276e:	80bb      	strh	r3, [r7, #4]
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8002770:	e7cf      	b.n	8002712 <_Z19TM_ILI9341_DrawLinettttm+0x116>
			break;
 8002772:	bf00      	nop
		} 
	}
}
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	bd90      	pop	{r4, r7, pc}
 800277a:	bf00      	nop
 800277c:	20000ad8 	.word	0x20000ad8

08002780 <_ZdlPv>:
 8002780:	f000 b99a 	b.w	8002ab8 <free>

08002784 <_Znwj>:
 8002784:	b510      	push	{r4, lr}
 8002786:	2800      	cmp	r0, #0
 8002788:	bf14      	ite	ne
 800278a:	4604      	movne	r4, r0
 800278c:	2401      	moveq	r4, #1
 800278e:	4620      	mov	r0, r4
 8002790:	f000 f98a 	bl	8002aa8 <malloc>
 8002794:	b930      	cbnz	r0, 80027a4 <_Znwj+0x20>
 8002796:	f000 f807 	bl	80027a8 <_ZSt15get_new_handlerv>
 800279a:	b908      	cbnz	r0, 80027a0 <_Znwj+0x1c>
 800279c:	f000 f958 	bl	8002a50 <abort>
 80027a0:	4780      	blx	r0
 80027a2:	e7f4      	b.n	800278e <_Znwj+0xa>
 80027a4:	bd10      	pop	{r4, pc}
	...

080027a8 <_ZSt15get_new_handlerv>:
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <_ZSt15get_new_handlerv+0xc>)
 80027aa:	6818      	ldr	r0, [r3, #0]
 80027ac:	f3bf 8f5b 	dmb	ish
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	20000ae0 	.word	0x20000ae0

080027b8 <_ZSt17__throw_bad_allocv>:
 80027b8:	b508      	push	{r3, lr}
 80027ba:	f000 f949 	bl	8002a50 <abort>
	...

080027c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80027c0:	4b24      	ldr	r3, [pc, #144]	; (8002854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	07d0      	lsls	r0, r2, #31
 80027c6:	bf5c      	itt	pl
 80027c8:	2201      	movpl	r2, #1
 80027ca:	601a      	strpl	r2, [r3, #0]
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	07d1      	lsls	r1, r2, #31
 80027d2:	bf5c      	itt	pl
 80027d4:	2201      	movpl	r2, #1
 80027d6:	601a      	strpl	r2, [r3, #0]
 80027d8:	4b20      	ldr	r3, [pc, #128]	; (800285c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80027da:	681a      	ldr	r2, [r3, #0]
 80027dc:	07d2      	lsls	r2, r2, #31
 80027de:	bf5c      	itt	pl
 80027e0:	2201      	movpl	r2, #1
 80027e2:	601a      	strpl	r2, [r3, #0]
 80027e4:	4b1e      	ldr	r3, [pc, #120]	; (8002860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	07d0      	lsls	r0, r2, #31
 80027ea:	bf5c      	itt	pl
 80027ec:	2201      	movpl	r2, #1
 80027ee:	601a      	strpl	r2, [r3, #0]
 80027f0:	4b1c      	ldr	r3, [pc, #112]	; (8002864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	07d1      	lsls	r1, r2, #31
 80027f6:	bf5c      	itt	pl
 80027f8:	2201      	movpl	r2, #1
 80027fa:	601a      	strpl	r2, [r3, #0]
 80027fc:	4b1a      	ldr	r3, [pc, #104]	; (8002868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	07d2      	lsls	r2, r2, #31
 8002802:	bf5c      	itt	pl
 8002804:	2201      	movpl	r2, #1
 8002806:	601a      	strpl	r2, [r3, #0]
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	07d0      	lsls	r0, r2, #31
 800280e:	bf5c      	itt	pl
 8002810:	2201      	movpl	r2, #1
 8002812:	601a      	strpl	r2, [r3, #0]
 8002814:	4b16      	ldr	r3, [pc, #88]	; (8002870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	07d1      	lsls	r1, r2, #31
 800281a:	bf5c      	itt	pl
 800281c:	2201      	movpl	r2, #1
 800281e:	601a      	strpl	r2, [r3, #0]
 8002820:	4b14      	ldr	r3, [pc, #80]	; (8002874 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	07d2      	lsls	r2, r2, #31
 8002826:	bf5c      	itt	pl
 8002828:	2201      	movpl	r2, #1
 800282a:	601a      	strpl	r2, [r3, #0]
 800282c:	4b12      	ldr	r3, [pc, #72]	; (8002878 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	07d0      	lsls	r0, r2, #31
 8002832:	bf5c      	itt	pl
 8002834:	2201      	movpl	r2, #1
 8002836:	601a      	strpl	r2, [r3, #0]
 8002838:	4b10      	ldr	r3, [pc, #64]	; (800287c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	07d1      	lsls	r1, r2, #31
 800283e:	bf5c      	itt	pl
 8002840:	2201      	movpl	r2, #1
 8002842:	601a      	strpl	r2, [r3, #0]
 8002844:	4b0e      	ldr	r3, [pc, #56]	; (8002880 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	07d2      	lsls	r2, r2, #31
 800284a:	bf5c      	itt	pl
 800284c:	2201      	movpl	r2, #1
 800284e:	601a      	strpl	r2, [r3, #0]
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000b10 	.word	0x20000b10
 8002858:	20000b0c 	.word	0x20000b0c
 800285c:	20000b08 	.word	0x20000b08
 8002860:	20000b04 	.word	0x20000b04
 8002864:	20000b00 	.word	0x20000b00
 8002868:	20000afc 	.word	0x20000afc
 800286c:	20000af8 	.word	0x20000af8
 8002870:	20000af4 	.word	0x20000af4
 8002874:	20000af0 	.word	0x20000af0
 8002878:	20000aec 	.word	0x20000aec
 800287c:	20000ae8 	.word	0x20000ae8
 8002880:	20000ae4 	.word	0x20000ae4

08002884 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	07d1      	lsls	r1, r2, #31
 800288a:	bf5c      	itt	pl
 800288c:	2201      	movpl	r2, #1
 800288e:	601a      	strpl	r2, [r3, #0]
 8002890:	4b16      	ldr	r3, [pc, #88]	; (80028ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	07d2      	lsls	r2, r2, #31
 8002896:	bf5c      	itt	pl
 8002898:	2201      	movpl	r2, #1
 800289a:	601a      	strpl	r2, [r3, #0]
 800289c:	4b14      	ldr	r3, [pc, #80]	; (80028f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	07d0      	lsls	r0, r2, #31
 80028a2:	bf5c      	itt	pl
 80028a4:	2201      	movpl	r2, #1
 80028a6:	601a      	strpl	r2, [r3, #0]
 80028a8:	4b12      	ldr	r3, [pc, #72]	; (80028f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	07d1      	lsls	r1, r2, #31
 80028ae:	bf5c      	itt	pl
 80028b0:	2201      	movpl	r2, #1
 80028b2:	601a      	strpl	r2, [r3, #0]
 80028b4:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	07d2      	lsls	r2, r2, #31
 80028ba:	bf5c      	itt	pl
 80028bc:	2201      	movpl	r2, #1
 80028be:	601a      	strpl	r2, [r3, #0]
 80028c0:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	07d0      	lsls	r0, r2, #31
 80028c6:	bf5c      	itt	pl
 80028c8:	2201      	movpl	r2, #1
 80028ca:	601a      	strpl	r2, [r3, #0]
 80028cc:	4b0c      	ldr	r3, [pc, #48]	; (8002900 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	07d1      	lsls	r1, r2, #31
 80028d2:	bf5c      	itt	pl
 80028d4:	2201      	movpl	r2, #1
 80028d6:	601a      	strpl	r2, [r3, #0]
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	07d2      	lsls	r2, r2, #31
 80028de:	bf5c      	itt	pl
 80028e0:	2201      	movpl	r2, #1
 80028e2:	601a      	strpl	r2, [r3, #0]
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	20000b30 	.word	0x20000b30
 80028ec:	20000b2c 	.word	0x20000b2c
 80028f0:	20000b28 	.word	0x20000b28
 80028f4:	20000b24 	.word	0x20000b24
 80028f8:	20000b20 	.word	0x20000b20
 80028fc:	20000b1c 	.word	0x20000b1c
 8002900:	20000b18 	.word	0x20000b18
 8002904:	20000b14 	.word	0x20000b14

08002908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	07d0      	lsls	r0, r2, #31
 800290e:	bf5c      	itt	pl
 8002910:	2201      	movpl	r2, #1
 8002912:	601a      	strpl	r2, [r3, #0]
 8002914:	4b22      	ldr	r3, [pc, #136]	; (80029a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	07d1      	lsls	r1, r2, #31
 800291a:	bf5c      	itt	pl
 800291c:	2201      	movpl	r2, #1
 800291e:	601a      	strpl	r2, [r3, #0]
 8002920:	4b20      	ldr	r3, [pc, #128]	; (80029a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	07d2      	lsls	r2, r2, #31
 8002926:	bf5c      	itt	pl
 8002928:	2201      	movpl	r2, #1
 800292a:	601a      	strpl	r2, [r3, #0]
 800292c:	4b1e      	ldr	r3, [pc, #120]	; (80029a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	07d0      	lsls	r0, r2, #31
 8002932:	bf5c      	itt	pl
 8002934:	2201      	movpl	r2, #1
 8002936:	601a      	strpl	r2, [r3, #0]
 8002938:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	07d1      	lsls	r1, r2, #31
 800293e:	bf5c      	itt	pl
 8002940:	2201      	movpl	r2, #1
 8002942:	601a      	strpl	r2, [r3, #0]
 8002944:	4b1a      	ldr	r3, [pc, #104]	; (80029b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	07d2      	lsls	r2, r2, #31
 800294a:	bf5c      	itt	pl
 800294c:	2201      	movpl	r2, #1
 800294e:	601a      	strpl	r2, [r3, #0]
 8002950:	4b18      	ldr	r3, [pc, #96]	; (80029b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	07d0      	lsls	r0, r2, #31
 8002956:	bf5c      	itt	pl
 8002958:	2201      	movpl	r2, #1
 800295a:	601a      	strpl	r2, [r3, #0]
 800295c:	4b16      	ldr	r3, [pc, #88]	; (80029b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	07d1      	lsls	r1, r2, #31
 8002962:	bf5c      	itt	pl
 8002964:	2201      	movpl	r2, #1
 8002966:	601a      	strpl	r2, [r3, #0]
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	07d2      	lsls	r2, r2, #31
 800296e:	bf5c      	itt	pl
 8002970:	2201      	movpl	r2, #1
 8002972:	601a      	strpl	r2, [r3, #0]
 8002974:	4b12      	ldr	r3, [pc, #72]	; (80029c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	07d0      	lsls	r0, r2, #31
 800297a:	bf5c      	itt	pl
 800297c:	2201      	movpl	r2, #1
 800297e:	601a      	strpl	r2, [r3, #0]
 8002980:	4b10      	ldr	r3, [pc, #64]	; (80029c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8002982:	681a      	ldr	r2, [r3, #0]
 8002984:	07d1      	lsls	r1, r2, #31
 8002986:	bf5c      	itt	pl
 8002988:	2201      	movpl	r2, #1
 800298a:	601a      	strpl	r2, [r3, #0]
 800298c:	4b0e      	ldr	r3, [pc, #56]	; (80029c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 800298e:	681a      	ldr	r2, [r3, #0]
 8002990:	07d2      	lsls	r2, r2, #31
 8002992:	bf5c      	itt	pl
 8002994:	2201      	movpl	r2, #1
 8002996:	601a      	strpl	r2, [r3, #0]
 8002998:	4770      	bx	lr
 800299a:	bf00      	nop
 800299c:	20000b60 	.word	0x20000b60
 80029a0:	20000b5c 	.word	0x20000b5c
 80029a4:	20000b58 	.word	0x20000b58
 80029a8:	20000b54 	.word	0x20000b54
 80029ac:	20000b50 	.word	0x20000b50
 80029b0:	20000b4c 	.word	0x20000b4c
 80029b4:	20000b48 	.word	0x20000b48
 80029b8:	20000b44 	.word	0x20000b44
 80029bc:	20000b40 	.word	0x20000b40
 80029c0:	20000b3c 	.word	0x20000b3c
 80029c4:	20000b38 	.word	0x20000b38
 80029c8:	20000b34 	.word	0x20000b34

080029cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80029cc:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	07d1      	lsls	r1, r2, #31
 80029d2:	bf5c      	itt	pl
 80029d4:	2201      	movpl	r2, #1
 80029d6:	601a      	strpl	r2, [r3, #0]
 80029d8:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	07d2      	lsls	r2, r2, #31
 80029de:	bf5c      	itt	pl
 80029e0:	2201      	movpl	r2, #1
 80029e2:	601a      	strpl	r2, [r3, #0]
 80029e4:	4b14      	ldr	r3, [pc, #80]	; (8002a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	07d0      	lsls	r0, r2, #31
 80029ea:	bf5c      	itt	pl
 80029ec:	2201      	movpl	r2, #1
 80029ee:	601a      	strpl	r2, [r3, #0]
 80029f0:	4b12      	ldr	r3, [pc, #72]	; (8002a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	07d1      	lsls	r1, r2, #31
 80029f6:	bf5c      	itt	pl
 80029f8:	2201      	movpl	r2, #1
 80029fa:	601a      	strpl	r2, [r3, #0]
 80029fc:	4b10      	ldr	r3, [pc, #64]	; (8002a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	07d2      	lsls	r2, r2, #31
 8002a02:	bf5c      	itt	pl
 8002a04:	2201      	movpl	r2, #1
 8002a06:	601a      	strpl	r2, [r3, #0]
 8002a08:	4b0e      	ldr	r3, [pc, #56]	; (8002a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	07d0      	lsls	r0, r2, #31
 8002a0e:	bf5c      	itt	pl
 8002a10:	2201      	movpl	r2, #1
 8002a12:	601a      	strpl	r2, [r3, #0]
 8002a14:	4b0c      	ldr	r3, [pc, #48]	; (8002a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	07d1      	lsls	r1, r2, #31
 8002a1a:	bf5c      	itt	pl
 8002a1c:	2201      	movpl	r2, #1
 8002a1e:	601a      	strpl	r2, [r3, #0]
 8002a20:	4b0a      	ldr	r3, [pc, #40]	; (8002a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	07d2      	lsls	r2, r2, #31
 8002a26:	bf5c      	itt	pl
 8002a28:	2201      	movpl	r2, #1
 8002a2a:	601a      	strpl	r2, [r3, #0]
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000b80 	.word	0x20000b80
 8002a34:	20000b7c 	.word	0x20000b7c
 8002a38:	20000b78 	.word	0x20000b78
 8002a3c:	20000b74 	.word	0x20000b74
 8002a40:	20000b70 	.word	0x20000b70
 8002a44:	20000b6c 	.word	0x20000b6c
 8002a48:	20000b68 	.word	0x20000b68
 8002a4c:	20000b64 	.word	0x20000b64

08002a50 <abort>:
 8002a50:	b508      	push	{r3, lr}
 8002a52:	2006      	movs	r0, #6
 8002a54:	f000 f936 	bl	8002cc4 <raise>
 8002a58:	2001      	movs	r0, #1
 8002a5a:	f000 f96f 	bl	8002d3c <_exit>
	...

08002a60 <__libc_init_array>:
 8002a60:	b570      	push	{r4, r5, r6, lr}
 8002a62:	4e0d      	ldr	r6, [pc, #52]	; (8002a98 <__libc_init_array+0x38>)
 8002a64:	4c0d      	ldr	r4, [pc, #52]	; (8002a9c <__libc_init_array+0x3c>)
 8002a66:	1ba4      	subs	r4, r4, r6
 8002a68:	10a4      	asrs	r4, r4, #2
 8002a6a:	2500      	movs	r5, #0
 8002a6c:	42a5      	cmp	r5, r4
 8002a6e:	d109      	bne.n	8002a84 <__libc_init_array+0x24>
 8002a70:	4e0b      	ldr	r6, [pc, #44]	; (8002aa0 <__libc_init_array+0x40>)
 8002a72:	4c0c      	ldr	r4, [pc, #48]	; (8002aa4 <__libc_init_array+0x44>)
 8002a74:	f000 f964 	bl	8002d40 <_init>
 8002a78:	1ba4      	subs	r4, r4, r6
 8002a7a:	10a4      	asrs	r4, r4, #2
 8002a7c:	2500      	movs	r5, #0
 8002a7e:	42a5      	cmp	r5, r4
 8002a80:	d105      	bne.n	8002a8e <__libc_init_array+0x2e>
 8002a82:	bd70      	pop	{r4, r5, r6, pc}
 8002a84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a88:	4798      	blx	r3
 8002a8a:	3501      	adds	r5, #1
 8002a8c:	e7ee      	b.n	8002a6c <__libc_init_array+0xc>
 8002a8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002a92:	4798      	blx	r3
 8002a94:	3501      	adds	r5, #1
 8002a96:	e7f2      	b.n	8002a7e <__libc_init_array+0x1e>
 8002a98:	08002ee0 	.word	0x08002ee0
 8002a9c:	08002ee0 	.word	0x08002ee0
 8002aa0:	08002ee0 	.word	0x08002ee0
 8002aa4:	08002ef4 	.word	0x08002ef4

08002aa8 <malloc>:
 8002aa8:	4b02      	ldr	r3, [pc, #8]	; (8002ab4 <malloc+0xc>)
 8002aaa:	4601      	mov	r1, r0
 8002aac:	6818      	ldr	r0, [r3, #0]
 8002aae:	f000 b873 	b.w	8002b98 <_malloc_r>
 8002ab2:	bf00      	nop
 8002ab4:	20000018 	.word	0x20000018

08002ab8 <free>:
 8002ab8:	4b02      	ldr	r3, [pc, #8]	; (8002ac4 <free+0xc>)
 8002aba:	4601      	mov	r1, r0
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	f000 b81d 	b.w	8002afc <_free_r>
 8002ac2:	bf00      	nop
 8002ac4:	20000018 	.word	0x20000018

08002ac8 <memmove>:
 8002ac8:	4288      	cmp	r0, r1
 8002aca:	b510      	push	{r4, lr}
 8002acc:	eb01 0302 	add.w	r3, r1, r2
 8002ad0:	d803      	bhi.n	8002ada <memmove+0x12>
 8002ad2:	1e42      	subs	r2, r0, #1
 8002ad4:	4299      	cmp	r1, r3
 8002ad6:	d10c      	bne.n	8002af2 <memmove+0x2a>
 8002ad8:	bd10      	pop	{r4, pc}
 8002ada:	4298      	cmp	r0, r3
 8002adc:	d2f9      	bcs.n	8002ad2 <memmove+0xa>
 8002ade:	1881      	adds	r1, r0, r2
 8002ae0:	1ad2      	subs	r2, r2, r3
 8002ae2:	42d3      	cmn	r3, r2
 8002ae4:	d100      	bne.n	8002ae8 <memmove+0x20>
 8002ae6:	bd10      	pop	{r4, pc}
 8002ae8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002aec:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002af0:	e7f7      	b.n	8002ae2 <memmove+0x1a>
 8002af2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002af6:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002afa:	e7eb      	b.n	8002ad4 <memmove+0xc>

08002afc <_free_r>:
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	4605      	mov	r5, r0
 8002b00:	2900      	cmp	r1, #0
 8002b02:	d045      	beq.n	8002b90 <_free_r+0x94>
 8002b04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b08:	1f0c      	subs	r4, r1, #4
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	bfb8      	it	lt
 8002b0e:	18e4      	addlt	r4, r4, r3
 8002b10:	f000 f8f4 	bl	8002cfc <__malloc_lock>
 8002b14:	4a1f      	ldr	r2, [pc, #124]	; (8002b94 <_free_r+0x98>)
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	4610      	mov	r0, r2
 8002b1a:	b933      	cbnz	r3, 8002b2a <_free_r+0x2e>
 8002b1c:	6063      	str	r3, [r4, #4]
 8002b1e:	6014      	str	r4, [r2, #0]
 8002b20:	4628      	mov	r0, r5
 8002b22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b26:	f000 b8ea 	b.w	8002cfe <__malloc_unlock>
 8002b2a:	42a3      	cmp	r3, r4
 8002b2c:	d90c      	bls.n	8002b48 <_free_r+0x4c>
 8002b2e:	6821      	ldr	r1, [r4, #0]
 8002b30:	1862      	adds	r2, r4, r1
 8002b32:	4293      	cmp	r3, r2
 8002b34:	bf04      	itt	eq
 8002b36:	681a      	ldreq	r2, [r3, #0]
 8002b38:	685b      	ldreq	r3, [r3, #4]
 8002b3a:	6063      	str	r3, [r4, #4]
 8002b3c:	bf04      	itt	eq
 8002b3e:	1852      	addeq	r2, r2, r1
 8002b40:	6022      	streq	r2, [r4, #0]
 8002b42:	6004      	str	r4, [r0, #0]
 8002b44:	e7ec      	b.n	8002b20 <_free_r+0x24>
 8002b46:	4613      	mov	r3, r2
 8002b48:	685a      	ldr	r2, [r3, #4]
 8002b4a:	b10a      	cbz	r2, 8002b50 <_free_r+0x54>
 8002b4c:	42a2      	cmp	r2, r4
 8002b4e:	d9fa      	bls.n	8002b46 <_free_r+0x4a>
 8002b50:	6819      	ldr	r1, [r3, #0]
 8002b52:	1858      	adds	r0, r3, r1
 8002b54:	42a0      	cmp	r0, r4
 8002b56:	d10b      	bne.n	8002b70 <_free_r+0x74>
 8002b58:	6820      	ldr	r0, [r4, #0]
 8002b5a:	4401      	add	r1, r0
 8002b5c:	1858      	adds	r0, r3, r1
 8002b5e:	4282      	cmp	r2, r0
 8002b60:	6019      	str	r1, [r3, #0]
 8002b62:	d1dd      	bne.n	8002b20 <_free_r+0x24>
 8002b64:	6810      	ldr	r0, [r2, #0]
 8002b66:	6852      	ldr	r2, [r2, #4]
 8002b68:	605a      	str	r2, [r3, #4]
 8002b6a:	4401      	add	r1, r0
 8002b6c:	6019      	str	r1, [r3, #0]
 8002b6e:	e7d7      	b.n	8002b20 <_free_r+0x24>
 8002b70:	d902      	bls.n	8002b78 <_free_r+0x7c>
 8002b72:	230c      	movs	r3, #12
 8002b74:	602b      	str	r3, [r5, #0]
 8002b76:	e7d3      	b.n	8002b20 <_free_r+0x24>
 8002b78:	6820      	ldr	r0, [r4, #0]
 8002b7a:	1821      	adds	r1, r4, r0
 8002b7c:	428a      	cmp	r2, r1
 8002b7e:	bf04      	itt	eq
 8002b80:	6811      	ldreq	r1, [r2, #0]
 8002b82:	6852      	ldreq	r2, [r2, #4]
 8002b84:	6062      	str	r2, [r4, #4]
 8002b86:	bf04      	itt	eq
 8002b88:	1809      	addeq	r1, r1, r0
 8002b8a:	6021      	streq	r1, [r4, #0]
 8002b8c:	605c      	str	r4, [r3, #4]
 8002b8e:	e7c7      	b.n	8002b20 <_free_r+0x24>
 8002b90:	bd38      	pop	{r3, r4, r5, pc}
 8002b92:	bf00      	nop
 8002b94:	20000b84 	.word	0x20000b84

08002b98 <_malloc_r>:
 8002b98:	b570      	push	{r4, r5, r6, lr}
 8002b9a:	1ccd      	adds	r5, r1, #3
 8002b9c:	f025 0503 	bic.w	r5, r5, #3
 8002ba0:	3508      	adds	r5, #8
 8002ba2:	2d0c      	cmp	r5, #12
 8002ba4:	bf38      	it	cc
 8002ba6:	250c      	movcc	r5, #12
 8002ba8:	2d00      	cmp	r5, #0
 8002baa:	4606      	mov	r6, r0
 8002bac:	db01      	blt.n	8002bb2 <_malloc_r+0x1a>
 8002bae:	42a9      	cmp	r1, r5
 8002bb0:	d903      	bls.n	8002bba <_malloc_r+0x22>
 8002bb2:	230c      	movs	r3, #12
 8002bb4:	6033      	str	r3, [r6, #0]
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	bd70      	pop	{r4, r5, r6, pc}
 8002bba:	f000 f89f 	bl	8002cfc <__malloc_lock>
 8002bbe:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <_malloc_r+0xb4>)
 8002bc0:	6814      	ldr	r4, [r2, #0]
 8002bc2:	4621      	mov	r1, r4
 8002bc4:	b991      	cbnz	r1, 8002bec <_malloc_r+0x54>
 8002bc6:	4c22      	ldr	r4, [pc, #136]	; (8002c50 <_malloc_r+0xb8>)
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	b91b      	cbnz	r3, 8002bd4 <_malloc_r+0x3c>
 8002bcc:	4630      	mov	r0, r6
 8002bce:	f000 f841 	bl	8002c54 <_sbrk_r>
 8002bd2:	6020      	str	r0, [r4, #0]
 8002bd4:	4629      	mov	r1, r5
 8002bd6:	4630      	mov	r0, r6
 8002bd8:	f000 f83c 	bl	8002c54 <_sbrk_r>
 8002bdc:	1c43      	adds	r3, r0, #1
 8002bde:	d126      	bne.n	8002c2e <_malloc_r+0x96>
 8002be0:	230c      	movs	r3, #12
 8002be2:	6033      	str	r3, [r6, #0]
 8002be4:	4630      	mov	r0, r6
 8002be6:	f000 f88a 	bl	8002cfe <__malloc_unlock>
 8002bea:	e7e4      	b.n	8002bb6 <_malloc_r+0x1e>
 8002bec:	680b      	ldr	r3, [r1, #0]
 8002bee:	1b5b      	subs	r3, r3, r5
 8002bf0:	d41a      	bmi.n	8002c28 <_malloc_r+0x90>
 8002bf2:	2b0b      	cmp	r3, #11
 8002bf4:	d90f      	bls.n	8002c16 <_malloc_r+0x7e>
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	50cd      	str	r5, [r1, r3]
 8002bfa:	18cc      	adds	r4, r1, r3
 8002bfc:	4630      	mov	r0, r6
 8002bfe:	f000 f87e 	bl	8002cfe <__malloc_unlock>
 8002c02:	f104 000b 	add.w	r0, r4, #11
 8002c06:	1d23      	adds	r3, r4, #4
 8002c08:	f020 0007 	bic.w	r0, r0, #7
 8002c0c:	1ac3      	subs	r3, r0, r3
 8002c0e:	d01b      	beq.n	8002c48 <_malloc_r+0xb0>
 8002c10:	425a      	negs	r2, r3
 8002c12:	50e2      	str	r2, [r4, r3]
 8002c14:	bd70      	pop	{r4, r5, r6, pc}
 8002c16:	428c      	cmp	r4, r1
 8002c18:	bf0d      	iteet	eq
 8002c1a:	6863      	ldreq	r3, [r4, #4]
 8002c1c:	684b      	ldrne	r3, [r1, #4]
 8002c1e:	6063      	strne	r3, [r4, #4]
 8002c20:	6013      	streq	r3, [r2, #0]
 8002c22:	bf18      	it	ne
 8002c24:	460c      	movne	r4, r1
 8002c26:	e7e9      	b.n	8002bfc <_malloc_r+0x64>
 8002c28:	460c      	mov	r4, r1
 8002c2a:	6849      	ldr	r1, [r1, #4]
 8002c2c:	e7ca      	b.n	8002bc4 <_malloc_r+0x2c>
 8002c2e:	1cc4      	adds	r4, r0, #3
 8002c30:	f024 0403 	bic.w	r4, r4, #3
 8002c34:	42a0      	cmp	r0, r4
 8002c36:	d005      	beq.n	8002c44 <_malloc_r+0xac>
 8002c38:	1a21      	subs	r1, r4, r0
 8002c3a:	4630      	mov	r0, r6
 8002c3c:	f000 f80a 	bl	8002c54 <_sbrk_r>
 8002c40:	3001      	adds	r0, #1
 8002c42:	d0cd      	beq.n	8002be0 <_malloc_r+0x48>
 8002c44:	6025      	str	r5, [r4, #0]
 8002c46:	e7d9      	b.n	8002bfc <_malloc_r+0x64>
 8002c48:	bd70      	pop	{r4, r5, r6, pc}
 8002c4a:	bf00      	nop
 8002c4c:	20000b84 	.word	0x20000b84
 8002c50:	20000b88 	.word	0x20000b88

08002c54 <_sbrk_r>:
 8002c54:	b538      	push	{r3, r4, r5, lr}
 8002c56:	4c06      	ldr	r4, [pc, #24]	; (8002c70 <_sbrk_r+0x1c>)
 8002c58:	2300      	movs	r3, #0
 8002c5a:	4605      	mov	r5, r0
 8002c5c:	4608      	mov	r0, r1
 8002c5e:	6023      	str	r3, [r4, #0]
 8002c60:	f000 f85e 	bl	8002d20 <_sbrk>
 8002c64:	1c43      	adds	r3, r0, #1
 8002c66:	d102      	bne.n	8002c6e <_sbrk_r+0x1a>
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	b103      	cbz	r3, 8002c6e <_sbrk_r+0x1a>
 8002c6c:	602b      	str	r3, [r5, #0]
 8002c6e:	bd38      	pop	{r3, r4, r5, pc}
 8002c70:	20000b90 	.word	0x20000b90

08002c74 <_raise_r>:
 8002c74:	291f      	cmp	r1, #31
 8002c76:	b538      	push	{r3, r4, r5, lr}
 8002c78:	4604      	mov	r4, r0
 8002c7a:	460d      	mov	r5, r1
 8002c7c:	d904      	bls.n	8002c88 <_raise_r+0x14>
 8002c7e:	2316      	movs	r3, #22
 8002c80:	6003      	str	r3, [r0, #0]
 8002c82:	f04f 30ff 	mov.w	r0, #4294967295
 8002c86:	bd38      	pop	{r3, r4, r5, pc}
 8002c88:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8002c8a:	b112      	cbz	r2, 8002c92 <_raise_r+0x1e>
 8002c8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8002c90:	b94b      	cbnz	r3, 8002ca6 <_raise_r+0x32>
 8002c92:	4620      	mov	r0, r4
 8002c94:	f000 f830 	bl	8002cf8 <_getpid_r>
 8002c98:	462a      	mov	r2, r5
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	4620      	mov	r0, r4
 8002c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002ca2:	f000 b817 	b.w	8002cd4 <_kill_r>
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d00a      	beq.n	8002cc0 <_raise_r+0x4c>
 8002caa:	1c59      	adds	r1, r3, #1
 8002cac:	d103      	bne.n	8002cb6 <_raise_r+0x42>
 8002cae:	2316      	movs	r3, #22
 8002cb0:	6003      	str	r3, [r0, #0]
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	bd38      	pop	{r3, r4, r5, pc}
 8002cb6:	2400      	movs	r4, #0
 8002cb8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8002cbc:	4628      	mov	r0, r5
 8002cbe:	4798      	blx	r3
 8002cc0:	2000      	movs	r0, #0
 8002cc2:	bd38      	pop	{r3, r4, r5, pc}

08002cc4 <raise>:
 8002cc4:	4b02      	ldr	r3, [pc, #8]	; (8002cd0 <raise+0xc>)
 8002cc6:	4601      	mov	r1, r0
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	f7ff bfd3 	b.w	8002c74 <_raise_r>
 8002cce:	bf00      	nop
 8002cd0:	20000018 	.word	0x20000018

08002cd4 <_kill_r>:
 8002cd4:	b538      	push	{r3, r4, r5, lr}
 8002cd6:	4c07      	ldr	r4, [pc, #28]	; (8002cf4 <_kill_r+0x20>)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	4605      	mov	r5, r0
 8002cdc:	4608      	mov	r0, r1
 8002cde:	4611      	mov	r1, r2
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	f000 f815 	bl	8002d10 <_kill>
 8002ce6:	1c43      	adds	r3, r0, #1
 8002ce8:	d102      	bne.n	8002cf0 <_kill_r+0x1c>
 8002cea:	6823      	ldr	r3, [r4, #0]
 8002cec:	b103      	cbz	r3, 8002cf0 <_kill_r+0x1c>
 8002cee:	602b      	str	r3, [r5, #0]
 8002cf0:	bd38      	pop	{r3, r4, r5, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20000b90 	.word	0x20000b90

08002cf8 <_getpid_r>:
 8002cf8:	f000 b802 	b.w	8002d00 <_getpid>

08002cfc <__malloc_lock>:
 8002cfc:	4770      	bx	lr

08002cfe <__malloc_unlock>:
 8002cfe:	4770      	bx	lr

08002d00 <_getpid>:
 8002d00:	4b02      	ldr	r3, [pc, #8]	; (8002d0c <_getpid+0xc>)
 8002d02:	2258      	movs	r2, #88	; 0x58
 8002d04:	601a      	str	r2, [r3, #0]
 8002d06:	f04f 30ff 	mov.w	r0, #4294967295
 8002d0a:	4770      	bx	lr
 8002d0c:	20000b90 	.word	0x20000b90

08002d10 <_kill>:
 8002d10:	4b02      	ldr	r3, [pc, #8]	; (8002d1c <_kill+0xc>)
 8002d12:	2258      	movs	r2, #88	; 0x58
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f04f 30ff 	mov.w	r0, #4294967295
 8002d1a:	4770      	bx	lr
 8002d1c:	20000b90 	.word	0x20000b90

08002d20 <_sbrk>:
 8002d20:	4b04      	ldr	r3, [pc, #16]	; (8002d34 <_sbrk+0x14>)
 8002d22:	6819      	ldr	r1, [r3, #0]
 8002d24:	4602      	mov	r2, r0
 8002d26:	b909      	cbnz	r1, 8002d2c <_sbrk+0xc>
 8002d28:	4903      	ldr	r1, [pc, #12]	; (8002d38 <_sbrk+0x18>)
 8002d2a:	6019      	str	r1, [r3, #0]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	4402      	add	r2, r0
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	4770      	bx	lr
 8002d34:	20000b8c 	.word	0x20000b8c
 8002d38:	20000b94 	.word	0x20000b94

08002d3c <_exit>:
 8002d3c:	e7fe      	b.n	8002d3c <_exit>
	...

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
