
Oscar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001aa4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000004  08001c50  08001c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001c58  08001c58  00011c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000018  20000000  08001c5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
  7 .bss          00000a64  20000018  20000018  00020018  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000a7c  20000a7c  00020018  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 10 .debug_info   000050ca  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00000d21  00000000  00000000  00025112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000378  00000000  00000000  00025e38  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000310  00000000  00000000  000261b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00001be5  00000000  00000000  000264c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002261  00000000  00000000  000280a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0002a306  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000c90  00000000  00000000  0002a384  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  0002b014  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08001c38 	.word	0x08001c38

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08001c38 	.word	0x08001c38

080001ec <GPIO_SetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80001ec:	b480      	push	{r7}
 80001ee:	b083      	sub	sp, #12
 80001f0:	af00      	add	r7, sp, #0
 80001f2:	6078      	str	r0, [r7, #4]
 80001f4:	460b      	mov	r3, r1
 80001f6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRL = GPIO_Pin;
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	887a      	ldrh	r2, [r7, #2]
 80001fc:	831a      	strh	r2, [r3, #24]
}
 80001fe:	bf00      	nop
 8000200:	370c      	adds	r7, #12
 8000202:	46bd      	mov	sp, r7
 8000204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000208:	4770      	bx	lr

0800020a <GPIO_ResetBits>:
  * @param  GPIO_Pin: specifies the port bits to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800020a:	b480      	push	{r7}
 800020c:	b083      	sub	sp, #12
 800020e:	af00      	add	r7, sp, #0
 8000210:	6078      	str	r0, [r7, #4]
 8000212:	460b      	mov	r3, r1
 8000214:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRRH = GPIO_Pin;
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	887a      	ldrh	r2, [r7, #2]
 800021a:	835a      	strh	r2, [r3, #26]
}
 800021c:	bf00      	nop
 800021e:	370c      	adds	r7, #12
 8000220:	46bd      	mov	sp, r7
 8000222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000226:	4770      	bx	lr

08000228 <TM_DMA_ClearFlag>:
void TM_DMA_ClearFlags(DMA_Stream_TypeDef* DMA_Stream) {
	/* Clear all flags */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
}

void TM_DMA_ClearFlag(DMA_Stream_TypeDef* DMA_Stream, uint32_t flag) {
 8000228:	b480      	push	{r7}
 800022a:	b085      	sub	sp, #20
 800022c:	af00      	add	r7, sp, #0
 800022e:	6078      	str	r0, [r7, #4]
 8000230:	6039      	str	r1, [r7, #0]
	uint32_t location;
	uint32_t stream_number;

	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 8000232:	687b      	ldr	r3, [r7, #4]
 8000234:	4a18      	ldr	r2, [pc, #96]	; (8000298 <TM_DMA_ClearFlag+0x70>)
 8000236:	4293      	cmp	r3, r2
 8000238:	d80a      	bhi.n	8000250 <TM_DMA_ClearFlag+0x28>
		location = (uint32_t)&DMA1->LIFCR;
 800023a:	4b18      	ldr	r3, [pc, #96]	; (800029c <TM_DMA_ClearFlag+0x74>)
 800023c:	60fb      	str	r3, [r7, #12]
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 800023e:	687a      	ldr	r2, [r7, #4]
 8000240:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <TM_DMA_ClearFlag+0x78>)
 8000242:	4413      	add	r3, r2
 8000244:	4a17      	ldr	r2, [pc, #92]	; (80002a4 <TM_DMA_ClearFlag+0x7c>)
 8000246:	fba2 2303 	umull	r2, r3, r2, r3
 800024a:	091b      	lsrs	r3, r3, #4
 800024c:	60bb      	str	r3, [r7, #8]
 800024e:	e009      	b.n	8000264 <TM_DMA_ClearFlag+0x3c>
	} else {
		location = (uint32_t)&DMA2->LIFCR;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <TM_DMA_ClearFlag+0x80>)
 8000252:	60fb      	str	r3, [r7, #12]
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 8000254:	687a      	ldr	r2, [r7, #4]
 8000256:	4b15      	ldr	r3, [pc, #84]	; (80002ac <TM_DMA_ClearFlag+0x84>)
 8000258:	4413      	add	r3, r2
 800025a:	4a12      	ldr	r2, [pc, #72]	; (80002a4 <TM_DMA_ClearFlag+0x7c>)
 800025c:	fba2 2303 	umull	r2, r3, r2, r3
 8000260:	091b      	lsrs	r3, r3, #4
 8000262:	60bb      	str	r3, [r7, #8]
	}
	
	/* Get register offset */
	if (stream_number >= 4) {
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	2b03      	cmp	r3, #3
 8000268:	d905      	bls.n	8000276 <TM_DMA_ClearFlag+0x4e>
		/* High registers for DMA clear */
		location += 4;
 800026a:	68fb      	ldr	r3, [r7, #12]
 800026c:	3304      	adds	r3, #4
 800026e:	60fb      	str	r3, [r7, #12]
		
		/* Do offset for high DMA registers */
		stream_number -= 4;
 8000270:	68bb      	ldr	r3, [r7, #8]
 8000272:	3b04      	subs	r3, #4
 8000274:	60bb      	str	r3, [r7, #8]
	}
	
	/* Clear flags */
	*(__IO uint32_t *)location = (flag & DMA_FLAG_ALL) << DMA_Flags_Bit_Pos[stream_number];
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	683a      	ldr	r2, [r7, #0]
 800027a:	f002 023d 	and.w	r2, r2, #61	; 0x3d
 800027e:	480c      	ldr	r0, [pc, #48]	; (80002b0 <TM_DMA_ClearFlag+0x88>)
 8000280:	68b9      	ldr	r1, [r7, #8]
 8000282:	4401      	add	r1, r0
 8000284:	7809      	ldrb	r1, [r1, #0]
 8000286:	408a      	lsls	r2, r1
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	3714      	adds	r7, #20
 800028e:	46bd      	mov	sp, r7
 8000290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000294:	4770      	bx	lr
 8000296:	bf00      	nop
 8000298:	4002640f 	.word	0x4002640f
 800029c:	40026008 	.word	0x40026008
 80002a0:	bffd9ff0 	.word	0xbffd9ff0
 80002a4:	aaaaaaab 	.word	0xaaaaaaab
 80002a8:	40026408 	.word	0x40026408
 80002ac:	bffd9bf0 	.word	0xbffd9bf0
 80002b0:	08001c50 	.word	0x08001c50

080002b4 <TM_DMA_GetFlags>:

uint32_t TM_DMA_GetFlags(DMA_Stream_TypeDef* DMA_Stream, uint32_t flag) {
 80002b4:	b480      	push	{r7}
 80002b6:	b087      	sub	sp, #28
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	6078      	str	r0, [r7, #4]
 80002bc:	6039      	str	r1, [r7, #0]
	uint32_t stream_number = 0;
 80002be:	2300      	movs	r3, #0
 80002c0:	617b      	str	r3, [r7, #20]
	uint32_t location = 0;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
	uint32_t flags = 0;
 80002c6:	2300      	movs	r3, #0
 80002c8:	60fb      	str	r3, [r7, #12]
	
	/* Check stream value */
	if (DMA_Stream < DMA2_Stream0) {
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	4a1b      	ldr	r2, [pc, #108]	; (800033c <TM_DMA_GetFlags+0x88>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d80a      	bhi.n	80002e8 <TM_DMA_GetFlags+0x34>
		location = (uint32_t)&DMA1->LISR;
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <TM_DMA_GetFlags+0x8c>)
 80002d4:	613b      	str	r3, [r7, #16]
		stream_number = GET_STREAM_NUMBER_DMA1(DMA_Stream);
 80002d6:	687a      	ldr	r2, [r7, #4]
 80002d8:	4b1a      	ldr	r3, [pc, #104]	; (8000344 <TM_DMA_GetFlags+0x90>)
 80002da:	4413      	add	r3, r2
 80002dc:	4a1a      	ldr	r2, [pc, #104]	; (8000348 <TM_DMA_GetFlags+0x94>)
 80002de:	fba2 2303 	umull	r2, r3, r2, r3
 80002e2:	091b      	lsrs	r3, r3, #4
 80002e4:	617b      	str	r3, [r7, #20]
 80002e6:	e009      	b.n	80002fc <TM_DMA_GetFlags+0x48>
	} else {
		location = (uint32_t)&DMA2->LISR;
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <TM_DMA_GetFlags+0x98>)
 80002ea:	613b      	str	r3, [r7, #16]
		stream_number = GET_STREAM_NUMBER_DMA2(DMA_Stream);
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <TM_DMA_GetFlags+0x9c>)
 80002f0:	4413      	add	r3, r2
 80002f2:	4a15      	ldr	r2, [pc, #84]	; (8000348 <TM_DMA_GetFlags+0x94>)
 80002f4:	fba2 2303 	umull	r2, r3, r2, r3
 80002f8:	091b      	lsrs	r3, r3, #4
 80002fa:	617b      	str	r3, [r7, #20]
	}
	
	/* Get register offset */
	if (stream_number >= 4) {
 80002fc:	697b      	ldr	r3, [r7, #20]
 80002fe:	2b03      	cmp	r3, #3
 8000300:	d905      	bls.n	800030e <TM_DMA_GetFlags+0x5a>
		/* High registers for DMA clear */
		location += 4;
 8000302:	693b      	ldr	r3, [r7, #16]
 8000304:	3304      	adds	r3, #4
 8000306:	613b      	str	r3, [r7, #16]
		
		/* Do offset for high DMA registers */
		stream_number -= 4;
 8000308:	697b      	ldr	r3, [r7, #20]
 800030a:	3b04      	subs	r3, #4
 800030c:	617b      	str	r3, [r7, #20]
	}
	
	/* Get register value */
	flags =   *(__IO uint32_t *)location;
 800030e:	693b      	ldr	r3, [r7, #16]
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	60fb      	str	r3, [r7, #12]
	flags >>= DMA_Flags_Bit_Pos[stream_number];
 8000314:	4a0f      	ldr	r2, [pc, #60]	; (8000354 <TM_DMA_GetFlags+0xa0>)
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	4413      	add	r3, r2
 800031a:	781b      	ldrb	r3, [r3, #0]
 800031c:	461a      	mov	r2, r3
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	40d3      	lsrs	r3, r2
 8000322:	60fb      	str	r3, [r7, #12]
	flags &=  DMA_FLAG_ALL;
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f003 033d 	and.w	r3, r3, #61	; 0x3d
 800032a:	60fb      	str	r3, [r7, #12]
	
	/* Return value */
	return flags;
 800032c:	68fb      	ldr	r3, [r7, #12]
}
 800032e:	4618      	mov	r0, r3
 8000330:	371c      	adds	r7, #28
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	4002640f 	.word	0x4002640f
 8000340:	40026000 	.word	0x40026000
 8000344:	bffd9ff0 	.word	0xbffd9ff0
 8000348:	aaaaaaab 	.word	0xaaaaaaab
 800034c:	40026400 	.word	0x40026400
 8000350:	bffd9bf0 	.word	0xbffd9bf0
 8000354:	08001c50 	.word	0x08001c50

08000358 <TM_DMA_TransferCompleteHandler>:

/*****************************************************************/
/*                 DMA INTERRUPT USER CALLBACKS                  */
/*****************************************************************/
//** DW FIXME - removed __weak from following definitions (declared in attributes.h, but causing issues)
void TM_DMA_TransferCompleteHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_TransferCompleteHandler could be implemented in the user file
	*/
}
 8000360:	bf00      	nop
 8000362:	370c      	adds	r7, #12
 8000364:	46bd      	mov	sp, r7
 8000366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036a:	4770      	bx	lr

0800036c <TM_DMA_HalfTransferCompleteHandler>:

void TM_DMA_HalfTransferCompleteHandler(DMA_Stream_TypeDef* DMA_Stream) {
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_HalfTransferCompleteHandler could be implemented in the user file
	*/
}
 8000374:	bf00      	nop
 8000376:	370c      	adds	r7, #12
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr

08000380 <TM_DMA_TransferErrorHandler>:

void TM_DMA_TransferErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8000380:	b480      	push	{r7}
 8000382:	b083      	sub	sp, #12
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_TransferErrorHandler could be implemented in the user file
	*/
}
 8000388:	bf00      	nop
 800038a:	370c      	adds	r7, #12
 800038c:	46bd      	mov	sp, r7
 800038e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000392:	4770      	bx	lr

08000394 <TM_DMA_DirectModeErrorHandler>:

void TM_DMA_DirectModeErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 8000394:	b480      	push	{r7}
 8000396:	b083      	sub	sp, #12
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_DirectModeErrorHandler could be implemented in the user file
	*/
}
 800039c:	bf00      	nop
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <TM_DMA_FIFOErrorHandler>:

void TM_DMA_FIFOErrorHandler(DMA_Stream_TypeDef* DMA_Stream) {
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
            the TM_DMA_FIFOErrorHandler could be implemented in the user file
	*/
}
 80003b0:	bf00      	nop
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr

080003bc <TM_DMA_INT_ProcessInterrupt>:
}*/

/*****************************************************************/
/*                    DMA INTERNAL FUNCTIONS                     */
/*****************************************************************/
static void TM_DMA_INT_ProcessInterrupt(DMA_Stream_TypeDef* DMA_Stream) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b084      	sub	sp, #16
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
	/* Get DMA interrupt status flags */
	uint16_t flags = TM_DMA_GetFlags(DMA_Stream, DMA_FLAG_ALL);
 80003c4:	213d      	movs	r1, #61	; 0x3d
 80003c6:	6878      	ldr	r0, [r7, #4]
 80003c8:	f7ff ff74 	bl	80002b4 <TM_DMA_GetFlags>
 80003cc:	4603      	mov	r3, r0
 80003ce:	81fb      	strh	r3, [r7, #14]
	
	/* Clear flags */
	TM_DMA_ClearFlag(DMA_Stream, DMA_FLAG_ALL);
 80003d0:	213d      	movs	r1, #61	; 0x3d
 80003d2:	6878      	ldr	r0, [r7, #4]
 80003d4:	f7ff ff28 	bl	8000228 <TM_DMA_ClearFlag>
	
	/* Call user callback function */
	
	/* Check transfer complete flag */
	if ((flags & DMA_FLAG_TCIF) && (DMA_Stream->CR & DMA_SxCR_TCIE)) {
 80003d8:	89fb      	ldrh	r3, [r7, #14]
 80003da:	f003 0320 	and.w	r3, r3, #32
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d008      	beq.n	80003f4 <TM_DMA_INT_ProcessInterrupt+0x38>
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f003 0310 	and.w	r3, r3, #16
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d002      	beq.n	80003f4 <TM_DMA_INT_ProcessInterrupt+0x38>
		TM_DMA_TransferCompleteHandler(DMA_Stream);
 80003ee:	6878      	ldr	r0, [r7, #4]
 80003f0:	f7ff ffb2 	bl	8000358 <TM_DMA_TransferCompleteHandler>
	}
	/* Check half-transfer complete flag */
	if ((flags & DMA_FLAG_HTIF) && (DMA_Stream->CR & DMA_SxCR_HTIE)) {
 80003f4:	89fb      	ldrh	r3, [r7, #14]
 80003f6:	f003 0310 	and.w	r3, r3, #16
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d008      	beq.n	8000410 <TM_DMA_INT_ProcessInterrupt+0x54>
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	f003 0308 	and.w	r3, r3, #8
 8000406:	2b00      	cmp	r3, #0
 8000408:	d002      	beq.n	8000410 <TM_DMA_INT_ProcessInterrupt+0x54>
		TM_DMA_HalfTransferCompleteHandler(DMA_Stream);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ffae 	bl	800036c <TM_DMA_HalfTransferCompleteHandler>
	}
	/* Check transfer error flag */
	if ((flags & DMA_FLAG_TEIF) && (DMA_Stream->CR & DMA_SxCR_TEIE)) {
 8000410:	89fb      	ldrh	r3, [r7, #14]
 8000412:	f003 0308 	and.w	r3, r3, #8
 8000416:	2b00      	cmp	r3, #0
 8000418:	d008      	beq.n	800042c <TM_DMA_INT_ProcessInterrupt+0x70>
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	f003 0304 	and.w	r3, r3, #4
 8000422:	2b00      	cmp	r3, #0
 8000424:	d002      	beq.n	800042c <TM_DMA_INT_ProcessInterrupt+0x70>
		TM_DMA_TransferErrorHandler(DMA_Stream);
 8000426:	6878      	ldr	r0, [r7, #4]
 8000428:	f7ff ffaa 	bl	8000380 <TM_DMA_TransferErrorHandler>
	}
	/* Check direct error flag */
	if ((flags & DMA_FLAG_DMEIF) && (DMA_Stream->CR & DMA_SxCR_DMEIE)) {
 800042c:	89fb      	ldrh	r3, [r7, #14]
 800042e:	f003 0304 	and.w	r3, r3, #4
 8000432:	2b00      	cmp	r3, #0
 8000434:	d008      	beq.n	8000448 <TM_DMA_INT_ProcessInterrupt+0x8c>
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	681b      	ldr	r3, [r3, #0]
 800043a:	f003 0302 	and.w	r3, r3, #2
 800043e:	2b00      	cmp	r3, #0
 8000440:	d002      	beq.n	8000448 <TM_DMA_INT_ProcessInterrupt+0x8c>
		TM_DMA_DirectModeErrorHandler(DMA_Stream);
 8000442:	6878      	ldr	r0, [r7, #4]
 8000444:	f7ff ffa6 	bl	8000394 <TM_DMA_DirectModeErrorHandler>
	}
	/* Check FIFO error flag */
	if ((flags & DMA_FLAG_FEIF) && (DMA_Stream->FCR & DMA_SxFCR_FEIE)) {
 8000448:	89fb      	ldrh	r3, [r7, #14]
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	2b00      	cmp	r3, #0
 8000450:	d008      	beq.n	8000464 <TM_DMA_INT_ProcessInterrupt+0xa8>
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	695b      	ldr	r3, [r3, #20]
 8000456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800045a:	2b00      	cmp	r3, #0
 800045c:	d002      	beq.n	8000464 <TM_DMA_INT_ProcessInterrupt+0xa8>
		TM_DMA_FIFOErrorHandler(DMA_Stream);
 800045e:	6878      	ldr	r0, [r7, #4]
 8000460:	f7ff ffa2 	bl	80003a8 <TM_DMA_FIFOErrorHandler>
	}
}
 8000464:	bf00      	nop
 8000466:	3710      	adds	r7, #16
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}

0800046c <DMA1_Stream0_IRQHandler>:

/* Handle all DMA interrupt handlers possible */
#ifndef DMA1_STREAM0_DISABLE_IRQHANDLER
void DMA1_Stream0_IRQHandler(void) {
 800046c:	b580      	push	{r7, lr}
 800046e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream0);
 8000470:	4802      	ldr	r0, [pc, #8]	; (800047c <DMA1_Stream0_IRQHandler+0x10>)
 8000472:	f7ff ffa3 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000476:	bf00      	nop
 8000478:	bd80      	pop	{r7, pc}
 800047a:	bf00      	nop
 800047c:	40026010 	.word	0x40026010

08000480 <DMA1_Stream1_IRQHandler>:
#endif
#ifndef DMA1_STREAM1_DISABLE_IRQHANDLER
void DMA1_Stream1_IRQHandler(void) {
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream1);
 8000484:	4802      	ldr	r0, [pc, #8]	; (8000490 <DMA1_Stream1_IRQHandler+0x10>)
 8000486:	f7ff ff99 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800048a:	bf00      	nop
 800048c:	bd80      	pop	{r7, pc}
 800048e:	bf00      	nop
 8000490:	40026028 	.word	0x40026028

08000494 <DMA1_Stream2_IRQHandler>:
#endif
#ifndef DMA1_STREAM2_DISABLE_IRQHANDLER
void DMA1_Stream2_IRQHandler(void) {
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream2);
 8000498:	4802      	ldr	r0, [pc, #8]	; (80004a4 <DMA1_Stream2_IRQHandler+0x10>)
 800049a:	f7ff ff8f 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800049e:	bf00      	nop
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	40026040 	.word	0x40026040

080004a8 <DMA1_Stream3_IRQHandler>:
#endif
#ifndef DMA1_STREAM3_DISABLE_IRQHANDLER
void DMA1_Stream3_IRQHandler(void) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream3);
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <DMA1_Stream3_IRQHandler+0x10>)
 80004ae:	f7ff ff85 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80004b2:	bf00      	nop
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40026058 	.word	0x40026058

080004bc <DMA1_Stream4_IRQHandler>:
#endif
#ifndef DMA1_STREAM4_DISABLE_IRQHANDLER
void DMA1_Stream4_IRQHandler(void) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream4);
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <DMA1_Stream4_IRQHandler+0x10>)
 80004c2:	f7ff ff7b 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80004c6:	bf00      	nop
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	bf00      	nop
 80004cc:	40026070 	.word	0x40026070

080004d0 <DMA1_Stream5_IRQHandler>:
#endif
#ifndef DMA1_STREAM5_DISABLE_IRQHANDLER
void DMA1_Stream5_IRQHandler(void) {
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream5);
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <DMA1_Stream5_IRQHandler+0x10>)
 80004d6:	f7ff ff71 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	40026088 	.word	0x40026088

080004e4 <DMA1_Stream6_IRQHandler>:
#endif
#ifndef DMA1_STREAM6_DISABLE_IRQHANDLER
void DMA1_Stream6_IRQHandler(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream6);
 80004e8:	4802      	ldr	r0, [pc, #8]	; (80004f4 <DMA1_Stream6_IRQHandler+0x10>)
 80004ea:	f7ff ff67 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80004ee:	bf00      	nop
 80004f0:	bd80      	pop	{r7, pc}
 80004f2:	bf00      	nop
 80004f4:	400260a0 	.word	0x400260a0

080004f8 <DMA1_Stream7_IRQHandler>:
#endif
#ifndef DMA1_STREAM7_DISABLE_IRQHANDLER
void DMA1_Stream7_IRQHandler(void) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA1_Stream7);
 80004fc:	4802      	ldr	r0, [pc, #8]	; (8000508 <DMA1_Stream7_IRQHandler+0x10>)
 80004fe:	f7ff ff5d 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	400260b8 	.word	0x400260b8

0800050c <DMA2_Stream0_IRQHandler>:
#endif
#ifndef DMA2_STREAM0_DISABLE_IRQHANDLER
void DMA2_Stream0_IRQHandler(void) {
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream0);
 8000510:	4802      	ldr	r0, [pc, #8]	; (800051c <DMA2_Stream0_IRQHandler+0x10>)
 8000512:	f7ff ff53 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000516:	bf00      	nop
 8000518:	bd80      	pop	{r7, pc}
 800051a:	bf00      	nop
 800051c:	40026410 	.word	0x40026410

08000520 <DMA2_Stream1_IRQHandler>:
#endif
#ifndef DMA2_STREAM1_DISABLE_IRQHANDLER
void DMA2_Stream1_IRQHandler(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream1);
 8000524:	4802      	ldr	r0, [pc, #8]	; (8000530 <DMA2_Stream1_IRQHandler+0x10>)
 8000526:	f7ff ff49 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40026428 	.word	0x40026428

08000534 <DMA2_Stream2_IRQHandler>:
#endif
#ifndef DMA2_STREAM2_DISABLE_IRQHANDLER
void DMA2_Stream2_IRQHandler(void) {
 8000534:	b580      	push	{r7, lr}
 8000536:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream2);
 8000538:	4802      	ldr	r0, [pc, #8]	; (8000544 <DMA2_Stream2_IRQHandler+0x10>)
 800053a:	f7ff ff3f 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	40026440 	.word	0x40026440

08000548 <DMA2_Stream3_IRQHandler>:
#endif
#ifndef DMA2_STREAM3_DISABLE_IRQHANDLER
void DMA2_Stream3_IRQHandler(void) {
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream3);
 800054c:	4802      	ldr	r0, [pc, #8]	; (8000558 <DMA2_Stream3_IRQHandler+0x10>)
 800054e:	f7ff ff35 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000552:	bf00      	nop
 8000554:	bd80      	pop	{r7, pc}
 8000556:	bf00      	nop
 8000558:	40026458 	.word	0x40026458

0800055c <DMA2_Stream4_IRQHandler>:
#endif
#ifndef DMA2_STREAM4_DISABLE_IRQHANDLER
void DMA2_Stream4_IRQHandler(void) {
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream4);
 8000560:	4802      	ldr	r0, [pc, #8]	; (800056c <DMA2_Stream4_IRQHandler+0x10>)
 8000562:	f7ff ff2b 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40026470 	.word	0x40026470

08000570 <DMA2_Stream5_IRQHandler>:
#endif
#ifndef DMA2_STREAM5_DISABLE_IRQHANDLER
void DMA2_Stream5_IRQHandler(void) {
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream5);
 8000574:	4802      	ldr	r0, [pc, #8]	; (8000580 <DMA2_Stream5_IRQHandler+0x10>)
 8000576:	f7ff ff21 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800057a:	bf00      	nop
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40026488 	.word	0x40026488

08000584 <DMA2_Stream6_IRQHandler>:
#endif
#ifndef DMA2_STREAM6_DISABLE_IRQHANDLER
void DMA2_Stream6_IRQHandler(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream6);
 8000588:	4802      	ldr	r0, [pc, #8]	; (8000594 <DMA2_Stream6_IRQHandler+0x10>)
 800058a:	f7ff ff17 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	400264a0 	.word	0x400264a0

08000598 <DMA2_Stream7_IRQHandler>:
#endif
#ifndef DMA2_STREAM7_DISABLE_IRQHANDLER
void DMA2_Stream7_IRQHandler(void) {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	/* Call user function */
	TM_DMA_INT_ProcessInterrupt(DMA2_Stream7);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <DMA2_Stream7_IRQHandler+0x10>)
 800059e:	f7ff ff0d 	bl	80003bc <TM_DMA_INT_ProcessInterrupt>
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	400264b8 	.word	0x400264b8

080005ac <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
 80005b6:	4909      	ldr	r1, [pc, #36]	; (80005dc <NVIC_EnableIRQ+0x30>)
 80005b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005bc:	095b      	lsrs	r3, r3, #5
 80005be:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80005c2:	f002 021f 	and.w	r2, r2, #31
 80005c6:	2001      	movs	r0, #1
 80005c8:	fa00 f202 	lsl.w	r2, r0, r2
 80005cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80005d0:	bf00      	nop
 80005d2:	370c      	adds	r7, #12
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr
 80005dc:	e000e100 	.word	0xe000e100

080005e0 <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80005ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	da0b      	bge.n	800060c <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80005f4:	490d      	ldr	r1, [pc, #52]	; (800062c <NVIC_SetPriority+0x4c>)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	3b04      	subs	r3, #4
 80005fe:	683a      	ldr	r2, [r7, #0]
 8000600:	b2d2      	uxtb	r2, r2
 8000602:	0112      	lsls	r2, r2, #4
 8000604:	b2d2      	uxtb	r2, r2
 8000606:	440b      	add	r3, r1
 8000608:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 800060a:	e009      	b.n	8000620 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 800060c:	4908      	ldr	r1, [pc, #32]	; (8000630 <NVIC_SetPriority+0x50>)
 800060e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	0112      	lsls	r2, r2, #4
 8000618:	b2d2      	uxtb	r2, r2
 800061a:	440b      	add	r3, r1
 800061c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062a:	4770      	bx	lr
 800062c:	e000ed00 	.word	0xe000ed00
 8000630:	e000e100 	.word	0xe000e100

08000634 <_Z7InitLCDv>:

	// See page 83 of manual for other possible performance boost options: instruction cache enable (ICEN) and data cache enable (DCEN)
}

void InitLCD(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	//	Enable GPIO and SPI clocks
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;			// reset and clock control - advanced high performance bus - GPIO port C
 8000638:	4a52      	ldr	r2, [pc, #328]	; (8000784 <_Z7InitLCDv+0x150>)
 800063a:	4b52      	ldr	r3, [pc, #328]	; (8000784 <_Z7InitLCDv+0x150>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f043 0304 	orr.w	r3, r3, #4
 8000642:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN;			// reset and clock control - advanced high performance bus - GPIO port D
 8000644:	4a4f      	ldr	r2, [pc, #316]	; (8000784 <_Z7InitLCDv+0x150>)
 8000646:	4b4f      	ldr	r3, [pc, #316]	; (8000784 <_Z7InitLCDv+0x150>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f043 0308 	orr.w	r3, r3, #8
 800064e:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;			// reset and clock control - advanced high performance bus - GPIO port F
 8000650:	4a4c      	ldr	r2, [pc, #304]	; (8000784 <_Z7InitLCDv+0x150>)
 8000652:	4b4c      	ldr	r3, [pc, #304]	; (8000784 <_Z7InitLCDv+0x150>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 800065c:	4a49      	ldr	r2, [pc, #292]	; (8000784 <_Z7InitLCDv+0x150>)
 800065e:	4b49      	ldr	r3, [pc, #292]	; (8000784 <_Z7InitLCDv+0x150>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000666:	6453      	str	r3, [r2, #68]	; 0x44

	// Init WRX pin PD13
	GPIOD->MODER |= GPIO_MODER_MODER13_0;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8000668:	4a47      	ldr	r2, [pc, #284]	; (8000788 <_Z7InitLCDv+0x154>)
 800066a:	4b47      	ldr	r3, [pc, #284]	; (8000788 <_Z7InitLCDv+0x154>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000672:	6013      	str	r3, [r2, #0]
	GPIOD->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR13_0;	// Medium  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 8000674:	4a44      	ldr	r2, [pc, #272]	; (8000788 <_Z7InitLCDv+0x154>)
 8000676:	4b44      	ldr	r3, [pc, #272]	; (8000788 <_Z7InitLCDv+0x154>)
 8000678:	689b      	ldr	r3, [r3, #8]
 800067a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800067e:	6093      	str	r3, [r2, #8]

	// Init CS pin PC2
	GPIOC->MODER |= GPIO_MODER_MODER2_0;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8000680:	4a42      	ldr	r2, [pc, #264]	; (800078c <_Z7InitLCDv+0x158>)
 8000682:	4b42      	ldr	r3, [pc, #264]	; (800078c <_Z7InitLCDv+0x158>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	f043 0310 	orr.w	r3, r3, #16
 800068a:	6013      	str	r3, [r2, #0]
	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR2_0;		// Medium  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 800068c:	4a3f      	ldr	r2, [pc, #252]	; (800078c <_Z7InitLCDv+0x158>)
 800068e:	4b3f      	ldr	r3, [pc, #252]	; (800078c <_Z7InitLCDv+0x158>)
 8000690:	689b      	ldr	r3, [r3, #8]
 8000692:	f043 0310 	orr.w	r3, r3, #16
 8000696:	6093      	str	r3, [r2, #8]

	// Init RESET pin PD12
	GPIOD->MODER |= GPIO_MODER_MODER12_0;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 8000698:	4a3b      	ldr	r2, [pc, #236]	; (8000788 <_Z7InitLCDv+0x154>)
 800069a:	4b3b      	ldr	r3, [pc, #236]	; (8000788 <_Z7InitLCDv+0x154>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006a2:	6013      	str	r3, [r2, #0]
	GPIOD->PUPDR |= GPIO_PUPDR_PUPDR12_0;			// Pull up - 00: No pull-up, pull-down; 01 Pull-up; 10 Pull-down; 11 Reserved
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <_Z7InitLCDv+0x154>)
 80006a6:	4b38      	ldr	r3, [pc, #224]	; (8000788 <_Z7InitLCDv+0x154>)
 80006a8:	68db      	ldr	r3, [r3, #12]
 80006aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80006ae:	60d3      	str	r3, [r2, #12]

	// Setup SPI pins -  PF7: SPI5_SCK;  PF8: SPI5_MISO;  PF9: SPI5_MOSI [all alternate function AF5 for SPI5]
	GPIOF->MODER |= GPIO_MODER_MODER7_1;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 80006b0:	4a37      	ldr	r2, [pc, #220]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006b2:	4b37      	ldr	r3, [pc, #220]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006ba:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR7;		// V High  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006be:	4b34      	ldr	r3, [pc, #208]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006c0:	689b      	ldr	r3, [r3, #8]
 80006c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006c6:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[0] |= 0b0101 << 28;					// 0b0101 = Alternate Function 5 (SPI5); 28 is position of Pin 7
 80006c8:	4a31      	ldr	r2, [pc, #196]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006ca:	4b31      	ldr	r3, [pc, #196]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006cc:	6a1b      	ldr	r3, [r3, #32]
 80006ce:	f043 43a0 	orr.w	r3, r3, #1342177280	; 0x50000000
 80006d2:	6213      	str	r3, [r2, #32]

	GPIOF->MODER |= GPIO_MODER_MODER8_1;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 80006d4:	4a2e      	ldr	r2, [pc, #184]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006d6:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006de:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8;		// V High  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 80006e0:	4a2b      	ldr	r2, [pc, #172]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006e4:	689b      	ldr	r3, [r3, #8]
 80006e6:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 80006ea:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] |= 0b0101 << 0;					// 0b0101 = Alternate Function 5 (SPI5); 0 is position of Pin 8
 80006ec:	4a28      	ldr	r2, [pc, #160]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	f043 0305 	orr.w	r3, r3, #5
 80006f6:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOF->MODER |= GPIO_MODER_MODER9_1;			// 00: Input (reset state)	01: General purpose output mode	10: Alternate function mode	11: Analog mode
 80006f8:	4a25      	ldr	r2, [pc, #148]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006fa:	4b25      	ldr	r3, [pc, #148]	; (8000790 <_Z7InitLCDv+0x15c>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000702:	6013      	str	r3, [r2, #0]
	GPIOF->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR9;		// V High  - 00: Low speed; 01: Medium speed; 10: High speed; 11: Very high speed
 8000704:	4a22      	ldr	r2, [pc, #136]	; (8000790 <_Z7InitLCDv+0x15c>)
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <_Z7InitLCDv+0x15c>)
 8000708:	689b      	ldr	r3, [r3, #8]
 800070a:	f443 2340 	orr.w	r3, r3, #786432	; 0xc0000
 800070e:	6093      	str	r3, [r2, #8]
	GPIOF->AFR[1] |= 0b0101 << 4;					// 0b0101 = Alternate Function 5 (SPI5); 4 is position of Pin 9
 8000710:	4a1f      	ldr	r2, [pc, #124]	; (8000790 <_Z7InitLCDv+0x15c>)
 8000712:	4b1f      	ldr	r3, [pc, #124]	; (8000790 <_Z7InitLCDv+0x15c>)
 8000714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000716:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800071a:	6253      	str	r3, [r2, #36]	; 0x24

	// Configure SPI
	SPI5->CR1 |= SPI_CR1_SSM;						// Software slave management: When SSM bit is set, NSS pin input is replaced with the value from the SSI bit
 800071c:	4a1d      	ldr	r2, [pc, #116]	; (8000794 <_Z7InitLCDv+0x160>)
 800071e:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <_Z7InitLCDv+0x160>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b29b      	uxth	r3, r3
 8000724:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000728:	b29b      	uxth	r3, r3
 800072a:	8013      	strh	r3, [r2, #0]
	SPI5->CR1 |= SPI_CR1_SSI;						// Internal slave select
 800072c:	4a19      	ldr	r2, [pc, #100]	; (8000794 <_Z7InitLCDv+0x160>)
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <_Z7InitLCDv+0x160>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	b29b      	uxth	r3, r3
 8000734:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000738:	b29b      	uxth	r3, r3
 800073a:	8013      	strh	r3, [r2, #0]
	SPI5->CR1 |= SPI_CR1_BR_0;						// Baud rate control prescaler: 0b001: fPCLK/4; 0b100: fPCLK/32
 800073c:	4a15      	ldr	r2, [pc, #84]	; (8000794 <_Z7InitLCDv+0x160>)
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <_Z7InitLCDv+0x160>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	b29b      	uxth	r3, r3
 8000744:	f043 0308 	orr.w	r3, r3, #8
 8000748:	b29b      	uxth	r3, r3
 800074a:	8013      	strh	r3, [r2, #0]
	SPI5->CR1 |= SPI_CR1_MSTR;						// Master selection
 800074c:	4a11      	ldr	r2, [pc, #68]	; (8000794 <_Z7InitLCDv+0x160>)
 800074e:	4b11      	ldr	r3, [pc, #68]	; (8000794 <_Z7InitLCDv+0x160>)
 8000750:	881b      	ldrh	r3, [r3, #0]
 8000752:	b29b      	uxth	r3, r3
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	b29b      	uxth	r3, r3
 800075a:	8013      	strh	r3, [r2, #0]

	SPI5->CR1 |= SPI_CR1_SPE;						// Enable SPI
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <_Z7InitLCDv+0x160>)
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <_Z7InitLCDv+0x160>)
 8000760:	881b      	ldrh	r3, [r3, #0]
 8000762:	b29b      	uxth	r3, r3
 8000764:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000768:	b29b      	uxth	r3, r3
 800076a:	8013      	strh	r3, [r2, #0]

	// Configure DMA
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 800076c:	4a05      	ldr	r2, [pc, #20]	; (8000784 <_Z7InitLCDv+0x150>)
 800076e:	4b05      	ldr	r3, [pc, #20]	; (8000784 <_Z7InitLCDv+0x150>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000776:	6313      	str	r3, [r2, #48]	; 0x30
	#define SPI5_DMA_RX_STREAM    DMA2_Stream5
	#define SPI5_DMA_RX_CHANNEL   DMA_Channel_7
	#endif
*/

}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	40023800 	.word	0x40023800
 8000788:	40020c00 	.word	0x40020c00
 800078c:	40020800 	.word	0x40020800
 8000790:	40021400 	.word	0x40021400
 8000794:	40015000 	.word	0x40015000

08000798 <_Z7InitADCv>:

#define ADC_BUFFER_LENGTH 8
volatile uint16_t ADC_array[ADC_BUFFER_LENGTH];

void InitADC(void)
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	//	Setup Timer 2 to trigger ADC
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;				// Enable Timer 2 clock
 800079c:	4a78      	ldr	r2, [pc, #480]	; (8000980 <_Z7InitADCv+0x1e8>)
 800079e:	4b78      	ldr	r3, [pc, #480]	; (8000980 <_Z7InitADCv+0x1e8>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f043 0301 	orr.w	r3, r3, #1
 80007a6:	6413      	str	r3, [r2, #64]	; 0x40
	TIM2->CR2 |= TIM_CR2_MMS_2;						// 100: Compare - OC1REF signal is used as trigger output (TRGO)
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007b0:	889b      	ldrh	r3, [r3, #4]
 80007b2:	b29b      	uxth	r3, r3
 80007b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b8:	b29b      	uxth	r3, r3
 80007ba:	8093      	strh	r3, [r2, #4]
	TIM2->PSC = 20 - 1;								// Prescaler
 80007bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c0:	2213      	movs	r2, #19
 80007c2:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM2->ARR = 100 - 1;							// Auto-reload register (ie reset counter) divided by 100
 80007c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007c8:	2263      	movs	r2, #99	; 0x63
 80007ca:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR1 = 50 - 1;							// Capture and compare - ie when counter hits this number PWM high
 80007cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007d0:	2231      	movs	r2, #49	; 0x31
 80007d2:	635a      	str	r2, [r3, #52]	; 0x34
	TIM2->CCER |= TIM_CCER_CC1E;					// Capture/Compare 1 output enable
 80007d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007dc:	8c1b      	ldrh	r3, [r3, #32]
 80007de:	b29b      	uxth	r3, r3
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	b29b      	uxth	r3, r3
 80007e6:	8413      	strh	r3, [r2, #32]
	TIM2->CCMR1 |= TIM_CCMR1_OC1M_1 |TIM_CCMR1_OC1M_2;		// 110 PWM Mode 1
 80007e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80007f0:	8b1b      	ldrh	r3, [r3, #24]
 80007f2:	b29b      	uxth	r3, r3
 80007f4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80007f8:	b29b      	uxth	r3, r3
 80007fa:	8313      	strh	r3, [r2, #24]
	TIM2->CR1 |= TIM_CR1_CEN;
 80007fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000800:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000804:	881b      	ldrh	r3, [r3, #0]
 8000806:	b29b      	uxth	r3, r3
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	b29b      	uxth	r3, r3
 800080e:	8013      	strh	r3, [r2, #0]

	// Enable ADC1 and GPIO clock sources
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000810:	4a5b      	ldr	r2, [pc, #364]	; (8000980 <_Z7InitADCv+0x1e8>)
 8000812:	4b5b      	ldr	r3, [pc, #364]	; (8000980 <_Z7InitADCv+0x1e8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f043 0301 	orr.w	r3, r3, #1
 800081a:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 800081c:	4a58      	ldr	r2, [pc, #352]	; (8000980 <_Z7InitADCv+0x1e8>)
 800081e:	4b58      	ldr	r3, [pc, #352]	; (8000980 <_Z7InitADCv+0x1e8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000828:	4a55      	ldr	r2, [pc, #340]	; (8000980 <_Z7InitADCv+0x1e8>)
 800082a:	4b55      	ldr	r3, [pc, #340]	; (8000980 <_Z7InitADCv+0x1e8>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000832:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable ADC - PC3: ADC123_IN13; PA5: ADC12_IN5;
	GPIOC->MODER |= GPIO_MODER_MODER3;				// Set PC3 to Analog mode (0b11)
 8000834:	4a53      	ldr	r2, [pc, #332]	; (8000984 <_Z7InitADCv+0x1ec>)
 8000836:	4b53      	ldr	r3, [pc, #332]	; (8000984 <_Z7InitADCv+0x1ec>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800083e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= GPIO_MODER_MODER5;				// Set PA5 to Analog mode (0b11)
 8000840:	4a51      	ldr	r2, [pc, #324]	; (8000988 <_Z7InitADCv+0x1f0>)
 8000842:	4b51      	ldr	r3, [pc, #324]	; (8000988 <_Z7InitADCv+0x1f0>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800084a:	6013      	str	r3, [r2, #0]

	ADC1->CR1 |= ADC_CR1_SCAN;						// Activate scan mode
 800084c:	4a4f      	ldr	r2, [pc, #316]	; (800098c <_Z7InitADCv+0x1f4>)
 800084e:	4b4f      	ldr	r3, [pc, #316]	; (800098c <_Z7InitADCv+0x1f4>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000856:	6053      	str	r3, [r2, #4]
	//ADC1->SQR1 = (ADC_BUFFER_LENGTH - 1) << 20;	// Number of conversions in sequence
	ADC1->SQR1 = (2 - 1) << 20;						// Number of conversions in sequence (limit to two for now as we are getting multiple samples to average)
 8000858:	4b4c      	ldr	r3, [pc, #304]	; (800098c <_Z7InitADCv+0x1f4>)
 800085a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800085e:	62da      	str	r2, [r3, #44]	; 0x2c
	ADC1->SQR3 |= 13 << 0;							// Set IN13  1st conversion in sequence
 8000860:	4a4a      	ldr	r2, [pc, #296]	; (800098c <_Z7InitADCv+0x1f4>)
 8000862:	4b4a      	ldr	r3, [pc, #296]	; (800098c <_Z7InitADCv+0x1f4>)
 8000864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000866:	f043 030d 	orr.w	r3, r3, #13
 800086a:	6353      	str	r3, [r2, #52]	; 0x34
	ADC1->SQR3 |= 5 << 5;							// Set IN5  2nd conversion in sequence
 800086c:	4a47      	ldr	r2, [pc, #284]	; (800098c <_Z7InitADCv+0x1f4>)
 800086e:	4b47      	ldr	r3, [pc, #284]	; (800098c <_Z7InitADCv+0x1f4>)
 8000870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000872:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000876:	6353      	str	r3, [r2, #52]	; 0x34

	// Set to 56 cycles (0b11) sampling speed (SMPR2 Left shift speed 3 x ADC_INx up to input 9; use SMPR1 from 0 for ADC_IN10+)
	// 000: 3 cycles; 001: 15 cycles; 010: 28 cycles; 011: 56 cycles; 100: 84 cycles; 101: 112 cycles; 110: 144 cycles; 111: 480 cycles
	ADC1->SMPR1 |= 0b110 << 9;						// Set speed of IN13
 8000878:	4a44      	ldr	r2, [pc, #272]	; (800098c <_Z7InitADCv+0x1f4>)
 800087a:	4b44      	ldr	r3, [pc, #272]	; (800098c <_Z7InitADCv+0x1f4>)
 800087c:	68db      	ldr	r3, [r3, #12]
 800087e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000882:	60d3      	str	r3, [r2, #12]
	ADC1->SMPR2 |= 0b110 << 15;						// Set speed of IN5
 8000884:	4a41      	ldr	r2, [pc, #260]	; (800098c <_Z7InitADCv+0x1f4>)
 8000886:	4b41      	ldr	r3, [pc, #260]	; (800098c <_Z7InitADCv+0x1f4>)
 8000888:	691b      	ldr	r3, [r3, #16]
 800088a:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800088e:	6113      	str	r3, [r2, #16]

	ADC1->CR2 |= ADC_CR2_EOCS;						// Trigger interrupt on end of each individual conversion
 8000890:	4a3e      	ldr	r2, [pc, #248]	; (800098c <_Z7InitADCv+0x1f4>)
 8000892:	4b3e      	ldr	r3, [pc, #248]	; (800098c <_Z7InitADCv+0x1f4>)
 8000894:	689b      	ldr	r3, [r3, #8]
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTEN_0;					// ADC hardware trigger 00: Trigger detection disabled; 01: Trigger detection on the rising edge; 10: Trigger detection on the falling edge; 11: Trigger detection on both the rising and falling edges
 800089c:	4a3b      	ldr	r2, [pc, #236]	; (800098c <_Z7InitADCv+0x1f4>)
 800089e:	4b3b      	ldr	r3, [pc, #236]	; (800098c <_Z7InitADCv+0x1f4>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008a6:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_EXTSEL_1 | ADC_CR2_EXTSEL_2;	// ADC External trigger: 0110 = TIM2_TRGO event
 80008a8:	4a38      	ldr	r2, [pc, #224]	; (800098c <_Z7InitADCv+0x1f4>)
 80008aa:	4b38      	ldr	r3, [pc, #224]	; (800098c <_Z7InitADCv+0x1f4>)
 80008ac:	689b      	ldr	r3, [r3, #8]
 80008ae:	f043 63c0 	orr.w	r3, r3, #100663296	; 0x6000000
 80008b2:	6093      	str	r3, [r2, #8]

	// Enable DMA - DMA2, Channel 0, Stream 0  = ADC1 (Manual p207)
	ADC1->CR2 |= ADC_CR2_DMA;						// Enable DMA Mode on ADC1
 80008b4:	4a35      	ldr	r2, [pc, #212]	; (800098c <_Z7InitADCv+0x1f4>)
 80008b6:	4b35      	ldr	r3, [pc, #212]	; (800098c <_Z7InitADCv+0x1f4>)
 80008b8:	689b      	ldr	r3, [r3, #8]
 80008ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008be:	6093      	str	r3, [r2, #8]
	ADC1->CR2 |= ADC_CR2_DDS;						// DMA requests are issued as long as data are converted and DMA=1
 80008c0:	4a32      	ldr	r2, [pc, #200]	; (800098c <_Z7InitADCv+0x1f4>)
 80008c2:	4b32      	ldr	r3, [pc, #200]	; (800098c <_Z7InitADCv+0x1f4>)
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ca:	6093      	str	r3, [r2, #8]
	RCC->AHB1ENR|= RCC_AHB1ENR_DMA2EN;
 80008cc:	4a2c      	ldr	r2, [pc, #176]	; (8000980 <_Z7InitADCv+0x1e8>)
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <_Z7InitADCv+0x1e8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008d6:	6313      	str	r3, [r2, #48]	; 0x30

	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;				// 00 = Peripheral-to-memory
 80008d8:	4a2d      	ldr	r2, [pc, #180]	; (8000990 <_Z7InitADCv+0x1f8>)
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <_Z7InitADCv+0x1f8>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80008e2:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_PL_1;				// Priority: 00 = low; 01 = Medium; 10 = High; 11 = Very High
 80008e4:	4a2a      	ldr	r2, [pc, #168]	; (8000990 <_Z7InitADCv+0x1f8>)
 80008e6:	4b2a      	ldr	r3, [pc, #168]	; (8000990 <_Z7InitADCv+0x1f8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ee:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 80008f0:	4a27      	ldr	r2, [pc, #156]	; (8000990 <_Z7InitADCv+0x1f8>)
 80008f2:	4b27      	ldr	r3, [pc, #156]	; (8000990 <_Z7InitADCv+0x1f8>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80008fa:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 80008fc:	4a24      	ldr	r2, [pc, #144]	; (8000990 <_Z7InitADCv+0x1f8>)
 80008fe:	4b24      	ldr	r3, [pc, #144]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000906:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_PINC;				// Peripheral not in increment mode
 8000908:	4a21      	ldr	r2, [pc, #132]	; (8000990 <_Z7InitADCv+0x1f8>)
 800090a:	4b21      	ldr	r3, [pc, #132]	; (8000990 <_Z7InitADCv+0x1f8>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000912:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_MINC;				// Memory in increment mode
 8000914:	4a1e      	ldr	r2, [pc, #120]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000916:	4b1e      	ldr	r3, [pc, #120]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800091e:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_SxCR_CIRC;				// circular mode to keep refilling buffer
 8000920:	4a1b      	ldr	r2, [pc, #108]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000922:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092a:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR &= ~DMA_SxCR_DIR;				// data transfer direction: 00: peripheral-to-memory; 01: memory-to-peripheral; 10: memory-to-memory
 800092c:	4a18      	ldr	r2, [pc, #96]	; (8000990 <_Z7InitADCv+0x1f8>)
 800092e:	4b18      	ldr	r3, [pc, #96]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000936:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->NDTR |= ADC_BUFFER_LENGTH;		// Number of data items to transfer (ie size of ADC buffer)
 8000938:	4a15      	ldr	r2, [pc, #84]	; (8000990 <_Z7InitADCv+0x1f8>)
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <_Z7InitADCv+0x1f8>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f043 0308 	orr.w	r3, r3, #8
 8000942:	6053      	str	r3, [r2, #4]
	DMA2_Stream0->PAR = (uint32_t)(&(ADC1->DR));	// Configure the peripheral data register address
 8000944:	4b12      	ldr	r3, [pc, #72]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000946:	4a13      	ldr	r2, [pc, #76]	; (8000994 <_Z7InitADCv+0x1fc>)
 8000948:	609a      	str	r2, [r3, #8]
	DMA2_Stream0->M0AR = (uint32_t)(ADC_array);		// Configure the memory address (note that M1AR is used for double-buffer mode)
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <_Z7InitADCv+0x1f8>)
 800094c:	4a12      	ldr	r2, [pc, #72]	; (8000998 <_Z7InitADCv+0x200>)
 800094e:	60da      	str	r2, [r3, #12]
	DMA2_Stream0->CR &= ~DMA_SxCR_CHSEL;			// channel select to 0 for ADC1
 8000950:	4a0f      	ldr	r2, [pc, #60]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 800095a:	6013      	str	r3, [r2, #0]

	DMA2_Stream0->CR |= DMA_SxCR_EN;				// Enable DMA2
 800095c:	4a0c      	ldr	r2, [pc, #48]	; (8000990 <_Z7InitADCv+0x1f8>)
 800095e:	4b0c      	ldr	r3, [pc, #48]	; (8000990 <_Z7InitADCv+0x1f8>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f043 0301 	orr.w	r3, r3, #1
 8000966:	6013      	str	r3, [r2, #0]
	ADC1->CR2 |= ADC_CR2_ADON;						// Activate ADC
 8000968:	4a08      	ldr	r2, [pc, #32]	; (800098c <_Z7InitADCv+0x1f4>)
 800096a:	4b08      	ldr	r3, [pc, #32]	; (800098c <_Z7InitADCv+0x1f4>)
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	f043 0301 	orr.w	r3, r3, #1
 8000972:	6093      	str	r3, [r2, #8]

}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020800 	.word	0x40020800
 8000988:	40020000 	.word	0x40020000
 800098c:	40012000 	.word	0x40012000
 8000990:	40026410 	.word	0x40026410
 8000994:	4001204c 	.word	0x4001204c
 8000998:	20000034 	.word	0x20000034

0800099c <_Z9InitTimerv>:

void InitTimer()
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
	//	Setup Timer 3 on an interrupt to trigger sample acquisition
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;				// Enable Timer 3
 80009a0:	4a16      	ldr	r2, [pc, #88]	; (80009fc <_Z9InitTimerv+0x60>)
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <_Z9InitTimerv+0x60>)
 80009a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009a6:	f043 0302 	orr.w	r3, r3, #2
 80009aa:	6413      	str	r3, [r2, #64]	; 0x40
	TIM3->PSC = 1000;								// Set prescaler to fire at sample rate - this is divided by 4 to match the APB2 prescaler
 80009ac:	4b14      	ldr	r3, [pc, #80]	; (8000a00 <_Z9InitTimerv+0x64>)
 80009ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009b2:	851a      	strh	r2, [r3, #40]	; 0x28
	TIM3->ARR = 30; 								// Set maximum count value (auto reload register) - set to system clock / sampling rate
 80009b4:	4b12      	ldr	r3, [pc, #72]	; (8000a00 <_Z9InitTimerv+0x64>)
 80009b6:	221e      	movs	r2, #30
 80009b8:	62da      	str	r2, [r3, #44]	; 0x2c

	TIM3->DIER |= TIM_DIER_UIE;						//  DMA/interrupt enable register
 80009ba:	4a11      	ldr	r2, [pc, #68]	; (8000a00 <_Z9InitTimerv+0x64>)
 80009bc:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <_Z9InitTimerv+0x64>)
 80009be:	899b      	ldrh	r3, [r3, #12]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	f043 0301 	orr.w	r3, r3, #1
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	8193      	strh	r3, [r2, #12]
	NVIC_EnableIRQ(TIM3_IRQn);
 80009ca:	201d      	movs	r0, #29
 80009cc:	f7ff fdee 	bl	80005ac <NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn, 0);
 80009d0:	2100      	movs	r1, #0
 80009d2:	201d      	movs	r0, #29
 80009d4:	f7ff fe04 	bl	80005e0 <NVIC_SetPriority>

	TIM3->CR1 |= TIM_CR1_CEN;
 80009d8:	4a09      	ldr	r2, [pc, #36]	; (8000a00 <_Z9InitTimerv+0x64>)
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <_Z9InitTimerv+0x64>)
 80009dc:	881b      	ldrh	r3, [r3, #0]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	8013      	strh	r3, [r2, #0]
	TIM3->EGR |= TIM_EGR_UG;
 80009e8:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <_Z9InitTimerv+0x64>)
 80009ea:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <_Z9InitTimerv+0x64>)
 80009ec:	8a9b      	ldrh	r3, [r3, #20]
 80009ee:	b29b      	uxth	r3, r3
 80009f0:	f043 0301 	orr.w	r3, r3, #1
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	8293      	strh	r3, [r2, #20]
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800
 8000a00:	40000400 	.word	0x40000400

08000a04 <TIM3_IRQHandler>:
} trigger;

//	Use extern C to allow linker to find ISR
extern "C"
{
	void TIM3_IRQHandler(void) {
 8000a04:	b480      	push	{r7}
 8000a06:	b083      	sub	sp, #12
 8000a08:	af00      	add	r7, sp, #0
		if (TIM3->SR & TIM_SR_UIF) 						// if UIF flag is set
 8000a0a:	4b97      	ldr	r3, [pc, #604]	; (8000c68 <TIM3_IRQHandler+0x264>)
 8000a0c:	8a1b      	ldrh	r3, [r3, #16]
 8000a0e:	b29b      	uxth	r3, r3
 8000a10:	f003 0301 	and.w	r3, r3, #1
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	bf14      	ite	ne
 8000a18:	2301      	movne	r3, #1
 8000a1a:	2300      	moveq	r3, #0
 8000a1c:	b2db      	uxtb	r3, r3
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	f000 8166 	beq.w	8000cf0 <TIM3_IRQHandler+0x2ec>
		{
			TIM3->SR &= ~TIM_SR_UIF;					// clear UIF flag
 8000a24:	4a90      	ldr	r2, [pc, #576]	; (8000c68 <TIM3_IRQHandler+0x264>)
 8000a26:	4b90      	ldr	r3, [pc, #576]	; (8000c68 <TIM3_IRQHandler+0x264>)
 8000a28:	8a1b      	ldrh	r3, [r3, #16]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	f023 0301 	bic.w	r3, r3, #1
 8000a30:	b29b      	uxth	r3, r3
 8000a32:	8213      	strh	r3, [r2, #16]

			adc0 = (((float)(ADC_array[0] + ADC_array[2] + ADC_array[4] + ADC_array[6]) / 4) / 4096 * 240) - 30;
 8000a34:	4b8d      	ldr	r3, [pc, #564]	; (8000c6c <TIM3_IRQHandler+0x268>)
 8000a36:	881b      	ldrh	r3, [r3, #0]
 8000a38:	b29b      	uxth	r3, r3
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	4b8b      	ldr	r3, [pc, #556]	; (8000c6c <TIM3_IRQHandler+0x268>)
 8000a3e:	889b      	ldrh	r3, [r3, #4]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4413      	add	r3, r2
 8000a44:	4a89      	ldr	r2, [pc, #548]	; (8000c6c <TIM3_IRQHandler+0x268>)
 8000a46:	8912      	ldrh	r2, [r2, #8]
 8000a48:	b292      	uxth	r2, r2
 8000a4a:	4413      	add	r3, r2
 8000a4c:	4a87      	ldr	r2, [pc, #540]	; (8000c6c <TIM3_IRQHandler+0x268>)
 8000a4e:	8992      	ldrh	r2, [r2, #12]
 8000a50:	b292      	uxth	r2, r2
 8000a52:	4413      	add	r3, r2
 8000a54:	ee07 3a90 	vmov	s15, r3
 8000a58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5c:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000a60:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a64:	eddf 6a82 	vldr	s13, [pc, #520]	; 8000c70 <TIM3_IRQHandler+0x26c>
 8000a68:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a6c:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8000c74 <TIM3_IRQHandler+0x270>
 8000a70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a74:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000a78:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000a80:	edc7 7a01 	vstr	s15, [r7, #4]
 8000a84:	88bb      	ldrh	r3, [r7, #4]
 8000a86:	b29a      	uxth	r2, r3
 8000a88:	4b7b      	ldr	r3, [pc, #492]	; (8000c78 <TIM3_IRQHandler+0x274>)
 8000a8a:	801a      	strh	r2, [r3, #0]
			adc1 = (((float)(ADC_array[1] + ADC_array[3] + ADC_array[5] + ADC_array[7]) / 4) / 4096 * 240) - 30;
 8000a8c:	4b77      	ldr	r3, [pc, #476]	; (8000c6c <TIM3_IRQHandler+0x268>)
 8000a8e:	885b      	ldrh	r3, [r3, #2]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b75      	ldr	r3, [pc, #468]	; (8000c6c <TIM3_IRQHandler+0x268>)
 8000a96:	88db      	ldrh	r3, [r3, #6]
 8000a98:	b29b      	uxth	r3, r3
 8000a9a:	4413      	add	r3, r2
 8000a9c:	4a73      	ldr	r2, [pc, #460]	; (8000c6c <TIM3_IRQHandler+0x268>)
 8000a9e:	8952      	ldrh	r2, [r2, #10]
 8000aa0:	b292      	uxth	r2, r2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	4a71      	ldr	r2, [pc, #452]	; (8000c6c <TIM3_IRQHandler+0x268>)
 8000aa6:	89d2      	ldrh	r2, [r2, #14]
 8000aa8:	b292      	uxth	r2, r2
 8000aaa:	4413      	add	r3, r2
 8000aac:	ee07 3a90 	vmov	s15, r3
 8000ab0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ab4:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000ab8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000abc:	eddf 6a6c 	vldr	s13, [pc, #432]	; 8000c70 <TIM3_IRQHandler+0x26c>
 8000ac0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ac4:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8000c74 <TIM3_IRQHandler+0x270>
 8000ac8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000acc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8000ad0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ad8:	edc7 7a01 	vstr	s15, [r7, #4]
 8000adc:	88bb      	ldrh	r3, [r7, #4]
 8000ade:	b29a      	uxth	r2, r3
 8000ae0:	4b66      	ldr	r3, [pc, #408]	; (8000c7c <TIM3_IRQHandler+0x278>)
 8000ae2:	801a      	strh	r2, [r3, #0]
			//adc0 = ((float)ADC_array[0] / 4096 * 240) - 30;

			// check if we should start capturing - ie not drawing from the capture buffer and crossed over the trigger threshold
			if ((!drawing || captureBufferNumber != drawBufferNumber) && (!capturing && oldAdc0 < trigger.y && adc0 >= trigger.y)) {
 8000ae4:	4b66      	ldr	r3, [pc, #408]	; (8000c80 <TIM3_IRQHandler+0x27c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b2db      	uxtb	r3, r3
 8000aea:	f083 0301 	eor.w	r3, r3, #1
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d107      	bne.n	8000b04 <TIM3_IRQHandler+0x100>
 8000af4:	4b63      	ldr	r3, [pc, #396]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4b63      	ldr	r3, [pc, #396]	; (8000c88 <TIM3_IRQHandler+0x284>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	b2db      	uxtb	r3, r3
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d019      	beq.n	8000b38 <TIM3_IRQHandler+0x134>
 8000b04:	4b61      	ldr	r3, [pc, #388]	; (8000c8c <TIM3_IRQHandler+0x288>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	b2db      	uxtb	r3, r3
 8000b0a:	f083 0301 	eor.w	r3, r3, #1
 8000b0e:	b2db      	uxtb	r3, r3
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d011      	beq.n	8000b38 <TIM3_IRQHandler+0x134>
 8000b14:	4b5e      	ldr	r3, [pc, #376]	; (8000c90 <TIM3_IRQHandler+0x28c>)
 8000b16:	881b      	ldrh	r3, [r3, #0]
 8000b18:	b29b      	uxth	r3, r3
 8000b1a:	461a      	mov	r2, r3
 8000b1c:	4b5d      	ldr	r3, [pc, #372]	; (8000c94 <TIM3_IRQHandler+0x290>)
 8000b1e:	885b      	ldrh	r3, [r3, #2]
 8000b20:	429a      	cmp	r2, r3
 8000b22:	da09      	bge.n	8000b38 <TIM3_IRQHandler+0x134>
 8000b24:	4b54      	ldr	r3, [pc, #336]	; (8000c78 <TIM3_IRQHandler+0x274>)
 8000b26:	881b      	ldrh	r3, [r3, #0]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	461a      	mov	r2, r3
 8000b2c:	4b59      	ldr	r3, [pc, #356]	; (8000c94 <TIM3_IRQHandler+0x290>)
 8000b2e:	885b      	ldrh	r3, [r3, #2]
 8000b30:	429a      	cmp	r2, r3
 8000b32:	db01      	blt.n	8000b38 <TIM3_IRQHandler+0x134>
 8000b34:	2301      	movs	r3, #1
 8000b36:	e000      	b.n	8000b3a <TIM3_IRQHandler+0x136>
 8000b38:	2300      	movs	r3, #0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d034      	beq.n	8000ba8 <TIM3_IRQHandler+0x1a4>
				capturing = true;
 8000b3e:	4b53      	ldr	r3, [pc, #332]	; (8000c8c <TIM3_IRQHandler+0x288>)
 8000b40:	2201      	movs	r2, #1
 8000b42:	701a      	strb	r2, [r3, #0]

				// calculate the drawing offset based on the current capture position minus the horizontal trigger position
				drawOffset[captureBufferNumber] = capturePos - trigger.x;
 8000b44:	4b4f      	ldr	r3, [pc, #316]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	4619      	mov	r1, r3
 8000b4c:	4b52      	ldr	r3, [pc, #328]	; (8000c98 <TIM3_IRQHandler+0x294>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	b29a      	uxth	r2, r3
 8000b52:	4b50      	ldr	r3, [pc, #320]	; (8000c94 <TIM3_IRQHandler+0x290>)
 8000b54:	881b      	ldrh	r3, [r3, #0]
 8000b56:	1ad3      	subs	r3, r2, r3
 8000b58:	b29b      	uxth	r3, r3
 8000b5a:	b21a      	sxth	r2, r3
 8000b5c:	4b4f      	ldr	r3, [pc, #316]	; (8000c9c <TIM3_IRQHandler+0x298>)
 8000b5e:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
				if (drawOffset[captureBufferNumber] < 0) drawOffset[captureBufferNumber] += OSCWIDTH;
 8000b62:	4b48      	ldr	r3, [pc, #288]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	b2db      	uxtb	r3, r3
 8000b68:	461a      	mov	r2, r3
 8000b6a:	4b4c      	ldr	r3, [pc, #304]	; (8000c9c <TIM3_IRQHandler+0x298>)
 8000b6c:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	0bdb      	lsrs	r3, r3, #15
 8000b74:	b2db      	uxtb	r3, r3
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d00f      	beq.n	8000b9a <TIM3_IRQHandler+0x196>
 8000b7a:	4b42      	ldr	r3, [pc, #264]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	b2db      	uxtb	r3, r3
 8000b80:	461a      	mov	r2, r3
 8000b82:	4619      	mov	r1, r3
 8000b84:	4b45      	ldr	r3, [pc, #276]	; (8000c9c <TIM3_IRQHandler+0x298>)
 8000b86:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8000b8a:	b29b      	uxth	r3, r3
 8000b8c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	b219      	sxth	r1, r3
 8000b94:	4b41      	ldr	r3, [pc, #260]	; (8000c9c <TIM3_IRQHandler+0x298>)
 8000b96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]

				// captureSamples is used to check if a sample is ready to be drawn
				captureSamples = trigger.x - 1;
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <TIM3_IRQHandler+0x290>)
 8000b9c:	881b      	ldrh	r3, [r3, #0]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	b29b      	uxth	r3, r3
 8000ba2:	b21a      	sxth	r2, r3
 8000ba4:	4b3e      	ldr	r3, [pc, #248]	; (8000ca0 <TIM3_IRQHandler+0x29c>)
 8000ba6:	801a      	strh	r2, [r3, #0]
			}

			// if capturing check if write buffer is full and switch to next buffer if so; if not full store current reading
			if (capturing && capturePos == drawOffset[captureBufferNumber]) {
 8000ba8:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <TIM3_IRQHandler+0x288>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d00e      	beq.n	8000bd0 <TIM3_IRQHandler+0x1cc>
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <TIM3_IRQHandler+0x294>)
 8000bb4:	881b      	ldrh	r3, [r3, #0]
 8000bb6:	b29b      	uxth	r3, r3
 8000bb8:	461a      	mov	r2, r3
 8000bba:	4b32      	ldr	r3, [pc, #200]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4b36      	ldr	r3, [pc, #216]	; (8000c9c <TIM3_IRQHandler+0x298>)
 8000bc4:	f933 3011 	ldrsh.w	r3, [r3, r1, lsl #1]
 8000bc8:	429a      	cmp	r2, r3
 8000bca:	d101      	bne.n	8000bd0 <TIM3_IRQHandler+0x1cc>
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e000      	b.n	8000bd2 <TIM3_IRQHandler+0x1ce>
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d021      	beq.n	8000c1a <TIM3_IRQHandler+0x216>
				capturing = false;
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <TIM3_IRQHandler+0x288>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]

				// switch the capture buffer and get a pointer to the current capture buffer
				captureBufferNumber = captureBufferNumber == 1 ? 0 : 1;
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	bf14      	ite	ne
 8000be6:	2301      	movne	r3, #1
 8000be8:	2300      	moveq	r3, #0
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	461a      	mov	r2, r3
 8000bee:	4b25      	ldr	r3, [pc, #148]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000bf0:	701a      	strb	r2, [r3, #0]
				captureABuffer = captureBufferNumber == 0 ? ChannelA0 : ChannelA1;
 8000bf2:	4b24      	ldr	r3, [pc, #144]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d101      	bne.n	8000c00 <TIM3_IRQHandler+0x1fc>
 8000bfc:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <TIM3_IRQHandler+0x2a0>)
 8000bfe:	e000      	b.n	8000c02 <TIM3_IRQHandler+0x1fe>
 8000c00:	4b29      	ldr	r3, [pc, #164]	; (8000ca8 <TIM3_IRQHandler+0x2a4>)
 8000c02:	4a2a      	ldr	r2, [pc, #168]	; (8000cac <TIM3_IRQHandler+0x2a8>)
 8000c04:	6013      	str	r3, [r2, #0]
				captureBBuffer = captureBufferNumber == 0 ? ChannelB0 : ChannelB1;
 8000c06:	4b1f      	ldr	r3, [pc, #124]	; (8000c84 <TIM3_IRQHandler+0x280>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d101      	bne.n	8000c14 <TIM3_IRQHandler+0x210>
 8000c10:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <TIM3_IRQHandler+0x2ac>)
 8000c12:	e000      	b.n	8000c16 <TIM3_IRQHandler+0x212>
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <TIM3_IRQHandler+0x2b0>)
 8000c16:	4a28      	ldr	r2, [pc, #160]	; (8000cb8 <TIM3_IRQHandler+0x2b4>)
 8000c18:	6013      	str	r3, [r2, #0]
			}
			captureABuffer[capturePos] = adc0;
 8000c1a:	4b24      	ldr	r3, [pc, #144]	; (8000cac <TIM3_IRQHandler+0x2a8>)
 8000c1c:	681a      	ldr	r2, [r3, #0]
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <TIM3_IRQHandler+0x294>)
 8000c20:	881b      	ldrh	r3, [r3, #0]
 8000c22:	b29b      	uxth	r3, r3
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	4a13      	ldr	r2, [pc, #76]	; (8000c78 <TIM3_IRQHandler+0x274>)
 8000c2a:	8812      	ldrh	r2, [r2, #0]
 8000c2c:	b292      	uxth	r2, r2
 8000c2e:	801a      	strh	r2, [r3, #0]
			captureBBuffer[capturePos] = adc1;
 8000c30:	4b21      	ldr	r3, [pc, #132]	; (8000cb8 <TIM3_IRQHandler+0x2b4>)
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <TIM3_IRQHandler+0x294>)
 8000c36:	881b      	ldrh	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	4413      	add	r3, r2
 8000c3e:	4a0f      	ldr	r2, [pc, #60]	; (8000c7c <TIM3_IRQHandler+0x278>)
 8000c40:	8812      	ldrh	r2, [r2, #0]
 8000c42:	b292      	uxth	r2, r2
 8000c44:	801a      	strh	r2, [r3, #0]

			if (capturePos == OSCWIDTH - 1) {
 8000c46:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <TIM3_IRQHandler+0x294>)
 8000c48:	881b      	ldrh	r3, [r3, #0]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	f240 123f 	movw	r2, #319	; 0x13f
 8000c50:	4293      	cmp	r3, r2
 8000c52:	bf0c      	ite	eq
 8000c54:	2301      	moveq	r3, #1
 8000c56:	2300      	movne	r3, #0
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d02e      	beq.n	8000cbc <TIM3_IRQHandler+0x2b8>
				capturePos = 0;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <TIM3_IRQHandler+0x294>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	801a      	strh	r2, [r3, #0]
 8000c64:	e031      	b.n	8000cca <TIM3_IRQHandler+0x2c6>
 8000c66:	bf00      	nop
 8000c68:	40000400 	.word	0x40000400
 8000c6c:	20000034 	.word	0x20000034
 8000c70:	45800000 	.word	0x45800000
 8000c74:	43700000 	.word	0x43700000
 8000c78:	20000044 	.word	0x20000044
 8000c7c:	20000048 	.word	0x20000048
 8000c80:	20000a68 	.word	0x20000a68
 8000c84:	20000a69 	.word	0x20000a69
 8000c88:	20000a6a 	.word	0x20000a6a
 8000c8c:	20000a64 	.word	0x20000a64
 8000c90:	20000046 	.word	0x20000046
 8000c94:	20000000 	.word	0x20000000
 8000c98:	20000a5c 	.word	0x20000a5c
 8000c9c:	20000a6c 	.word	0x20000a6c
 8000ca0:	20000a66 	.word	0x20000a66
 8000ca4:	2000004c 	.word	0x2000004c
 8000ca8:	200002cc 	.word	0x200002cc
 8000cac:	20000a4c 	.word	0x20000a4c
 8000cb0:	2000054c 	.word	0x2000054c
 8000cb4:	200007cc 	.word	0x200007cc
 8000cb8:	20000a50 	.word	0x20000a50
			} else {
				capturePos++;
 8000cbc:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <TIM3_IRQHandler+0x2f8>)
 8000cbe:	881b      	ldrh	r3, [r3, #0]
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <TIM3_IRQHandler+0x2f8>)
 8000cc8:	801a      	strh	r2, [r3, #0]
			}

			if (capturing) captureSamples++;
 8000cca:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <TIM3_IRQHandler+0x2fc>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d008      	beq.n	8000ce6 <TIM3_IRQHandler+0x2e2>
 8000cd4:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <TIM3_IRQHandler+0x300>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	b21b      	sxth	r3, r3
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	3301      	adds	r3, #1
 8000cde:	b29b      	uxth	r3, r3
 8000ce0:	b21a      	sxth	r2, r3
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <TIM3_IRQHandler+0x300>)
 8000ce4:	801a      	strh	r2, [r3, #0]

			oldAdc0 = adc0;
 8000ce6:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <TIM3_IRQHandler+0x304>)
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <TIM3_IRQHandler+0x308>)
 8000cee:	801a      	strh	r2, [r3, #0]

		}
	}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	20000a5c 	.word	0x20000a5c
 8000d00:	20000a64 	.word	0x20000a64
 8000d04:	20000a66 	.word	0x20000a66
 8000d08:	20000044 	.word	0x20000044
 8000d0c:	20000046 	.word	0x20000046

08000d10 <main>:
}

int main(void) {
 8000d10:	b590      	push	{r4, r7, lr}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af02      	add	r7, sp, #8
	SystemInit();				// Activates floating point coprocessor and resets clock
 8000d16:	f000 f9a3 	bl	8001060 <SystemInit>
//	SystemClock_Config();		// Configure the clock and PLL - NB Currently done in SystemInit but will need updating for production board
	SystemCoreClockUpdate();	// Update SystemCoreClock (system clock frequency) derived from settings of oscillators, prescalers and PLL
 8000d1a:	f000 f9d7 	bl	80010cc <SystemCoreClockUpdate>

	InitLCD();
 8000d1e:	f7ff fc89 	bl	8000634 <_Z7InitLCDv>
	InitADC();
 8000d22:	f7ff fd39 	bl	8000798 <_Z7InitADCv>

	//Initialize ILI9341
	TM_ILI9341_Init();
 8000d26:	f000 fb03 	bl	8001330 <_Z15TM_ILI9341_Initv>
	TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_2);		// Rotate LCD 90 degrees
 8000d2a:	2003      	movs	r0, #3
 8000d2c:	f000 fe5a 	bl	80019e4 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t>
	TM_ILI9341_Fill(ILI9341_COLOR_BLACK);						// Fill lcd with black
 8000d30:	2000      	movs	r0, #0
 8000d32:	f000 fdbb 	bl	80018ac <_Z15TM_ILI9341_Fillm>
	TM_ILI9341_Puts(245, 225, "Mountjoy", &TM_Font_7x10, ILI9341_COLOR_BLACK, ILI9341_COLOR_ORANGE);

	DW_Pattern_Fill(50, 50);
*/

	captureABuffer = ChannelA0;
 8000d36:	4b8c      	ldr	r3, [pc, #560]	; (8000f68 <main+0x258>)
 8000d38:	4a8c      	ldr	r2, [pc, #560]	; (8000f6c <main+0x25c>)
 8000d3a:	601a      	str	r2, [r3, #0]
	captureBBuffer = ChannelB0;
 8000d3c:	4b8c      	ldr	r3, [pc, #560]	; (8000f70 <main+0x260>)
 8000d3e:	4a8d      	ldr	r2, [pc, #564]	; (8000f74 <main+0x264>)
 8000d40:	601a      	str	r2, [r3, #0]
	InitTimer();
 8000d42:	f7ff fe2b 	bl	800099c <_Z9InitTimerv>

	while (1) {

		// check if we should start drawing
		if (!drawing && capturing) {
 8000d46:	4b8c      	ldr	r3, [pc, #560]	; (8000f78 <main+0x268>)
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	f083 0301 	eor.w	r3, r3, #1
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d006      	beq.n	8000d64 <main+0x54>
 8000d56:	4b89      	ldr	r3, [pc, #548]	; (8000f7c <main+0x26c>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	b2db      	uxtb	r3, r3
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <main+0x54>
 8000d60:	2301      	movs	r3, #1
 8000d62:	e000      	b.n	8000d66 <main+0x56>
 8000d64:	2300      	movs	r3, #0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d01e      	beq.n	8000da8 <main+0x98>
			drawing = true;
 8000d6a:	4b83      	ldr	r3, [pc, #524]	; (8000f78 <main+0x268>)
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
			drawPos = 0;
 8000d70:	4b83      	ldr	r3, [pc, #524]	; (8000f80 <main+0x270>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	801a      	strh	r2, [r3, #0]
			drawBufferNumber = captureBufferNumber;
 8000d76:	4b83      	ldr	r3, [pc, #524]	; (8000f84 <main+0x274>)
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	4b82      	ldr	r3, [pc, #520]	; (8000f88 <main+0x278>)
 8000d7e:	701a      	strb	r2, [r3, #0]

			// Get a pointer to the current draw buffer
			drawABuffer = drawBufferNumber == 0 ? ChannelA0 : ChannelA1;
 8000d80:	4b81      	ldr	r3, [pc, #516]	; (8000f88 <main+0x278>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	b2db      	uxtb	r3, r3
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d101      	bne.n	8000d8e <main+0x7e>
 8000d8a:	4b78      	ldr	r3, [pc, #480]	; (8000f6c <main+0x25c>)
 8000d8c:	e000      	b.n	8000d90 <main+0x80>
 8000d8e:	4b7f      	ldr	r3, [pc, #508]	; (8000f8c <main+0x27c>)
 8000d90:	4a7f      	ldr	r2, [pc, #508]	; (8000f90 <main+0x280>)
 8000d92:	6013      	str	r3, [r2, #0]
			drawBBuffer = drawBufferNumber == 0 ? ChannelB0 : ChannelB1;
 8000d94:	4b7c      	ldr	r3, [pc, #496]	; (8000f88 <main+0x278>)
 8000d96:	781b      	ldrb	r3, [r3, #0]
 8000d98:	b2db      	uxtb	r3, r3
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d101      	bne.n	8000da2 <main+0x92>
 8000d9e:	4b75      	ldr	r3, [pc, #468]	; (8000f74 <main+0x264>)
 8000da0:	e000      	b.n	8000da4 <main+0x94>
 8000da2:	4b7c      	ldr	r3, [pc, #496]	; (8000f94 <main+0x284>)
 8000da4:	4a7c      	ldr	r2, [pc, #496]	; (8000f98 <main+0x288>)
 8000da6:	6013      	str	r3, [r2, #0]
		}


		if (drawing) {
 8000da8:	4b73      	ldr	r3, [pc, #460]	; (8000f78 <main+0x268>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d0c9      	beq.n	8000d46 <main+0x36>

			// Check that the sample has been captured
			if (drawBufferNumber != captureBufferNumber || captureSamples >= drawPos) {
 8000db2:	4b75      	ldr	r3, [pc, #468]	; (8000f88 <main+0x278>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	b2da      	uxtb	r2, r3
 8000db8:	4b72      	ldr	r3, [pc, #456]	; (8000f84 <main+0x274>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	429a      	cmp	r2, r3
 8000dc0:	d108      	bne.n	8000dd4 <main+0xc4>
 8000dc2:	4b76      	ldr	r3, [pc, #472]	; (8000f9c <main+0x28c>)
 8000dc4:	881b      	ldrh	r3, [r3, #0]
 8000dc6:	b21b      	sxth	r3, r3
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4b6d      	ldr	r3, [pc, #436]	; (8000f80 <main+0x270>)
 8000dcc:	881b      	ldrh	r3, [r3, #0]
 8000dce:	b29b      	uxth	r3, r3
 8000dd0:	429a      	cmp	r2, r3
 8000dd2:	db01      	blt.n	8000dd8 <main+0xc8>
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	e000      	b.n	8000dda <main+0xca>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0b3      	beq.n	8000d46 <main+0x36>

				// Calculate offset between capture and drawing positions to display correct sample
				uint16_t calculatedOffset = drawOffset[drawBufferNumber] + drawPos;
 8000dde:	4b6a      	ldr	r3, [pc, #424]	; (8000f88 <main+0x278>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	461a      	mov	r2, r3
 8000de6:	4b6e      	ldr	r3, [pc, #440]	; (8000fa0 <main+0x290>)
 8000de8:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8000dec:	b29a      	uxth	r2, r3
 8000dee:	4b64      	ldr	r3, [pc, #400]	; (8000f80 <main+0x270>)
 8000df0:	881b      	ldrh	r3, [r3, #0]
 8000df2:	b29b      	uxth	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	80fb      	strh	r3, [r7, #6]
				if (calculatedOffset >= OSCWIDTH) calculatedOffset = calculatedOffset - OSCWIDTH;
 8000df8:	88fb      	ldrh	r3, [r7, #6]
 8000dfa:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000dfe:	db03      	blt.n	8000e08 <main+0xf8>
 8000e00:	88fb      	ldrh	r3, [r7, #6]
 8000e02:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8000e06:	80fb      	strh	r3, [r7, #6]

				// Set previous pixel to current pixel if starting a new screen
				if (drawPos == 0) {
 8000e08:	4b5d      	ldr	r3, [pc, #372]	; (8000f80 <main+0x270>)
 8000e0a:	881b      	ldrh	r3, [r3, #0]
 8000e0c:	b29b      	uxth	r3, r3
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	bf0c      	ite	eq
 8000e12:	2301      	moveq	r3, #1
 8000e14:	2300      	movne	r3, #0
 8000e16:	b2db      	uxtb	r3, r3
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d011      	beq.n	8000e40 <main+0x130>
					prevAPixel = drawABuffer[calculatedOffset];
 8000e1c:	4b5c      	ldr	r3, [pc, #368]	; (8000f90 <main+0x280>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	88fb      	ldrh	r3, [r7, #6]
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	881b      	ldrh	r3, [r3, #0]
 8000e28:	b29a      	uxth	r2, r3
 8000e2a:	4b5e      	ldr	r3, [pc, #376]	; (8000fa4 <main+0x294>)
 8000e2c:	801a      	strh	r2, [r3, #0]
					prevBPixel = drawBBuffer[calculatedOffset];
 8000e2e:	4b5a      	ldr	r3, [pc, #360]	; (8000f98 <main+0x288>)
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	88fb      	ldrh	r3, [r7, #6]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	4413      	add	r3, r2
 8000e38:	881b      	ldrh	r3, [r3, #0]
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	4b5a      	ldr	r3, [pc, #360]	; (8000fa8 <main+0x298>)
 8000e3e:	801a      	strh	r2, [r3, #0]
				}

				// Draw a black line over previous sample
				TM_ILI9341_DrawLine(drawPos, 0, drawPos, 239, ILI9341_COLOR_BLACK);
 8000e40:	4b4f      	ldr	r3, [pc, #316]	; (8000f80 <main+0x270>)
 8000e42:	881b      	ldrh	r3, [r3, #0]
 8000e44:	b298      	uxth	r0, r3
 8000e46:	4b4e      	ldr	r3, [pc, #312]	; (8000f80 <main+0x270>)
 8000e48:	881b      	ldrh	r3, [r3, #0]
 8000e4a:	b29a      	uxth	r2, r3
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	9300      	str	r3, [sp, #0]
 8000e50:	23ef      	movs	r3, #239	; 0xef
 8000e52:	2100      	movs	r1, #0
 8000e54:	f000 fe0a 	bl	8001a6c <_Z19TM_ILI9341_DrawLinettttm>

				// Draw current samples as lines from previous pixel position to current sample position
				TM_ILI9341_DrawLine(drawPos, drawABuffer[calculatedOffset], drawPos, prevAPixel, ILI9341_COLOR_GREEN);
 8000e58:	4b49      	ldr	r3, [pc, #292]	; (8000f80 <main+0x270>)
 8000e5a:	881b      	ldrh	r3, [r3, #0]
 8000e5c:	b298      	uxth	r0, r3
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <main+0x280>)
 8000e60:	681a      	ldr	r2, [r3, #0]
 8000e62:	88fb      	ldrh	r3, [r7, #6]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	4413      	add	r3, r2
 8000e68:	881b      	ldrh	r3, [r3, #0]
 8000e6a:	b299      	uxth	r1, r3
 8000e6c:	4b44      	ldr	r3, [pc, #272]	; (8000f80 <main+0x270>)
 8000e6e:	881b      	ldrh	r3, [r3, #0]
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b4c      	ldr	r3, [pc, #304]	; (8000fa4 <main+0x294>)
 8000e74:	881b      	ldrh	r3, [r3, #0]
 8000e76:	b29c      	uxth	r4, r3
 8000e78:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	4623      	mov	r3, r4
 8000e80:	f000 fdf4 	bl	8001a6c <_Z19TM_ILI9341_DrawLinettttm>
				TM_ILI9341_DrawLine(drawPos, drawBBuffer[calculatedOffset], drawPos, prevBPixel, ILI9341_COLOR_BLUE2);
 8000e84:	4b3e      	ldr	r3, [pc, #248]	; (8000f80 <main+0x270>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	b298      	uxth	r0, r3
 8000e8a:	4b43      	ldr	r3, [pc, #268]	; (8000f98 <main+0x288>)
 8000e8c:	681a      	ldr	r2, [r3, #0]
 8000e8e:	88fb      	ldrh	r3, [r7, #6]
 8000e90:	005b      	lsls	r3, r3, #1
 8000e92:	4413      	add	r3, r2
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	b299      	uxth	r1, r3
 8000e98:	4b39      	ldr	r3, [pc, #228]	; (8000f80 <main+0x270>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	b29a      	uxth	r2, r3
 8000e9e:	4b42      	ldr	r3, [pc, #264]	; (8000fa8 <main+0x298>)
 8000ea0:	881b      	ldrh	r3, [r3, #0]
 8000ea2:	b29c      	uxth	r4, r3
 8000ea4:	f240 531d 	movw	r3, #1309	; 0x51d
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	4623      	mov	r3, r4
 8000eac:	f000 fdde 	bl	8001a6c <_Z19TM_ILI9341_DrawLinettttm>

				// Store previous sample so next sample can be drawn as a line from old to new
				prevAPixel = drawABuffer[calculatedOffset];
 8000eb0:	4b37      	ldr	r3, [pc, #220]	; (8000f90 <main+0x280>)
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	88fb      	ldrh	r3, [r7, #6]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	881b      	ldrh	r3, [r3, #0]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	4b39      	ldr	r3, [pc, #228]	; (8000fa4 <main+0x294>)
 8000ec0:	801a      	strh	r2, [r3, #0]
				prevBPixel = drawBBuffer[calculatedOffset];
 8000ec2:	4b35      	ldr	r3, [pc, #212]	; (8000f98 <main+0x288>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	88fb      	ldrh	r3, [r7, #6]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	4413      	add	r3, r2
 8000ecc:	881b      	ldrh	r3, [r3, #0]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <main+0x298>)
 8000ed2:	801a      	strh	r2, [r3, #0]


				drawPos ++;
 8000ed4:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <main+0x270>)
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	3301      	adds	r3, #1
 8000edc:	b29a      	uxth	r2, r3
 8000ede:	4b28      	ldr	r3, [pc, #160]	; (8000f80 <main+0x270>)
 8000ee0:	801a      	strh	r2, [r3, #0]
				if (drawPos == OSCWIDTH) drawing = false;
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <main+0x270>)
 8000ee4:	881b      	ldrh	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000eec:	bf0c      	ite	eq
 8000eee:	2301      	moveq	r3, #1
 8000ef0:	2300      	movne	r3, #0
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d002      	beq.n	8000efe <main+0x1ee>
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <main+0x268>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	701a      	strb	r2, [r3, #0]

				// Draw trigger as a yellow cross
				if (drawPos == trigger.x + 4) {
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <main+0x270>)
 8000f00:	881b      	ldrh	r3, [r3, #0]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b29      	ldr	r3, [pc, #164]	; (8000fac <main+0x29c>)
 8000f08:	881b      	ldrh	r3, [r3, #0]
 8000f0a:	3304      	adds	r3, #4
 8000f0c:	429a      	cmp	r2, r3
 8000f0e:	bf0c      	ite	eq
 8000f10:	2301      	moveq	r3, #1
 8000f12:	2300      	movne	r3, #0
 8000f14:	b2db      	uxtb	r3, r3
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f43f af15 	beq.w	8000d46 <main+0x36>
					TM_ILI9341_DrawLine(trigger.x, trigger.y - 4, trigger.x, trigger.y + 4, ILI9341_COLOR_YELLOW);
 8000f1c:	4b23      	ldr	r3, [pc, #140]	; (8000fac <main+0x29c>)
 8000f1e:	8818      	ldrh	r0, [r3, #0]
 8000f20:	4b22      	ldr	r3, [pc, #136]	; (8000fac <main+0x29c>)
 8000f22:	885b      	ldrh	r3, [r3, #2]
 8000f24:	3b04      	subs	r3, #4
 8000f26:	b299      	uxth	r1, r3
 8000f28:	4b20      	ldr	r3, [pc, #128]	; (8000fac <main+0x29c>)
 8000f2a:	881a      	ldrh	r2, [r3, #0]
 8000f2c:	4b1f      	ldr	r3, [pc, #124]	; (8000fac <main+0x29c>)
 8000f2e:	885b      	ldrh	r3, [r3, #2]
 8000f30:	3304      	adds	r3, #4
 8000f32:	b29c      	uxth	r4, r3
 8000f34:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f38:	9300      	str	r3, [sp, #0]
 8000f3a:	4623      	mov	r3, r4
 8000f3c:	f000 fd96 	bl	8001a6c <_Z19TM_ILI9341_DrawLinettttm>
					TM_ILI9341_DrawLine(trigger.x - 4, trigger.y, trigger.x + 4, trigger.y, ILI9341_COLOR_YELLOW);
 8000f40:	4b1a      	ldr	r3, [pc, #104]	; (8000fac <main+0x29c>)
 8000f42:	881b      	ldrh	r3, [r3, #0]
 8000f44:	3b04      	subs	r3, #4
 8000f46:	b298      	uxth	r0, r3
 8000f48:	4b18      	ldr	r3, [pc, #96]	; (8000fac <main+0x29c>)
 8000f4a:	8859      	ldrh	r1, [r3, #2]
 8000f4c:	4b17      	ldr	r3, [pc, #92]	; (8000fac <main+0x29c>)
 8000f4e:	881b      	ldrh	r3, [r3, #0]
 8000f50:	3304      	adds	r3, #4
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	4b15      	ldr	r3, [pc, #84]	; (8000fac <main+0x29c>)
 8000f56:	885c      	ldrh	r4, [r3, #2]
 8000f58:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f5c:	9300      	str	r3, [sp, #0]
 8000f5e:	4623      	mov	r3, r4
 8000f60:	f000 fd84 	bl	8001a6c <_Z19TM_ILI9341_DrawLinettttm>

			}
		}


	}
 8000f64:	e6ef      	b.n	8000d46 <main+0x36>
 8000f66:	bf00      	nop
 8000f68:	20000a4c 	.word	0x20000a4c
 8000f6c:	2000004c 	.word	0x2000004c
 8000f70:	20000a50 	.word	0x20000a50
 8000f74:	2000054c 	.word	0x2000054c
 8000f78:	20000a68 	.word	0x20000a68
 8000f7c:	20000a64 	.word	0x20000a64
 8000f80:	20000a5e 	.word	0x20000a5e
 8000f84:	20000a69 	.word	0x20000a69
 8000f88:	20000a6a 	.word	0x20000a6a
 8000f8c:	200002cc 	.word	0x200002cc
 8000f90:	20000a54 	.word	0x20000a54
 8000f94:	200007cc 	.word	0x200007cc
 8000f98:	20000a58 	.word	0x20000a58
 8000f9c:	20000a66 	.word	0x20000a66
 8000fa0:	20000a6c 	.word	0x20000a6c
 8000fa4:	20000a60 	.word	0x20000a60
 8000fa8:	20000a62 	.word	0x20000a62
 8000fac:	20000000 	.word	0x20000000

08000fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fe8 <LoopFillZerobss+0x14>
  
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fb4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fb6:	e003      	b.n	8000fc0 <LoopCopyDataInit>

08000fb8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	; (8000fec <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000fba:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fbc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fbe:	3104      	adds	r1, #4

08000fc0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fc0:	480b      	ldr	r0, [pc, #44]	; (8000ff0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fc4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fc8:	d3f6      	bcc.n	8000fb8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fca:	4a0b      	ldr	r2, [pc, #44]	; (8000ff8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fcc:	e002      	b.n	8000fd4 <LoopFillZerobss>

08000fce <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fce:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fd0:	f842 3b04 	str.w	r3, [r2], #4

08000fd4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fd6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fd8:	d3f9      	bcc.n	8000fce <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fda:	f000 f841 	bl	8001060 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f000 fe07 	bl	8001bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fe2:	f7ff fe95 	bl	8000d10 <main>
  bx  lr    
 8000fe6:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000fe8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000fec:	08001c5c 	.word	0x08001c5c
  ldr  r0, =_sdata
 8000ff0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ff4:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000ff8:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000ffc:	20000a7c 	.word	0x20000a7c

08001000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001000:	e7fe      	b.n	8001000 <ADC_IRQHandler>

08001002 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001014:	e7fe      	b.n	8001014 <HardFault_Handler+0x4>

08001016 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800101a:	e7fe      	b.n	800101a <MemManage_Handler+0x4>

0800101c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001020:	e7fe      	b.n	8001020 <BusFault_Handler+0x4>

08001022 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001026:	e7fe      	b.n	8001026 <UsageFault_Handler+0x4>

08001028 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
/*  TimingDelay_Decrement(); */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001064:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <SystemInit+0x60>)
 8001066:	4b16      	ldr	r3, [pc, #88]	; (80010c0 <SystemInit+0x60>)
 8001068:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800106c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001070:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001074:	4a13      	ldr	r2, [pc, #76]	; (80010c4 <SystemInit+0x64>)
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <SystemInit+0x64>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001080:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <SystemInit+0x64>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <SystemInit+0x64>)
 8001088:	4b0e      	ldr	r3, [pc, #56]	; (80010c4 <SystemInit+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001090:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001094:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001096:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <SystemInit+0x64>)
 8001098:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <SystemInit+0x68>)
 800109a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800109c:	4a09      	ldr	r2, [pc, #36]	; (80010c4 <SystemInit+0x64>)
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <SystemInit+0x64>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010a6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80010a8:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <SystemInit+0x64>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 80010ae:	f000 f889 	bl	80011c4 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010b2:	4b03      	ldr	r3, [pc, #12]	; (80010c0 <SystemInit+0x60>)
 80010b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010b8:	609a      	str	r2, [r3, #8]
#endif
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00
 80010c4:	40023800 	.word	0x40023800
 80010c8:	24003010 	.word	0x24003010

080010cc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b087      	sub	sp, #28
 80010d0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	2300      	movs	r3, #0
 80010d8:	617b      	str	r3, [r7, #20]
 80010da:	2302      	movs	r3, #2
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	2300      	movs	r3, #0
 80010e0:	60bb      	str	r3, [r7, #8]
 80010e2:	2302      	movs	r3, #2
 80010e4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80010e6:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <SystemCoreClockUpdate+0xe4>)
 80010e8:	689b      	ldr	r3, [r3, #8]
 80010ea:	f003 030c 	and.w	r3, r3, #12
 80010ee:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80010f0:	693b      	ldr	r3, [r7, #16]
 80010f2:	2b04      	cmp	r3, #4
 80010f4:	d007      	beq.n	8001106 <SystemCoreClockUpdate+0x3a>
 80010f6:	2b08      	cmp	r3, #8
 80010f8:	d009      	beq.n	800110e <SystemCoreClockUpdate+0x42>
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d13d      	bne.n	800117a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80010fe:	4b2d      	ldr	r3, [pc, #180]	; (80011b4 <SystemCoreClockUpdate+0xe8>)
 8001100:	4a2d      	ldr	r2, [pc, #180]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 8001102:	601a      	str	r2, [r3, #0]
      break;
 8001104:	e03d      	b.n	8001182 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001106:	4b2b      	ldr	r3, [pc, #172]	; (80011b4 <SystemCoreClockUpdate+0xe8>)
 8001108:	4a2c      	ldr	r2, [pc, #176]	; (80011bc <SystemCoreClockUpdate+0xf0>)
 800110a:	601a      	str	r2, [r3, #0]
      break;
 800110c:	e039      	b.n	8001182 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800110e:	4b28      	ldr	r3, [pc, #160]	; (80011b0 <SystemCoreClockUpdate+0xe4>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	0d9b      	lsrs	r3, r3, #22
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800111a:	4b25      	ldr	r3, [pc, #148]	; (80011b0 <SystemCoreClockUpdate+0xe4>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001122:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00c      	beq.n	8001144 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800112a:	4a24      	ldr	r2, [pc, #144]	; (80011bc <SystemCoreClockUpdate+0xf0>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001132:	4a1f      	ldr	r2, [pc, #124]	; (80011b0 <SystemCoreClockUpdate+0xe4>)
 8001134:	6852      	ldr	r2, [r2, #4]
 8001136:	0992      	lsrs	r2, r2, #6
 8001138:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	e00b      	b.n	800115c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001144:	4a1c      	ldr	r2, [pc, #112]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	fbb2 f3f3 	udiv	r3, r2, r3
 800114c:	4a18      	ldr	r2, [pc, #96]	; (80011b0 <SystemCoreClockUpdate+0xe4>)
 800114e:	6852      	ldr	r2, [r2, #4]
 8001150:	0992      	lsrs	r2, r2, #6
 8001152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001156:	fb02 f303 	mul.w	r3, r2, r3
 800115a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <SystemCoreClockUpdate+0xe4>)
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	0c1b      	lsrs	r3, r3, #16
 8001162:	f003 0303 	and.w	r3, r3, #3
 8001166:	3301      	adds	r3, #1
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800116c:	697a      	ldr	r2, [r7, #20]
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	fbb2 f3f3 	udiv	r3, r2, r3
 8001174:	4a0f      	ldr	r2, [pc, #60]	; (80011b4 <SystemCoreClockUpdate+0xe8>)
 8001176:	6013      	str	r3, [r2, #0]
      break;
 8001178:	e003      	b.n	8001182 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <SystemCoreClockUpdate+0xe8>)
 800117c:	4a0e      	ldr	r2, [pc, #56]	; (80011b8 <SystemCoreClockUpdate+0xec>)
 800117e:	601a      	str	r2, [r3, #0]
      break;
 8001180:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <SystemCoreClockUpdate+0xe4>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	091b      	lsrs	r3, r3, #4
 8001188:	f003 030f 	and.w	r3, r3, #15
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <SystemCoreClockUpdate+0xf4>)
 800118e:	5cd3      	ldrb	r3, [r2, r3]
 8001190:	b2db      	uxtb	r3, r3
 8001192:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001194:	4b07      	ldr	r3, [pc, #28]	; (80011b4 <SystemCoreClockUpdate+0xe8>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	fa22 f303 	lsr.w	r3, r2, r3
 800119e:	4a05      	ldr	r2, [pc, #20]	; (80011b4 <SystemCoreClockUpdate+0xe8>)
 80011a0:	6013      	str	r3, [r2, #0]
}
 80011a2:	bf00      	nop
 80011a4:	371c      	adds	r7, #28
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	40023800 	.word	0x40023800
 80011b4:	20000004 	.word	0x20000004
 80011b8:	00f42400 	.word	0x00f42400
 80011bc:	007a1200 	.word	0x007a1200
 80011c0:	20000008 	.word	0x20000008

080011c4 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	2300      	movs	r3, #0
 80011d0:	603b      	str	r3, [r7, #0]
                   (RCC_PLLCFGR_PLLSRC_HSI) | (PLL_Q << 24);

#else /* PLL_SOURCE_HSE_BYPASS or PLL_SOURCE_HSE */

  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80011d2:	4a36      	ldr	r2, [pc, #216]	; (80012ac <SetSysClock+0xe8>)
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <SetSysClock+0xe8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011dc:	6013      	str	r3, [r2, #0]
  RCC->CR |= ((uint32_t)RCC_CR_HSEBYP);
#endif   /* PLL_SOURCE_HSE_BYPASS */
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80011de:	4b33      	ldr	r3, [pc, #204]	; (80012ac <SetSysClock+0xe8>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3301      	adds	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d103      	bne.n	80011fc <SetSysClock+0x38>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80011fa:	d1f0      	bne.n	80011de <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <SetSysClock+0xe8>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d002      	beq.n	800120e <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001208:	2301      	movs	r3, #1
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	e001      	b.n	8001212 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800120e:	2300      	movs	r3, #0
 8001210:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d102      	bne.n	800121e <SetSysClock+0x5a>
  {
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001218:	4b24      	ldr	r3, [pc, #144]	; (80012ac <SetSysClock+0xe8>)
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <SetSysClock+0xec>)
 800121c:	605a      	str	r2, [r3, #4]
         configuration. User can add here some code to deal with this error */
  }
#endif /*PLL_SOURCE_HSI*/
  
      /* Select regulator voltage output Scale 1 mode, System frequency up to 180 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 800121e:	4a23      	ldr	r2, [pc, #140]	; (80012ac <SetSysClock+0xe8>)
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <SetSysClock+0xe8>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 800122a:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <SetSysClock+0xf0>)
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <SetSysClock+0xf0>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001234:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 8001236:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <SetSysClock+0xe8>)
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <SetSysClock+0xe8>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 800123e:	4a1b      	ldr	r2, [pc, #108]	; (80012ac <SetSysClock+0xe8>)
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <SetSysClock+0xe8>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001248:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 800124a:	4a18      	ldr	r2, [pc, #96]	; (80012ac <SetSysClock+0xe8>)
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <SetSysClock+0xe8>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 8001254:	6093      	str	r3, [r2, #8]

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001256:	4a15      	ldr	r2, [pc, #84]	; (80012ac <SetSysClock+0xe8>)
 8001258:	4b14      	ldr	r3, [pc, #80]	; (80012ac <SetSysClock+0xe8>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001260:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001262:	bf00      	nop
 8001264:	4b11      	ldr	r3, [pc, #68]	; (80012ac <SetSysClock+0xe8>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126c:	2b00      	cmp	r3, #0
 800126e:	d0f9      	beq.n	8001264 <SetSysClock+0xa0>
    {
    }

    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <SetSysClock+0xf4>)
 8001272:	f240 7205 	movw	r2, #1797	; 0x705
 8001276:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001278:	4a0c      	ldr	r2, [pc, #48]	; (80012ac <SetSysClock+0xe8>)
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <SetSysClock+0xe8>)
 800127c:	689b      	ldr	r3, [r3, #8]
 800127e:	f023 0303 	bic.w	r3, r3, #3
 8001282:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001284:	4a09      	ldr	r2, [pc, #36]	; (80012ac <SetSysClock+0xe8>)
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <SetSysClock+0xe8>)
 8001288:	689b      	ldr	r3, [r3, #8]
 800128a:	f043 0302 	orr.w	r3, r3, #2
 800128e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8001290:	bf00      	nop
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SetSysClock+0xe8>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 030c 	and.w	r3, r3, #12
 800129a:	2b08      	cmp	r3, #8
 800129c:	d1f9      	bne.n	8001292 <SetSysClock+0xce>
    {
    }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	07405a08 	.word	0x07405a08
 80012b4:	40007000 	.word	0x40007000
 80012b8:	40023c00 	.word	0x40023c00

080012bc <_ZL11DW_SPI_Sendh>:
uint8_t ILI9341_INT_CalledFromPuts = 0;

uint16_t DMAint16;		// dummy variable for 16 bit DMA transfers

//  Send single byte over SPI
static __INLINE void DW_SPI_Send(uint8_t data) {
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	while ((SPI5->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || (SPI5->SR & SPI_SR_BSY));	// Wait for previous transmissions to complete if DMA TX enabled for SPI
 80012c6:	4b19      	ldr	r3, [pc, #100]	; (800132c <_ZL11DW_SPI_Sendh+0x70>)
 80012c8:	891b      	ldrh	r3, [r3, #8]
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	f003 0303 	and.w	r3, r3, #3
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d006      	beq.n	80012e2 <_ZL11DW_SPI_Sendh+0x26>
 80012d4:	4b15      	ldr	r3, [pc, #84]	; (800132c <_ZL11DW_SPI_Sendh+0x70>)
 80012d6:	891b      	ldrh	r3, [r3, #8]
 80012d8:	b29b      	uxth	r3, r3
 80012da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <_ZL11DW_SPI_Sendh+0x2a>
 80012e2:	2301      	movs	r3, #1
 80012e4:	e000      	b.n	80012e8 <_ZL11DW_SPI_Sendh+0x2c>
 80012e6:	2300      	movs	r3, #0
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d000      	beq.n	80012ee <_ZL11DW_SPI_Sendh+0x32>
 80012ec:	e7eb      	b.n	80012c6 <_ZL11DW_SPI_Sendh+0xa>

	SPI5->DR = data;					// Fill output buffer with data
 80012ee:	4b0f      	ldr	r3, [pc, #60]	; (800132c <_ZL11DW_SPI_Sendh+0x70>)
 80012f0:	79fa      	ldrb	r2, [r7, #7]
 80012f2:	b292      	uxth	r2, r2
 80012f4:	819a      	strh	r2, [r3, #12]

	while ((SPI5->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || (SPI5->SR & SPI_SR_BSY));	// Wait for transmission to complete
 80012f6:	4b0d      	ldr	r3, [pc, #52]	; (800132c <_ZL11DW_SPI_Sendh+0x70>)
 80012f8:	891b      	ldrh	r3, [r3, #8]
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	f003 0303 	and.w	r3, r3, #3
 8001300:	2b00      	cmp	r3, #0
 8001302:	d006      	beq.n	8001312 <_ZL11DW_SPI_Sendh+0x56>
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <_ZL11DW_SPI_Sendh+0x70>)
 8001306:	891b      	ldrh	r3, [r3, #8]
 8001308:	b29b      	uxth	r3, r3
 800130a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <_ZL11DW_SPI_Sendh+0x5a>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <_ZL11DW_SPI_Sendh+0x5c>
 8001316:	2300      	movs	r3, #0
 8001318:	2b00      	cmp	r3, #0
 800131a:	d000      	beq.n	800131e <_ZL11DW_SPI_Sendh+0x62>
 800131c:	e7eb      	b.n	80012f6 <_ZL11DW_SPI_Sendh+0x3a>
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	40015000 	.word	0x40015000

08001330 <_Z15TM_ILI9341_Initv>:
void TM_ILI9341_SendCommand(uint8_t data);
void TM_ILI9341_Delay(volatile unsigned int delay);
void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);

void TM_ILI9341_Init() {
 8001330:	b580      	push	{r7, lr}
 8001332:	af00      	add	r7, sp, #0

	/* CS high */
	ILI9341_CS_SET;
 8001334:	2104      	movs	r1, #4
 8001336:	480e      	ldr	r0, [pc, #56]	; (8001370 <_Z15TM_ILI9341_Initv+0x40>)
 8001338:	f7fe ff58 	bl	80001ec <GPIO_SetBits>
	
	/* Init LCD */
	TM_ILI9341_InitLCD();	
 800133c:	f000 f820 	bl	8001380 <_Z18TM_ILI9341_InitLCDv>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <_Z15TM_ILI9341_Initv+0x44>)
 8001342:	2200      	movs	r2, #0
 8001344:	801a      	strh	r2, [r3, #0]
 8001346:	4b0b      	ldr	r3, [pc, #44]	; (8001374 <_Z15TM_ILI9341_Initv+0x44>)
 8001348:	881a      	ldrh	r2, [r3, #0]
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <_Z15TM_ILI9341_Initv+0x48>)
 800134c:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 800134e:	4b0b      	ldr	r3, [pc, #44]	; (800137c <_Z15TM_ILI9341_Initv+0x4c>)
 8001350:	22f0      	movs	r2, #240	; 0xf0
 8001352:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <_Z15TM_ILI9341_Initv+0x4c>)
 8001356:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800135a:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 800135c:	4b07      	ldr	r3, [pc, #28]	; (800137c <_Z15TM_ILI9341_Initv+0x4c>)
 800135e:	2201      	movs	r2, #1
 8001360:	711a      	strb	r2, [r3, #4]
	
	/* Fill with white color */
	TM_ILI9341_Fill(ILI9341_COLOR_WHITE);
 8001362:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001366:	f000 faa1 	bl	80018ac <_Z15TM_ILI9341_Fillm>
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020800 	.word	0x40020800
 8001374:	20000a72 	.word	0x20000a72
 8001378:	20000a70 	.word	0x20000a70
 800137c:	20000a74 	.word	0x20000a74

08001380 <_Z18TM_ILI9341_InitLCDv>:

void TM_ILI9341_InitLCD(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 8001384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001388:	4899      	ldr	r0, [pc, #612]	; (80015f0 <_Z18TM_ILI9341_InitLCDv+0x270>)
 800138a:	f7fe ff3e 	bl	800020a <GPIO_ResetBits>
	TM_ILI9341_Delay(20000);
 800138e:	f644 6020 	movw	r0, #20000	; 0x4e20
 8001392:	f000 fb11 	bl	80019b8 <_Z16TM_ILI9341_Delayj>
	ILI9341_RST_SET;
 8001396:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800139a:	4895      	ldr	r0, [pc, #596]	; (80015f0 <_Z18TM_ILI9341_InitLCDv+0x270>)
 800139c:	f7fe ff26 	bl	80001ec <GPIO_SetBits>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 80013a0:	f644 6020 	movw	r0, #20000	; 0x4e20
 80013a4:	f000 fb08 	bl	80019b8 <_Z16TM_ILI9341_Delayj>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 80013a8:	2001      	movs	r0, #1
 80013aa:	f000 f925 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_Delay(50000);
 80013ae:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013b2:	f000 fb01 	bl	80019b8 <_Z16TM_ILI9341_Delayj>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 80013b6:	20cb      	movs	r0, #203	; 0xcb
 80013b8:	f000 f91e 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x39);
 80013bc:	2039      	movs	r0, #57	; 0x39
 80013be:	f000 f939 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x2C);
 80013c2:	202c      	movs	r0, #44	; 0x2c
 80013c4:	f000 f936 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x00);
 80013c8:	2000      	movs	r0, #0
 80013ca:	f000 f933 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x34);
 80013ce:	2034      	movs	r0, #52	; 0x34
 80013d0:	f000 f930 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x02);
 80013d4:	2002      	movs	r0, #2
 80013d6:	f000 f92d 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 80013da:	20cf      	movs	r0, #207	; 0xcf
 80013dc:	f000 f90c 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x00);
 80013e0:	2000      	movs	r0, #0
 80013e2:	f000 f927 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0xC1);
 80013e6:	20c1      	movs	r0, #193	; 0xc1
 80013e8:	f000 f924 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x30);
 80013ec:	2030      	movs	r0, #48	; 0x30
 80013ee:	f000 f921 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 80013f2:	20e8      	movs	r0, #232	; 0xe8
 80013f4:	f000 f900 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x85);
 80013f8:	2085      	movs	r0, #133	; 0x85
 80013fa:	f000 f91b 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x00);
 80013fe:	2000      	movs	r0, #0
 8001400:	f000 f918 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x78);
 8001404:	2078      	movs	r0, #120	; 0x78
 8001406:	f000 f915 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 800140a:	20ea      	movs	r0, #234	; 0xea
 800140c:	f000 f8f4 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x00);
 8001410:	2000      	movs	r0, #0
 8001412:	f000 f90f 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x00);
 8001416:	2000      	movs	r0, #0
 8001418:	f000 f90c 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 800141c:	20ed      	movs	r0, #237	; 0xed
 800141e:	f000 f8eb 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x64);
 8001422:	2064      	movs	r0, #100	; 0x64
 8001424:	f000 f906 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x03);
 8001428:	2003      	movs	r0, #3
 800142a:	f000 f903 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x12);
 800142e:	2012      	movs	r0, #18
 8001430:	f000 f900 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x81);
 8001434:	2081      	movs	r0, #129	; 0x81
 8001436:	f000 f8fd 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 800143a:	20f7      	movs	r0, #247	; 0xf7
 800143c:	f000 f8dc 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x20);
 8001440:	2020      	movs	r0, #32
 8001442:	f000 f8f7 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 8001446:	20c0      	movs	r0, #192	; 0xc0
 8001448:	f000 f8d6 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x23);
 800144c:	2023      	movs	r0, #35	; 0x23
 800144e:	f000 f8f1 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 8001452:	20c1      	movs	r0, #193	; 0xc1
 8001454:	f000 f8d0 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x10);
 8001458:	2010      	movs	r0, #16
 800145a:	f000 f8eb 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 800145e:	20c5      	movs	r0, #197	; 0xc5
 8001460:	f000 f8ca 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x3E);
 8001464:	203e      	movs	r0, #62	; 0x3e
 8001466:	f000 f8e5 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x28);
 800146a:	2028      	movs	r0, #40	; 0x28
 800146c:	f000 f8e2 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 8001470:	20c7      	movs	r0, #199	; 0xc7
 8001472:	f000 f8c1 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x86);
 8001476:	2086      	movs	r0, #134	; 0x86
 8001478:	f000 f8dc 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 800147c:	2036      	movs	r0, #54	; 0x36
 800147e:	f000 f8bb 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x48);
 8001482:	2048      	movs	r0, #72	; 0x48
 8001484:	f000 f8d6 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 8001488:	203a      	movs	r0, #58	; 0x3a
 800148a:	f000 f8b5 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x55);
 800148e:	2055      	movs	r0, #85	; 0x55
 8001490:	f000 f8d0 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 8001494:	20b1      	movs	r0, #177	; 0xb1
 8001496:	f000 f8af 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f000 f8ca 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x18);
 80014a0:	2018      	movs	r0, #24
 80014a2:	f000 f8c7 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 80014a6:	20b6      	movs	r0, #182	; 0xb6
 80014a8:	f000 f8a6 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x08);
 80014ac:	2008      	movs	r0, #8
 80014ae:	f000 f8c1 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x82);
 80014b2:	2082      	movs	r0, #130	; 0x82
 80014b4:	f000 f8be 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x27);
 80014b8:	2027      	movs	r0, #39	; 0x27
 80014ba:	f000 f8bb 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 80014be:	20f2      	movs	r0, #242	; 0xf2
 80014c0:	f000 f89a 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x00);
 80014c4:	2000      	movs	r0, #0
 80014c6:	f000 f8b5 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 80014ca:	202a      	movs	r0, #42	; 0x2a
 80014cc:	f000 f894 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x00);
 80014d0:	2000      	movs	r0, #0
 80014d2:	f000 f8af 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x00);
 80014d6:	2000      	movs	r0, #0
 80014d8:	f000 f8ac 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x00);
 80014dc:	2000      	movs	r0, #0
 80014de:	f000 f8a9 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0xEF);
 80014e2:	20ef      	movs	r0, #239	; 0xef
 80014e4:	f000 f8a6 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 80014e8:	202b      	movs	r0, #43	; 0x2b
 80014ea:	f000 f885 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x00);
 80014ee:	2000      	movs	r0, #0
 80014f0:	f000 f8a0 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x00);
 80014f4:	2000      	movs	r0, #0
 80014f6:	f000 f89d 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x01);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f000 f89a 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x3F);
 8001500:	203f      	movs	r0, #63	; 0x3f
 8001502:	f000 f897 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 8001506:	2026      	movs	r0, #38	; 0x26
 8001508:	f000 f876 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x01);
 800150c:	2001      	movs	r0, #1
 800150e:	f000 f891 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 8001512:	20e0      	movs	r0, #224	; 0xe0
 8001514:	f000 f870 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x0F);
 8001518:	200f      	movs	r0, #15
 800151a:	f000 f88b 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x31);
 800151e:	2031      	movs	r0, #49	; 0x31
 8001520:	f000 f888 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x2B);
 8001524:	202b      	movs	r0, #43	; 0x2b
 8001526:	f000 f885 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x0C);
 800152a:	200c      	movs	r0, #12
 800152c:	f000 f882 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x0E);
 8001530:	200e      	movs	r0, #14
 8001532:	f000 f87f 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x08);
 8001536:	2008      	movs	r0, #8
 8001538:	f000 f87c 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x4E);
 800153c:	204e      	movs	r0, #78	; 0x4e
 800153e:	f000 f879 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0xF1);
 8001542:	20f1      	movs	r0, #241	; 0xf1
 8001544:	f000 f876 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x37);
 8001548:	2037      	movs	r0, #55	; 0x37
 800154a:	f000 f873 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x07);
 800154e:	2007      	movs	r0, #7
 8001550:	f000 f870 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x10);
 8001554:	2010      	movs	r0, #16
 8001556:	f000 f86d 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x03);
 800155a:	2003      	movs	r0, #3
 800155c:	f000 f86a 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x0E);
 8001560:	200e      	movs	r0, #14
 8001562:	f000 f867 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x09);
 8001566:	2009      	movs	r0, #9
 8001568:	f000 f864 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x00);
 800156c:	2000      	movs	r0, #0
 800156e:	f000 f861 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 8001572:	20e1      	movs	r0, #225	; 0xe1
 8001574:	f000 f840 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(0x00);
 8001578:	2000      	movs	r0, #0
 800157a:	f000 f85b 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x0E);
 800157e:	200e      	movs	r0, #14
 8001580:	f000 f858 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x14);
 8001584:	2014      	movs	r0, #20
 8001586:	f000 f855 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x03);
 800158a:	2003      	movs	r0, #3
 800158c:	f000 f852 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x11);
 8001590:	2011      	movs	r0, #17
 8001592:	f000 f84f 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x07);
 8001596:	2007      	movs	r0, #7
 8001598:	f000 f84c 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x31);
 800159c:	2031      	movs	r0, #49	; 0x31
 800159e:	f000 f849 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0xC1);
 80015a2:	20c1      	movs	r0, #193	; 0xc1
 80015a4:	f000 f846 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x48);
 80015a8:	2048      	movs	r0, #72	; 0x48
 80015aa:	f000 f843 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x08);
 80015ae:	2008      	movs	r0, #8
 80015b0:	f000 f840 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x0F);
 80015b4:	200f      	movs	r0, #15
 80015b6:	f000 f83d 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x0C);
 80015ba:	200c      	movs	r0, #12
 80015bc:	f000 f83a 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x31);
 80015c0:	2031      	movs	r0, #49	; 0x31
 80015c2:	f000 f837 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x36);
 80015c6:	2036      	movs	r0, #54	; 0x36
 80015c8:	f000 f834 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(0x0F);
 80015cc:	200f      	movs	r0, #15
 80015ce:	f000 f831 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 80015d2:	2011      	movs	r0, #17
 80015d4:	f000 f810 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>

	TM_ILI9341_Delay(1000000);
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <_Z18TM_ILI9341_InitLCDv+0x274>)
 80015da:	f000 f9ed 	bl	80019b8 <_Z16TM_ILI9341_Delayj>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 80015de:	2029      	movs	r0, #41	; 0x29
 80015e0:	f000 f80a 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80015e4:	202c      	movs	r0, #44	; 0x2c
 80015e6:	f000 f807 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	40020c00 	.word	0x40020c00
 80015f4:	000f4240 	.word	0x000f4240

080015f8 <_Z22TM_ILI9341_SendCommandh>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	4603      	mov	r3, r0
 8001600:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 8001602:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001606:	4809      	ldr	r0, [pc, #36]	; (800162c <_Z22TM_ILI9341_SendCommandh+0x34>)
 8001608:	f7fe fdff 	bl	800020a <GPIO_ResetBits>
	ILI9341_CS_RESET;
 800160c:	2104      	movs	r1, #4
 800160e:	4808      	ldr	r0, [pc, #32]	; (8001630 <_Z22TM_ILI9341_SendCommandh+0x38>)
 8001610:	f7fe fdfb 	bl	800020a <GPIO_ResetBits>
	DW_SPI_Send(data);
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fe50 	bl	80012bc <_ZL11DW_SPI_Sendh>
	ILI9341_CS_SET;
 800161c:	2104      	movs	r1, #4
 800161e:	4804      	ldr	r0, [pc, #16]	; (8001630 <_Z22TM_ILI9341_SendCommandh+0x38>)
 8001620:	f7fe fde4 	bl	80001ec <GPIO_SetBits>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40020c00 	.word	0x40020c00
 8001630:	40020800 	.word	0x40020800

08001634 <_Z19TM_ILI9341_SendDatah>:

void TM_ILI9341_SendData(uint8_t data) {
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 800163e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001642:	4809      	ldr	r0, [pc, #36]	; (8001668 <_Z19TM_ILI9341_SendDatah+0x34>)
 8001644:	f7fe fdd2 	bl	80001ec <GPIO_SetBits>
	ILI9341_CS_RESET;
 8001648:	2104      	movs	r1, #4
 800164a:	4808      	ldr	r0, [pc, #32]	; (800166c <_Z19TM_ILI9341_SendDatah+0x38>)
 800164c:	f7fe fddd 	bl	800020a <GPIO_ResetBits>
	DW_SPI_Send(data);
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fe32 	bl	80012bc <_ZL11DW_SPI_Sendh>
	ILI9341_CS_SET;
 8001658:	2104      	movs	r1, #4
 800165a:	4804      	ldr	r0, [pc, #16]	; (800166c <_Z19TM_ILI9341_SendDatah+0x38>)
 800165c:	f7fe fdc6 	bl	80001ec <GPIO_SetBits>
}
 8001660:	bf00      	nop
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40020c00 	.word	0x40020c00
 800166c:	40020800 	.word	0x40020800

08001670 <_Z23DW_SPI_DMA_SendHalfWordtt>:



uint8_t DW_SPI_DMA_SendHalfWord(uint16_t value, uint16_t count) {
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	460a      	mov	r2, r1
 800167a:	80fb      	strh	r3, [r7, #6]
 800167c:	4613      	mov	r3, r2
 800167e:	80bb      	strh	r3, [r7, #4]

	if (DMA2_Stream6->NDTR)							// Check number of data items to transfer is zero (ie stream is free)
 8001680:	4b26      	ldr	r3, [pc, #152]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	2b00      	cmp	r3, #0
 8001686:	bf14      	ite	ne
 8001688:	2301      	movne	r3, #1
 800168a:	2300      	moveq	r3, #0
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <_Z23DW_SPI_DMA_SendHalfWordtt+0x26>
		return 0;
 8001692:	2300      	movs	r3, #0
 8001694:	e03c      	b.n	8001710 <_Z23DW_SPI_DMA_SendHalfWordtt+0xa0>

	DMAint16 = value;								// data to transfer - use public variable so does not go out of scope
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <_Z23DW_SPI_DMA_SendHalfWordtt+0xb0>)
 8001698:	88fb      	ldrh	r3, [r7, #6]
 800169a:	8013      	strh	r3, [r2, #0]

	// Clear DMA Stream 6 flags using high interrupt flag clear register
	DMA2->HIFCR = DMA_HIFCR_CFEIF6 | DMA_HIFCR_CDMEIF6 | DMA_HIFCR_CTEIF6 | DMA_HIFCR_CHTIF6 | DMA_HIFCR_CTCIF6;
 800169c:	4b21      	ldr	r3, [pc, #132]	; (8001724 <_Z23DW_SPI_DMA_SendHalfWordtt+0xb4>)
 800169e:	f44f 1274 	mov.w	r2, #3997696	; 0x3d0000
 80016a2:	60da      	str	r2, [r3, #12]

	// Initialise TX stream
	DMA2_Stream6->CR |= DMA_SxCR_CHSEL;				// 0b111 is channel 7
 80016a4:	4a1d      	ldr	r2, [pc, #116]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f043 6360 	orr.w	r3, r3, #234881024	; 0xe000000
 80016ae:	6013      	str	r3, [r2, #0]
	DMA2_Stream6->CR |= DMA_SxCR_MSIZE_0;			// Memory size: 8 bit; 01 = 16 bit; 10 = 32 bit
 80016b0:	4a1a      	ldr	r2, [pc, #104]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016ba:	6013      	str	r3, [r2, #0]
	DMA2_Stream6->CR |= DMA_SxCR_PSIZE_0;			// Peripheral size: 8 bit; 01 = 16 bit; 10 = 32 bit
 80016bc:	4a17      	ldr	r2, [pc, #92]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80016c6:	6013      	str	r3, [r2, #0]
	DMA2_Stream6->CR |= DMA_SxCR_DIR_0;				// data transfer direction: 00: peripheral-to-memory; 01: memory-to-peripheral; 10: memory-to-memory
 80016c8:	4a14      	ldr	r2, [pc, #80]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d2:	6013      	str	r3, [r2, #0]
	DMA2_Stream6->CR &= ~DMA_SxCR_MINC;				// Memory in increment mode
 80016d4:	4a11      	ldr	r2, [pc, #68]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016d6:	4b11      	ldr	r3, [pc, #68]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016de:	6013      	str	r3, [r2, #0]

	DMA2_Stream6->NDTR = count;						// Number of data items to transfer
 80016e0:	4a0e      	ldr	r2, [pc, #56]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016e2:	88bb      	ldrh	r3, [r7, #4]
 80016e4:	6053      	str	r3, [r2, #4]
	DMA2_Stream6->PAR = (uint32_t) &(SPI5->DR);		// Configure the peripheral data register address
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016e8:	4a0f      	ldr	r2, [pc, #60]	; (8001728 <_Z23DW_SPI_DMA_SendHalfWordtt+0xb8>)
 80016ea:	609a      	str	r2, [r3, #8]
	DMA2_Stream6->M0AR = (uint32_t) &DMAint16;		// DMA_InitStruct.DMA_Memory0BaseAddr;
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016ee:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <_Z23DW_SPI_DMA_SendHalfWordtt+0xb0>)
 80016f0:	60da      	str	r2, [r3, #12]

	DMA2_Stream6->CR |= DMA_SxCR_EN;				// Enable DMA transfer stream
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <_Z23DW_SPI_DMA_SendHalfWordtt+0xac>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6013      	str	r3, [r2, #0]
	SPI5->CR2 |= SPI_CR2_TXDMAEN;					// Enable SPI TX DMA
 80016fe:	4a0b      	ldr	r2, [pc, #44]	; (800172c <_Z23DW_SPI_DMA_SendHalfWordtt+0xbc>)
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <_Z23DW_SPI_DMA_SendHalfWordtt+0xbc>)
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	b29b      	uxth	r3, r3
 8001706:	f043 0302 	orr.w	r3, r3, #2
 800170a:	b29b      	uxth	r3, r3
 800170c:	8093      	strh	r3, [r2, #4]

	return 1;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	400264a0 	.word	0x400264a0
 8001720:	20000a7a 	.word	0x20000a7a
 8001724:	40026400 	.word	0x40026400
 8001728:	4001500c 	.word	0x4001500c
 800172c:	40015000 	.word	0x40015000

08001730 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t>:

void DW_SPI_SetDataSize(DW_SPI_DataSize_t Mode) {
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]

	SPI5->CR1 &= ~SPI_CR1_SPE;						// Disable SPI
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 800173c:	4b14      	ldr	r3, [pc, #80]	; (8001790 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 800173e:	881b      	ldrh	r3, [r3, #0]
 8001740:	b29b      	uxth	r3, r3
 8001742:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001746:	b29b      	uxth	r3, r3
 8001748:	8013      	strh	r3, [r2, #0]

	if (Mode == DW_SPI_DataSize_16b) {
 800174a:	79fb      	ldrb	r3, [r7, #7]
 800174c:	2b01      	cmp	r3, #1
 800174e:	d108      	bne.n	8001762 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x32>
		SPI5->CR1 |= SPI_CR1_DFF;					// Data frame format: 0: 8-bit data frame format; 1: 16-bit data frame format
 8001750:	4a0f      	ldr	r2, [pc, #60]	; (8001790 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8001752:	4b0f      	ldr	r3, [pc, #60]	; (8001790 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800175c:	b29b      	uxth	r3, r3
 800175e:	8013      	strh	r3, [r2, #0]
 8001760:	e007      	b.n	8001772 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x42>
	} else {
		SPI5->CR1 &= ~SPI_CR1_DFF;
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8001764:	4b0a      	ldr	r3, [pc, #40]	; (8001790 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8001766:	881b      	ldrh	r3, [r3, #0]
 8001768:	b29b      	uxth	r3, r3
 800176a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800176e:	b29b      	uxth	r3, r3
 8001770:	8013      	strh	r3, [r2, #0]
	}

	SPI5->CR1 |= SPI_CR1_SPE;						// Re-enable SPI
 8001772:	4a07      	ldr	r2, [pc, #28]	; (8001790 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t+0x60>)
 8001776:	881b      	ldrh	r3, [r3, #0]
 8001778:	b29b      	uxth	r3, r3
 800177a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800177e:	b29b      	uxth	r3, r3
 8001780:	8013      	strh	r3, [r2, #0]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40015000 	.word	0x40015000

08001794 <_Z18DW_SPI_DMA_Workingv>:

// Check if either send or receive registers have data or SPI is busy
uint8_t DW_SPI_DMA_Working(void) {
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
	return DMA2_Stream5->NDTR || DMA2_Stream6->NDTR || ((SPI5->SR & (SPI_SR_TXE | SPI_SR_RXNE)) == 0 || (SPI5->SR & SPI_SR_BSY));
 8001798:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <_Z18DW_SPI_DMA_Workingv+0x40>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d111      	bne.n	80017c4 <_Z18DW_SPI_DMA_Workingv+0x30>
 80017a0:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <_Z18DW_SPI_DMA_Workingv+0x44>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d10d      	bne.n	80017c4 <_Z18DW_SPI_DMA_Workingv+0x30>
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <_Z18DW_SPI_DMA_Workingv+0x48>)
 80017aa:	891b      	ldrh	r3, [r3, #8]
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	f003 0303 	and.w	r3, r3, #3
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d006      	beq.n	80017c4 <_Z18DW_SPI_DMA_Workingv+0x30>
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <_Z18DW_SPI_DMA_Workingv+0x48>)
 80017b8:	891b      	ldrh	r3, [r3, #8]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <_Z18DW_SPI_DMA_Workingv+0x34>
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <_Z18DW_SPI_DMA_Workingv+0x36>
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr
 80017d4:	40026488 	.word	0x40026488
 80017d8:	400264a0 	.word	0x400264a0
 80017dc:	40015000 	.word	0x40015000

080017e0 <_Z20TM_ILI9341_DrawPixelttm>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	603a      	str	r2, [r7, #0]
 80017ea:	80fb      	strh	r3, [r7, #6]
 80017ec:	460b      	mov	r3, r1
 80017ee:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 80017f0:	88bb      	ldrh	r3, [r7, #4]
 80017f2:	88fa      	ldrh	r2, [r7, #6]
 80017f4:	88b9      	ldrh	r1, [r7, #4]
 80017f6:	88f8      	ldrh	r0, [r7, #6]
 80017f8:	f000 f812 	bl	8001820 <_Z28TM_ILI9341_SetCursorPositiontttt>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 80017fc:	202c      	movs	r0, #44	; 0x2c
 80017fe:	f7ff fefb 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(color >> 8);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	0a1b      	lsrs	r3, r3, #8
 8001806:	b2db      	uxtb	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff ff13 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(color & 0xFF);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2db      	uxtb	r3, r3
 8001812:	4618      	mov	r0, r3
 8001814:	f7ff ff0e 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
}
 8001818:	bf00      	nop
 800181a:	3708      	adds	r7, #8
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}

08001820 <_Z28TM_ILI9341_SetCursorPositiontttt>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001820:	b590      	push	{r4, r7, lr}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	4604      	mov	r4, r0
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4623      	mov	r3, r4
 8001830:	80fb      	strh	r3, [r7, #6]
 8001832:	4603      	mov	r3, r0
 8001834:	80bb      	strh	r3, [r7, #4]
 8001836:	460b      	mov	r3, r1
 8001838:	807b      	strh	r3, [r7, #2]
 800183a:	4613      	mov	r3, r2
 800183c:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800183e:	202a      	movs	r0, #42	; 0x2a
 8001840:	f7ff feda 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(x1 >> 8);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	121b      	asrs	r3, r3, #8
 8001848:	b2db      	uxtb	r3, r3
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fef2 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(x1 & 0xFF);
 8001850:	88fb      	ldrh	r3, [r7, #6]
 8001852:	b2db      	uxtb	r3, r3
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff feed 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(x2 >> 8);
 800185a:	887b      	ldrh	r3, [r7, #2]
 800185c:	121b      	asrs	r3, r3, #8
 800185e:	b2db      	uxtb	r3, r3
 8001860:	4618      	mov	r0, r3
 8001862:	f7ff fee7 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(x2 & 0xFF);
 8001866:	887b      	ldrh	r3, [r7, #2]
 8001868:	b2db      	uxtb	r3, r3
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fee2 	bl	8001634 <_Z19TM_ILI9341_SendDatah>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 8001870:	202b      	movs	r0, #43	; 0x2b
 8001872:	f7ff fec1 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	TM_ILI9341_SendData(y1 >> 8);
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	121b      	asrs	r3, r3, #8
 800187a:	b2db      	uxtb	r3, r3
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff fed9 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(y1 & 0xFF);
 8001882:	88bb      	ldrh	r3, [r7, #4]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff fed4 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(y2 >> 8);
 800188c:	883b      	ldrh	r3, [r7, #0]
 800188e:	121b      	asrs	r3, r3, #8
 8001890:	b2db      	uxtb	r3, r3
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff fece 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	TM_ILI9341_SendData(y2 & 0xFF);
 8001898:	883b      	ldrh	r3, [r7, #0]
 800189a:	b2db      	uxtb	r3, r3
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff fec9 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
}
 80018a2:	bf00      	nop
 80018a4:	370c      	adds	r7, #12
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd90      	pop	{r4, r7, pc}
	...

080018ac <_Z15TM_ILI9341_Fillm>:

void TM_ILI9341_Fill(uint32_t color) {
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af02      	add	r7, sp, #8
 80018b2:	6078      	str	r0, [r7, #4]
	/* Fill entire screen */
	TM_ILI9341_INT_Fill(0, 0, ILI9341_Opts.width - 1, ILI9341_Opts.height, color);
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <_Z15TM_ILI9341_Fillm+0x2c>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	3b01      	subs	r3, #1
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <_Z15TM_ILI9341_Fillm+0x2c>)
 80018be:	8859      	ldrh	r1, [r3, #2]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	460b      	mov	r3, r1
 80018c8:	2100      	movs	r1, #0
 80018ca:	2000      	movs	r0, #0
 80018cc:	f000 f806 	bl	80018dc <_Z19TM_ILI9341_INT_Fillttttt>
}
 80018d0:	bf00      	nop
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	20000a74 	.word	0x20000a74

080018dc <_Z19TM_ILI9341_INT_Fillttttt>:

void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80018dc:	b590      	push	{r4, r7, lr}
 80018de:	b085      	sub	sp, #20
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	4604      	mov	r4, r0
 80018e4:	4608      	mov	r0, r1
 80018e6:	4611      	mov	r1, r2
 80018e8:	461a      	mov	r2, r3
 80018ea:	4623      	mov	r3, r4
 80018ec:	80fb      	strh	r3, [r7, #6]
 80018ee:	4603      	mov	r3, r0
 80018f0:	80bb      	strh	r3, [r7, #4]
 80018f2:	460b      	mov	r3, r1
 80018f4:	807b      	strh	r3, [r7, #2]
 80018f6:	4613      	mov	r3, r2
 80018f8:	803b      	strh	r3, [r7, #0]
	uint32_t pixels_count;
	
	/* Set cursor position */
	TM_ILI9341_SetCursorPosition(x0, y0, x1, y1);
 80018fa:	883b      	ldrh	r3, [r7, #0]
 80018fc:	887a      	ldrh	r2, [r7, #2]
 80018fe:	88b9      	ldrh	r1, [r7, #4]
 8001900:	88f8      	ldrh	r0, [r7, #6]
 8001902:	f7ff ff8d 	bl	8001820 <_Z28TM_ILI9341_SetCursorPositiontttt>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 8001906:	202c      	movs	r0, #44	; 0x2c
 8001908:	f7ff fe76 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	
	/* Calculate pixels count */
	pixels_count = (x1 - x0 + 1) * (y1 - y0 + 1);
 800190c:	887a      	ldrh	r2, [r7, #2]
 800190e:	88fb      	ldrh	r3, [r7, #6]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	3301      	adds	r3, #1
 8001914:	8839      	ldrh	r1, [r7, #0]
 8001916:	88ba      	ldrh	r2, [r7, #4]
 8001918:	1a8a      	subs	r2, r1, r2
 800191a:	3201      	adds	r2, #1
 800191c:	fb02 f303 	mul.w	r3, r2, r3
 8001920:	60fb      	str	r3, [r7, #12]

	ILI9341_CS_RESET;
 8001922:	2104      	movs	r1, #4
 8001924:	4822      	ldr	r0, [pc, #136]	; (80019b0 <_Z19TM_ILI9341_INT_Fillttttt+0xd4>)
 8001926:	f7fe fc70 	bl	800020a <GPIO_ResetBits>
	ILI9341_WRX_SET;
 800192a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800192e:	4821      	ldr	r0, [pc, #132]	; (80019b4 <_Z19TM_ILI9341_INT_Fillttttt+0xd8>)
 8001930:	f7fe fc5c 	bl	80001ec <GPIO_SetBits>

	DW_SPI_SetDataSize(DW_SPI_DataSize_16b);			// 16-bit SPI mode
 8001934:	2001      	movs	r0, #1
 8001936:	f7ff fefb 	bl	8001730 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t>
	
	// Send first 65535 bytes, SPI must be in 16-bit Mode
	DW_SPI_DMA_SendHalfWord(color, (pixels_count > 0xFFFF) ? 0xFFFF : pixels_count);
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001940:	4293      	cmp	r3, r2
 8001942:	bf28      	it	cs
 8001944:	4613      	movcs	r3, r2
 8001946:	b29a      	uxth	r2, r3
 8001948:	8c3b      	ldrh	r3, [r7, #32]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe8f 	bl	8001670 <_Z23DW_SPI_DMA_SendHalfWordtt>

	while (DW_SPI_DMA_Working());
 8001952:	f7ff ff1f 	bl	8001794 <_Z18DW_SPI_DMA_Workingv>
 8001956:	4603      	mov	r3, r0
 8001958:	2b00      	cmp	r3, #0
 800195a:	bf14      	ite	ne
 800195c:	2301      	movne	r3, #1
 800195e:	2300      	moveq	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	2b00      	cmp	r3, #0
 8001964:	d000      	beq.n	8001968 <_Z19TM_ILI9341_INT_Fillttttt+0x8c>
 8001966:	e7f4      	b.n	8001952 <_Z19TM_ILI9341_INT_Fillttttt+0x76>
	
	// Check if there is more data to send
	if (pixels_count > 0xFFFF) {
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800196e:	d313      	bcc.n	8001998 <_Z19TM_ILI9341_INT_Fillttttt+0xbc>
		DW_SPI_DMA_SendHalfWord(color, pixels_count - 0xFFFF);		// Send remaining data
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	b29b      	uxth	r3, r3
 8001974:	3301      	adds	r3, #1
 8001976:	b29a      	uxth	r2, r3
 8001978:	8c3b      	ldrh	r3, [r7, #32]
 800197a:	4611      	mov	r1, r2
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff fe77 	bl	8001670 <_Z23DW_SPI_DMA_SendHalfWordtt>

		while (DW_SPI_DMA_Working());
 8001982:	f7ff ff07 	bl	8001794 <_Z18DW_SPI_DMA_Workingv>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	bf14      	ite	ne
 800198c:	2301      	movne	r3, #1
 800198e:	2300      	moveq	r3, #0
 8001990:	b2db      	uxtb	r3, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	d000      	beq.n	8001998 <_Z19TM_ILI9341_INT_Fillttttt+0xbc>
 8001996:	e7f4      	b.n	8001982 <_Z19TM_ILI9341_INT_Fillttttt+0xa6>
	}
	
	ILI9341_CS_SET;
 8001998:	2104      	movs	r1, #4
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <_Z19TM_ILI9341_INT_Fillttttt+0xd4>)
 800199c:	f7fe fc26 	bl	80001ec <GPIO_SetBits>

	DW_SPI_SetDataSize(DW_SPI_DataSize_8b);				// 8 bit SPI Mode
 80019a0:	2000      	movs	r0, #0
 80019a2:	f7ff fec5 	bl	8001730 <_Z18DW_SPI_SetDataSize17DW_SPI_DataSize_t>
}
 80019a6:	bf00      	nop
 80019a8:	3714      	adds	r7, #20
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd90      	pop	{r4, r7, pc}
 80019ae:	bf00      	nop
 80019b0:	40020800 	.word	0x40020800
 80019b4:	40020c00 	.word	0x40020c00

080019b8 <_Z16TM_ILI9341_Delayj>:
}




void TM_ILI9341_Delay(volatile unsigned int delay) {
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	bf14      	ite	ne
 80019c6:	2301      	movne	r3, #1
 80019c8:	2300      	moveq	r3, #0
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <_Z16TM_ILI9341_Delayj+0x20>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	3b01      	subs	r3, #1
 80019d4:	607b      	str	r3, [r7, #4]
 80019d6:	e7f3      	b.n	80019c0 <_Z16TM_ILI9341_Delayj+0x8>
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t>:

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	4603      	mov	r3, r0
 80019ec:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_SendCommand(ILI9341_MAC);
 80019ee:	2036      	movs	r0, #54	; 0x36
 80019f0:	f7ff fe02 	bl	80015f8 <_Z22TM_ILI9341_SendCommandh>
	if (orientation == TM_ILI9341_Orientation_Portrait_1) {
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d103      	bne.n	8001a02 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x1e>
		TM_ILI9341_SendData(0x58);
 80019fa:	2058      	movs	r0, #88	; 0x58
 80019fc:	f7ff fe1a 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
 8001a00:	e013      	b.n	8001a2a <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Portrait_2) {
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d103      	bne.n	8001a10 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x2c>
		TM_ILI9341_SendData(0x88);
 8001a08:	2088      	movs	r0, #136	; 0x88
 8001a0a:	f7ff fe13 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
 8001a0e:	e00c      	b.n	8001a2a <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_1) {
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d103      	bne.n	8001a1e <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x3a>
		TM_ILI9341_SendData(0x28);
 8001a16:	2028      	movs	r0, #40	; 0x28
 8001a18:	f7ff fe0c 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
 8001a1c:	e005      	b.n	8001a2a <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_2) {
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d102      	bne.n	8001a2a <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x46>
		TM_ILI9341_SendData(0xE8);
 8001a24:	20e8      	movs	r0, #232	; 0xe8
 8001a26:	f7ff fe05 	bl	8001634 <_Z19TM_ILI9341_SendDatah>
	}
	
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x52>
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d10a      	bne.n	8001a4c <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 8001a38:	22f0      	movs	r2, #240	; 0xf0
 8001a3a:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 8001a3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a42:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 8001a44:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 8001a46:	2201      	movs	r2, #1
 8001a48:	711a      	strb	r2, [r3, #4]
 8001a4a:	e009      	b.n	8001a60 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x7c>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 8001a4e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001a52:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 8001a54:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 8001a56:	22f0      	movs	r2, #240	; 0xf0
 8001a58:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Landscape;
 8001a5a:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <_Z17TM_ILI9341_Rotate24TM_ILI9341_Orientation_t+0x84>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	711a      	strb	r2, [r3, #4]
	}
}
 8001a60:	bf00      	nop
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000a74 	.word	0x20000a74

08001a6c <_Z19TM_ILI9341_DrawLinettttm>:
	/* Set new pointer */
	ILI9341_x += font->FontWidth;
}


void TM_ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {
 8001a6c:	b590      	push	{r4, r7, lr}
 8001a6e:	b089      	sub	sp, #36	; 0x24
 8001a70:	af02      	add	r7, sp, #8
 8001a72:	4604      	mov	r4, r0
 8001a74:	4608      	mov	r0, r1
 8001a76:	4611      	mov	r1, r2
 8001a78:	461a      	mov	r2, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	80fb      	strh	r3, [r7, #6]
 8001a7e:	4603      	mov	r3, r0
 8001a80:	80bb      	strh	r3, [r7, #4]
 8001a82:	460b      	mov	r3, r1
 8001a84:	807b      	strh	r3, [r7, #2]
 8001a86:	4613      	mov	r3, r2
 8001a88:	803b      	strh	r3, [r7, #0]
	
	int16_t dx, dy, sx, sy, err, e2; 	
	uint16_t tmp;
	
	/* Check for overflow */
	if (x0 >= ILI9341_Opts.width) {
 8001a8a:	88fb      	ldrh	r3, [r7, #6]
 8001a8c:	4a57      	ldr	r2, [pc, #348]	; (8001bec <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8001a8e:	8812      	ldrh	r2, [r2, #0]
 8001a90:	4293      	cmp	r3, r2
 8001a92:	db03      	blt.n	8001a9c <_Z19TM_ILI9341_DrawLinettttm+0x30>
		x0 = ILI9341_Opts.width - 1;
 8001a94:	4b55      	ldr	r3, [pc, #340]	; (8001bec <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	3b01      	subs	r3, #1
 8001a9a:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= ILI9341_Opts.width) {
 8001a9c:	887b      	ldrh	r3, [r7, #2]
 8001a9e:	4a53      	ldr	r2, [pc, #332]	; (8001bec <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8001aa0:	8812      	ldrh	r2, [r2, #0]
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	db03      	blt.n	8001aae <_Z19TM_ILI9341_DrawLinettttm+0x42>
		x1 = ILI9341_Opts.width - 1;
 8001aa6:	4b51      	ldr	r3, [pc, #324]	; (8001bec <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= ILI9341_Opts.height) {
 8001aae:	88bb      	ldrh	r3, [r7, #4]
 8001ab0:	4a4e      	ldr	r2, [pc, #312]	; (8001bec <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8001ab2:	8852      	ldrh	r2, [r2, #2]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	db03      	blt.n	8001ac0 <_Z19TM_ILI9341_DrawLinettttm+0x54>
		y0 = ILI9341_Opts.height - 1;
 8001ab8:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8001aba:	885b      	ldrh	r3, [r3, #2]
 8001abc:	3b01      	subs	r3, #1
 8001abe:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= ILI9341_Opts.height) {
 8001ac0:	883b      	ldrh	r3, [r7, #0]
 8001ac2:	4a4a      	ldr	r2, [pc, #296]	; (8001bec <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8001ac4:	8852      	ldrh	r2, [r2, #2]
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	db03      	blt.n	8001ad2 <_Z19TM_ILI9341_DrawLinettttm+0x66>
		y1 = ILI9341_Opts.height - 1;
 8001aca:	4b48      	ldr	r3, [pc, #288]	; (8001bec <_Z19TM_ILI9341_DrawLinettttm+0x180>)
 8001acc:	885b      	ldrh	r3, [r3, #2]
 8001ace:	3b01      	subs	r3, #1
 8001ad0:	803b      	strh	r3, [r7, #0]
	}
	
	/* Check correction */
	if (x0 > x1) {
 8001ad2:	88fa      	ldrh	r2, [r7, #6]
 8001ad4:	887b      	ldrh	r3, [r7, #2]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	dd05      	ble.n	8001ae6 <_Z19TM_ILI9341_DrawLinettttm+0x7a>
		tmp = x0;
 8001ada:	88fb      	ldrh	r3, [r7, #6]
 8001adc:	82bb      	strh	r3, [r7, #20]
		x0 = x1;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 8001ae2:	8abb      	ldrh	r3, [r7, #20]
 8001ae4:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 8001ae6:	88ba      	ldrh	r2, [r7, #4]
 8001ae8:	883b      	ldrh	r3, [r7, #0]
 8001aea:	429a      	cmp	r2, r3
 8001aec:	dd05      	ble.n	8001afa <_Z19TM_ILI9341_DrawLinettttm+0x8e>
		tmp = y0;
 8001aee:	88bb      	ldrh	r3, [r7, #4]
 8001af0:	82bb      	strh	r3, [r7, #20]
		y0 = y1;
 8001af2:	883b      	ldrh	r3, [r7, #0]
 8001af4:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 8001af6:	8abb      	ldrh	r3, [r7, #20]
 8001af8:	803b      	strh	r3, [r7, #0]
	}
	
	dx = x1 - x0;
 8001afa:	887a      	ldrh	r2, [r7, #2]
 8001afc:	88fb      	ldrh	r3, [r7, #6]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	b29b      	uxth	r3, r3
 8001b02:	827b      	strh	r3, [r7, #18]
	dy = y1 - y0;
 8001b04:	883a      	ldrh	r2, [r7, #0]
 8001b06:	88bb      	ldrh	r3, [r7, #4]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	823b      	strh	r3, [r7, #16]
	
	/* Vertical or horizontal line */
	if (dx == 0 || dy == 0) {
 8001b0e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d003      	beq.n	8001b1e <_Z19TM_ILI9341_DrawLinettttm+0xb2>
 8001b16:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <_Z19TM_ILI9341_DrawLinettttm+0xc8>
		TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
 8001b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	883c      	ldrh	r4, [r7, #0]
 8001b24:	887a      	ldrh	r2, [r7, #2]
 8001b26:	88b9      	ldrh	r1, [r7, #4]
 8001b28:	88f8      	ldrh	r0, [r7, #6]
 8001b2a:	9300      	str	r3, [sp, #0]
 8001b2c:	4623      	mov	r3, r4
 8001b2e:	f7ff fed5 	bl	80018dc <_Z19TM_ILI9341_INT_Fillttttt>
		return;
 8001b32:	e057      	b.n	8001be4 <_Z19TM_ILI9341_DrawLinettttm+0x178>
	}
	
	sx = (x0 < x1) ? 1 : -1; 
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	887b      	ldrh	r3, [r7, #2]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	da01      	bge.n	8001b40 <_Z19TM_ILI9341_DrawLinettttm+0xd4>
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e001      	b.n	8001b44 <_Z19TM_ILI9341_DrawLinettttm+0xd8>
 8001b40:	f04f 33ff 	mov.w	r3, #4294967295
 8001b44:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001b46:	88ba      	ldrh	r2, [r7, #4]
 8001b48:	883b      	ldrh	r3, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	da01      	bge.n	8001b52 <_Z19TM_ILI9341_DrawLinettttm+0xe6>
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e001      	b.n	8001b56 <_Z19TM_ILI9341_DrawLinettttm+0xea>
 8001b52:	f04f 33ff 	mov.w	r3, #4294967295
 8001b56:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001b58:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001b5c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dd06      	ble.n	8001b72 <_Z19TM_ILI9341_DrawLinettttm+0x106>
 8001b64:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001b68:	0fda      	lsrs	r2, r3, #31
 8001b6a:	4413      	add	r3, r2
 8001b6c:	105b      	asrs	r3, r3, #1
 8001b6e:	b21b      	sxth	r3, r3
 8001b70:	e006      	b.n	8001b80 <_Z19TM_ILI9341_DrawLinettttm+0x114>
 8001b72:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b76:	425b      	negs	r3, r3
 8001b78:	0fda      	lsrs	r2, r3, #31
 8001b7a:	4413      	add	r3, r2
 8001b7c:	105b      	asrs	r3, r3, #1
 8001b7e:	b21b      	sxth	r3, r3
 8001b80:	82fb      	strh	r3, [r7, #22]

	while (1) {
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8001b82:	88b9      	ldrh	r1, [r7, #4]
 8001b84:	88fb      	ldrh	r3, [r7, #6]
 8001b86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff fe29 	bl	80017e0 <_Z20TM_ILI9341_DrawPixelttm>
		if (x0 == x1 && y0 == y1) {
 8001b8e:	88fa      	ldrh	r2, [r7, #6]
 8001b90:	887b      	ldrh	r3, [r7, #2]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d103      	bne.n	8001b9e <_Z19TM_ILI9341_DrawLinettttm+0x132>
 8001b96:	88ba      	ldrh	r2, [r7, #4]
 8001b98:	883b      	ldrh	r3, [r7, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d021      	beq.n	8001be2 <_Z19TM_ILI9341_DrawLinettttm+0x176>
			break;
		}
		e2 = err; 
 8001b9e:	8afb      	ldrh	r3, [r7, #22]
 8001ba0:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 8001ba2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001ba6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001baa:	425b      	negs	r3, r3
 8001bac:	429a      	cmp	r2, r3
 8001bae:	dd08      	ble.n	8001bc2 <_Z19TM_ILI9341_DrawLinettttm+0x156>
			err -= dy;
 8001bb0:	8afa      	ldrh	r2, [r7, #22]
 8001bb2:	8a3b      	ldrh	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001bba:	89fa      	ldrh	r2, [r7, #14]
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001bc2:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	dad9      	bge.n	8001b82 <_Z19TM_ILI9341_DrawLinettttm+0x116>
			err += dx;
 8001bce:	8afa      	ldrh	r2, [r7, #22]
 8001bd0:	8a7b      	ldrh	r3, [r7, #18]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001bd8:	89ba      	ldrh	r2, [r7, #12]
 8001bda:	88bb      	ldrh	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	80bb      	strh	r3, [r7, #4]
		TM_ILI9341_DrawPixel(x0, y0, color); 
 8001be0:	e7cf      	b.n	8001b82 <_Z19TM_ILI9341_DrawLinettttm+0x116>
			break;
 8001be2:	bf00      	nop
		} 
	}
}
 8001be4:	371c      	adds	r7, #28
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd90      	pop	{r4, r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000a74 	.word	0x20000a74

08001bf0 <__libc_init_array>:
 8001bf0:	b570      	push	{r4, r5, r6, lr}
 8001bf2:	4e0d      	ldr	r6, [pc, #52]	; (8001c28 <__libc_init_array+0x38>)
 8001bf4:	4c0d      	ldr	r4, [pc, #52]	; (8001c2c <__libc_init_array+0x3c>)
 8001bf6:	1ba4      	subs	r4, r4, r6
 8001bf8:	10a4      	asrs	r4, r4, #2
 8001bfa:	2500      	movs	r5, #0
 8001bfc:	42a5      	cmp	r5, r4
 8001bfe:	d109      	bne.n	8001c14 <__libc_init_array+0x24>
 8001c00:	4e0b      	ldr	r6, [pc, #44]	; (8001c30 <__libc_init_array+0x40>)
 8001c02:	4c0c      	ldr	r4, [pc, #48]	; (8001c34 <__libc_init_array+0x44>)
 8001c04:	f000 f818 	bl	8001c38 <_init>
 8001c08:	1ba4      	subs	r4, r4, r6
 8001c0a:	10a4      	asrs	r4, r4, #2
 8001c0c:	2500      	movs	r5, #0
 8001c0e:	42a5      	cmp	r5, r4
 8001c10:	d105      	bne.n	8001c1e <__libc_init_array+0x2e>
 8001c12:	bd70      	pop	{r4, r5, r6, pc}
 8001c14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c18:	4798      	blx	r3
 8001c1a:	3501      	adds	r5, #1
 8001c1c:	e7ee      	b.n	8001bfc <__libc_init_array+0xc>
 8001c1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c22:	4798      	blx	r3
 8001c24:	3501      	adds	r5, #1
 8001c26:	e7f2      	b.n	8001c0e <__libc_init_array+0x1e>
 8001c28:	08001c54 	.word	0x08001c54
 8001c2c:	08001c54 	.word	0x08001c54
 8001c30:	08001c54 	.word	0x08001c54
 8001c34:	08001c58 	.word	0x08001c58

08001c38 <_init>:
 8001c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3a:	bf00      	nop
 8001c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c3e:	bc08      	pop	{r3}
 8001c40:	469e      	mov	lr, r3
 8001c42:	4770      	bx	lr

08001c44 <_fini>:
 8001c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c46:	bf00      	nop
 8001c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c4a:	bc08      	pop	{r3}
 8001c4c:	469e      	mov	lr, r3
 8001c4e:	4770      	bx	lr
